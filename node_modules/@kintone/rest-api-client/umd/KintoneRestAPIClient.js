(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.window = global.window || {}));
})(this, (function (exports) { 'use strict';

  var platformDeps = {
    readFileFromPath: function readFileFromPath() {
      throw new Error("not implemented");
    },
    getRequestToken: function getRequestToken() {
      throw new Error("not implemented");
    },
    getDefaultAuth: function getDefaultAuth() {
      throw new Error("not implemented");
    },
    buildPlatformDependentConfig: function buildPlatformDependentConfig() {
      throw new Error("not implemented");
    },
    buildHeaders: function buildHeaders() {
      throw new Error("not implemented");
    },
    buildFormDataValue: function buildFormDataValue() {
      throw new Error("not implemented");
    },
    buildBaseUrl: function buildBaseUrl() {
      throw new Error("not implemented");
    },
    getVersion: function getVersion() {
      throw new Error("not implemented");
    }
  };
  var injectPlatformDeps = function injectPlatformDeps(deps) {
    if (deps.readFileFromPath) {
      platformDeps.readFileFromPath = deps.readFileFromPath;
    }

    if (deps.getRequestToken) {
      platformDeps.getRequestToken = deps.getRequestToken;
    }

    if (deps.getDefaultAuth) {
      platformDeps.getDefaultAuth = deps.getDefaultAuth;
    }

    if (deps.buildPlatformDependentConfig) {
      platformDeps.buildPlatformDependentConfig = deps.buildPlatformDependentConfig;
    }

    if (deps.buildHeaders) {
      platformDeps.buildHeaders = deps.buildHeaders;
    }

    if (deps.buildFormDataValue) {
      platformDeps.buildFormDataValue = deps.buildFormDataValue;
    }

    if (deps.buildBaseUrl) {
      platformDeps.buildBaseUrl = deps.buildBaseUrl;
    }

    if (deps.getVersion) {
      platformDeps.getVersion = deps.getVersion;
    }
  };

  function ownKeys$2(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var check = function check(it) {
    return it && it.Math == Math && it;
  }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


  var global$z = // eslint-disable-next-line es/no-global-this -- safe
  check((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) == 'object' && globalThis) || check((typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
  check((typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self) || check(_typeof(commonjsGlobal) == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
  function () {
    return this;
  }() || Function('return this')();

  var objectGetOwnPropertyDescriptor = {};

  var fails$j = function fails(exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };

  var fails$i = fails$j; // Detect IE8's incomplete defineProperty implementation

  var descriptors = !fails$i(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty({}, 1, {
      get: function get() {
        return 7;
      }
    })[1] != 7;
  });

  var fails$h = fails$j;
  var functionBindNative = !fails$h(function () {
    var test = function () {
      /* empty */
    }.bind(); // eslint-disable-next-line no-prototype-builtins -- safe


    return typeof test != 'function' || test.hasOwnProperty('prototype');
  });

  var NATIVE_BIND$2 = functionBindNative;
  var call$8 = Function.prototype.call;
  var functionCall = NATIVE_BIND$2 ? call$8.bind(call$8) : function () {
    return call$8.apply(call$8, arguments);
  };

  var objectPropertyIsEnumerable = {};

  var $propertyIsEnumerable = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

  var NASHORN_BUG = getOwnPropertyDescriptor$2 && !$propertyIsEnumerable.call({
    1: 2
  }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
  // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

  objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor$2(this, V);
    return !!descriptor && descriptor.enumerable;
  } : $propertyIsEnumerable;

  var createPropertyDescriptor$3 = function createPropertyDescriptor(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var NATIVE_BIND$1 = functionBindNative;
  var FunctionPrototype$2 = Function.prototype;
  var bind$8 = FunctionPrototype$2.bind;
  var call$7 = FunctionPrototype$2.call;
  var uncurryThis$q = NATIVE_BIND$1 && bind$8.bind(call$7, call$7);
  var functionUncurryThis = NATIVE_BIND$1 ? function (fn) {
    return fn && uncurryThis$q(fn);
  } : function (fn) {
    return fn && function () {
      return call$7.apply(fn, arguments);
    };
  };

  var uncurryThis$p = functionUncurryThis;
  var toString$8 = uncurryThis$p({}.toString);
  var stringSlice$2 = uncurryThis$p(''.slice);

  var classofRaw$1 = function classofRaw(it) {
    return stringSlice$2(toString$8(it), 8, -1);
  };

  var global$y = global$z;
  var uncurryThis$o = functionUncurryThis;
  var fails$g = fails$j;
  var classof$7 = classofRaw$1;
  var Object$4 = global$y.Object;
  var split$1 = uncurryThis$o(''.split); // fallback for non-array-like ES3 and non-enumerable old V8 strings

  var indexedObject = fails$g(function () {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins -- safe
    return !Object$4('z').propertyIsEnumerable(0);
  }) ? function (it) {
    return classof$7(it) == 'String' ? split$1(it, '') : Object$4(it);
  } : Object$4;

  var global$x = global$z;
  var TypeError$c = global$x.TypeError; // `RequireObjectCoercible` abstract operation
  // https://tc39.es/ecma262/#sec-requireobjectcoercible

  var requireObjectCoercible$5 = function requireObjectCoercible(it) {
    if (it == undefined) throw TypeError$c("Can't call method on " + it);
    return it;
  };

  var IndexedObject$4 = indexedObject;
  var requireObjectCoercible$4 = requireObjectCoercible$5;

  var toIndexedObject$6 = function toIndexedObject(it) {
    return IndexedObject$4(requireObjectCoercible$4(it));
  };

  // https://tc39.es/ecma262/#sec-iscallable

  var isCallable$e = function isCallable(argument) {
    return typeof argument == 'function';
  };

  var isCallable$d = isCallable$e;

  var isObject$a = function isObject(it) {
    return _typeof(it) == 'object' ? it !== null : isCallable$d(it);
  };

  var global$w = global$z;
  var isCallable$c = isCallable$e;

  var aFunction = function aFunction(argument) {
    return isCallable$c(argument) ? argument : undefined;
  };

  var getBuiltIn$5 = function getBuiltIn(namespace, method) {
    return arguments.length < 2 ? aFunction(global$w[namespace]) : global$w[namespace] && global$w[namespace][method];
  };

  var uncurryThis$n = functionUncurryThis;
  var objectIsPrototypeOf = uncurryThis$n({}.isPrototypeOf);

  var getBuiltIn$4 = getBuiltIn$5;
  var engineUserAgent = getBuiltIn$4('navigator', 'userAgent') || '';

  var global$v = global$z;
  var userAgent = engineUserAgent;
  var process$1 = global$v.process;
  var Deno = global$v.Deno;
  var versions$1 = process$1 && process$1.versions || Deno && Deno.version;
  var v8 = versions$1 && versions$1.v8;
  var match$1, version$2;

  if (v8) {
    match$1 = v8.split('.'); // in old Chrome, versions of V8 isn't V8 = Chrome / 10
    // but their correct versions are not interesting for us

    version$2 = match$1[0] > 0 && match$1[0] < 4 ? 1 : +(match$1[0] + match$1[1]);
  } // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
  // so check `userAgent` even if `.v8` exists, but 0


  if (!version$2 && userAgent) {
    match$1 = userAgent.match(/Edge\/(\d+)/);

    if (!match$1 || match$1[1] >= 74) {
      match$1 = userAgent.match(/Chrome\/(\d+)/);
      if (match$1) version$2 = +match$1[1];
    }
  }

  var engineV8Version = version$2;

  /* eslint-disable es/no-symbol -- required for testing */
  var V8_VERSION$2 = engineV8Version;
  var fails$f = fails$j; // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing

  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$f(function () {
    var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances

    return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION$2 && V8_VERSION$2 < 41;
  });

  var NATIVE_SYMBOL$1 = nativeSymbol;
  var useSymbolAsUid = NATIVE_SYMBOL$1 && !Symbol.sham && _typeof(Symbol.iterator) == 'symbol';

  var global$u = global$z;
  var getBuiltIn$3 = getBuiltIn$5;
  var isCallable$b = isCallable$e;
  var isPrototypeOf$2 = objectIsPrototypeOf;
  var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
  var Object$3 = global$u.Object;
  var isSymbol$4 = USE_SYMBOL_AS_UID$1 ? function (it) {
    return _typeof(it) == 'symbol';
  } : function (it) {
    var $Symbol = getBuiltIn$3('Symbol');
    return isCallable$b($Symbol) && isPrototypeOf$2($Symbol.prototype, Object$3(it));
  };

  var global$t = global$z;
  var String$4 = global$t.String;

  var tryToString$1 = function tryToString(argument) {
    try {
      return String$4(argument);
    } catch (error) {
      return 'Object';
    }
  };

  var global$s = global$z;
  var isCallable$a = isCallable$e;
  var tryToString = tryToString$1;
  var TypeError$b = global$s.TypeError; // `Assert: IsCallable(argument) is true`

  var aCallable$3 = function aCallable(argument) {
    if (isCallable$a(argument)) return argument;
    throw TypeError$b(tryToString(argument) + ' is not a function');
  };

  var aCallable$2 = aCallable$3; // `GetMethod` abstract operation
  // https://tc39.es/ecma262/#sec-getmethod

  var getMethod$2 = function getMethod(V, P) {
    var func = V[P];
    return func == null ? undefined : aCallable$2(func);
  };

  var global$r = global$z;
  var call$6 = functionCall;
  var isCallable$9 = isCallable$e;
  var isObject$9 = isObject$a;
  var TypeError$a = global$r.TypeError; // `OrdinaryToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-ordinarytoprimitive

  var ordinaryToPrimitive$1 = function ordinaryToPrimitive(input, pref) {
    var fn, val;
    if (pref === 'string' && isCallable$9(fn = input.toString) && !isObject$9(val = call$6(fn, input))) return val;
    if (isCallable$9(fn = input.valueOf) && !isObject$9(val = call$6(fn, input))) return val;
    if (pref !== 'string' && isCallable$9(fn = input.toString) && !isObject$9(val = call$6(fn, input))) return val;
    throw TypeError$a("Can't convert object to primitive value");
  };

  var shared$4 = {exports: {}};

  var global$q = global$z; // eslint-disable-next-line es/no-object-defineproperty -- safe

  var defineProperty$3 = Object.defineProperty;

  var setGlobal$3 = function setGlobal(key, value) {
    try {
      defineProperty$3(global$q, key, {
        value: value,
        configurable: true,
        writable: true
      });
    } catch (error) {
      global$q[key] = value;
    }

    return value;
  };

  var global$p = global$z;
  var setGlobal$2 = setGlobal$3;
  var SHARED = '__core-js_shared__';
  var store$3 = global$p[SHARED] || setGlobal$2(SHARED, {});
  var sharedStore = store$3;

  var store$2 = sharedStore;
  (shared$4.exports = function (key, value) {
    return store$2[key] || (store$2[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: '3.21.1',
    mode: 'global',
    copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
    license: 'https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE',
    source: 'https://github.com/zloirock/core-js'
  });

  var global$o = global$z;
  var requireObjectCoercible$3 = requireObjectCoercible$5;
  var Object$2 = global$o.Object; // `ToObject` abstract operation
  // https://tc39.es/ecma262/#sec-toobject

  var toObject$6 = function toObject(argument) {
    return Object$2(requireObjectCoercible$3(argument));
  };

  var uncurryThis$m = functionUncurryThis;
  var toObject$5 = toObject$6;
  var hasOwnProperty = uncurryThis$m({}.hasOwnProperty); // `HasOwnProperty` abstract operation
  // https://tc39.es/ecma262/#sec-hasownproperty

  var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty(toObject$5(it), key);
  };

  var uncurryThis$l = functionUncurryThis;
  var id = 0;
  var postfix = Math.random();
  var toString$7 = uncurryThis$l(1.0.toString);

  var uid$2 = function uid(key) {
    return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$7(++id + postfix, 36);
  };

  var global$n = global$z;
  var shared$3 = shared$4.exports;
  var hasOwn$a = hasOwnProperty_1;
  var uid$1 = uid$2;
  var NATIVE_SYMBOL = nativeSymbol;
  var USE_SYMBOL_AS_UID = useSymbolAsUid;
  var WellKnownSymbolsStore = shared$3('wks');
  var _Symbol = global$n.Symbol;
  var symbolFor = _Symbol && _Symbol['for'];
  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? _Symbol : _Symbol && _Symbol.withoutSetter || uid$1;

  var wellKnownSymbol$8 = function wellKnownSymbol(name) {
    if (!hasOwn$a(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
      var description = 'Symbol.' + name;

      if (NATIVE_SYMBOL && hasOwn$a(_Symbol, name)) {
        WellKnownSymbolsStore[name] = _Symbol[name];
      } else if (USE_SYMBOL_AS_UID && symbolFor) {
        WellKnownSymbolsStore[name] = symbolFor(description);
      } else {
        WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
      }
    }

    return WellKnownSymbolsStore[name];
  };

  var global$m = global$z;
  var call$5 = functionCall;
  var isObject$8 = isObject$a;
  var isSymbol$3 = isSymbol$4;
  var getMethod$1 = getMethod$2;
  var ordinaryToPrimitive = ordinaryToPrimitive$1;
  var wellKnownSymbol$7 = wellKnownSymbol$8;
  var TypeError$9 = global$m.TypeError;
  var TO_PRIMITIVE = wellKnownSymbol$7('toPrimitive'); // `ToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-toprimitive

  var toPrimitive$2 = function toPrimitive(input, pref) {
    if (!isObject$8(input) || isSymbol$3(input)) return input;
    var exoticToPrim = getMethod$1(input, TO_PRIMITIVE);
    var result;

    if (exoticToPrim) {
      if (pref === undefined) pref = 'default';
      result = call$5(exoticToPrim, input, pref);
      if (!isObject$8(result) || isSymbol$3(result)) return result;
      throw TypeError$9("Can't convert object to primitive value");
    }

    if (pref === undefined) pref = 'number';
    return ordinaryToPrimitive(input, pref);
  };

  var toPrimitive$1 = toPrimitive$2;
  var isSymbol$2 = isSymbol$4; // `ToPropertyKey` abstract operation
  // https://tc39.es/ecma262/#sec-topropertykey

  var toPropertyKey$3 = function toPropertyKey(argument) {
    var key = toPrimitive$1(argument, 'string');
    return isSymbol$2(key) ? key : key + '';
  };

  var global$l = global$z;
  var isObject$7 = isObject$a;
  var document$1 = global$l.document; // typeof document.createElement is 'object' in old IE

  var EXISTS$1 = isObject$7(document$1) && isObject$7(document$1.createElement);

  var documentCreateElement$1 = function documentCreateElement(it) {
    return EXISTS$1 ? document$1.createElement(it) : {};
  };

  var DESCRIPTORS$9 = descriptors;
  var fails$e = fails$j;
  var createElement = documentCreateElement$1; // Thanks to IE8 for its funny defineProperty

  var ie8DomDefine = !DESCRIPTORS$9 && !fails$e(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(createElement('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  var DESCRIPTORS$8 = descriptors;
  var call$4 = functionCall;
  var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
  var createPropertyDescriptor$2 = createPropertyDescriptor$3;
  var toIndexedObject$5 = toIndexedObject$6;
  var toPropertyKey$2 = toPropertyKey$3;
  var hasOwn$9 = hasOwnProperty_1;
  var IE8_DOM_DEFINE$1 = ie8DomDefine; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

  objectGetOwnPropertyDescriptor.f = DESCRIPTORS$8 ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject$5(O);
    P = toPropertyKey$2(P);
    if (IE8_DOM_DEFINE$1) try {
      return $getOwnPropertyDescriptor$1(O, P);
    } catch (error) {
      /* empty */
    }
    if (hasOwn$9(O, P)) return createPropertyDescriptor$2(!call$4(propertyIsEnumerableModule$1.f, O, P), O[P]);
  };

  var objectDefineProperty = {};

  var DESCRIPTORS$7 = descriptors;
  var fails$d = fails$j; // V8 ~ Chrome 36-
  // https://bugs.chromium.org/p/v8/issues/detail?id=3334

  var v8PrototypeDefineBug = DESCRIPTORS$7 && fails$d(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(function () {
      /* empty */
    }, 'prototype', {
      value: 42,
      writable: false
    }).prototype != 42;
  });

  var global$k = global$z;
  var isObject$6 = isObject$a;
  var String$3 = global$k.String;
  var TypeError$8 = global$k.TypeError; // `Assert: Type(argument) is Object`

  var anObject$9 = function anObject(argument) {
    if (isObject$6(argument)) return argument;
    throw TypeError$8(String$3(argument) + ' is not an object');
  };

  var global$j = global$z;
  var DESCRIPTORS$6 = descriptors;
  var IE8_DOM_DEFINE = ie8DomDefine;
  var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
  var anObject$8 = anObject$9;
  var toPropertyKey$1 = toPropertyKey$3;
  var TypeError$7 = global$j.TypeError; // eslint-disable-next-line es/no-object-defineproperty -- safe

  var $defineProperty = Object.defineProperty; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var ENUMERABLE = 'enumerable';
  var CONFIGURABLE$1 = 'configurable';
  var WRITABLE = 'writable'; // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty

  objectDefineProperty.f = DESCRIPTORS$6 ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
    anObject$8(O);
    P = toPropertyKey$1(P);
    anObject$8(Attributes);

    if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
      var current = $getOwnPropertyDescriptor(O, P);

      if (current && current[WRITABLE]) {
        O[P] = Attributes.value;
        Attributes = {
          configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
          enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
          writable: false
        };
      }
    }

    return $defineProperty(O, P, Attributes);
  } : $defineProperty : function defineProperty(O, P, Attributes) {
    anObject$8(O);
    P = toPropertyKey$1(P);
    anObject$8(Attributes);
    if (IE8_DOM_DEFINE) try {
      return $defineProperty(O, P, Attributes);
    } catch (error) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError$7('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var DESCRIPTORS$5 = descriptors;
  var definePropertyModule$3 = objectDefineProperty;
  var createPropertyDescriptor$1 = createPropertyDescriptor$3;
  var createNonEnumerableProperty$4 = DESCRIPTORS$5 ? function (object, key, value) {
    return definePropertyModule$3.f(object, key, createPropertyDescriptor$1(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var redefine$6 = {exports: {}};

  var uncurryThis$k = functionUncurryThis;
  var isCallable$8 = isCallable$e;
  var store$1 = sharedStore;
  var functionToString$2 = uncurryThis$k(Function.toString); // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper

  if (!isCallable$8(store$1.inspectSource)) {
    store$1.inspectSource = function (it) {
      return functionToString$2(it);
    };
  }

  var inspectSource$3 = store$1.inspectSource;

  var global$i = global$z;
  var isCallable$7 = isCallable$e;
  var inspectSource$2 = inspectSource$3;
  var WeakMap$2 = global$i.WeakMap;
  var nativeWeakMap = isCallable$7(WeakMap$2) && /native code/.test(inspectSource$2(WeakMap$2));

  var shared$2 = shared$4.exports;
  var uid = uid$2;
  var keys$1 = shared$2('keys');

  var sharedKey$2 = function sharedKey(key) {
    return keys$1[key] || (keys$1[key] = uid(key));
  };

  var hiddenKeys$4 = {};

  var NATIVE_WEAK_MAP = nativeWeakMap;
  var global$h = global$z;
  var uncurryThis$j = functionUncurryThis;
  var isObject$5 = isObject$a;
  var createNonEnumerableProperty$3 = createNonEnumerableProperty$4;
  var hasOwn$8 = hasOwnProperty_1;
  var shared$1 = sharedStore;
  var sharedKey$1 = sharedKey$2;
  var hiddenKeys$3 = hiddenKeys$4;
  var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
  var TypeError$6 = global$h.TypeError;
  var WeakMap$1 = global$h.WeakMap;
  var set, get, has$4;

  var enforce = function enforce(it) {
    return has$4(it) ? get(it) : set(it, {});
  };

  var getterFor = function getterFor(TYPE) {
    return function (it) {
      var state;

      if (!isObject$5(it) || (state = get(it)).type !== TYPE) {
        throw TypeError$6('Incompatible receiver, ' + TYPE + ' required');
      }

      return state;
    };
  };

  if (NATIVE_WEAK_MAP || shared$1.state) {
    var store = shared$1.state || (shared$1.state = new WeakMap$1());
    var wmget = uncurryThis$j(store.get);
    var wmhas = uncurryThis$j(store.has);
    var wmset = uncurryThis$j(store.set);

    set = function set(it, metadata) {
      if (wmhas(store, it)) throw new TypeError$6(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      wmset(store, it, metadata);
      return metadata;
    };

    get = function get(it) {
      return wmget(store, it) || {};
    };

    has$4 = function has(it) {
      return wmhas(store, it);
    };
  } else {
    var STATE = sharedKey$1('state');
    hiddenKeys$3[STATE] = true;

    set = function set(it, metadata) {
      if (hasOwn$8(it, STATE)) throw new TypeError$6(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      createNonEnumerableProperty$3(it, STATE, metadata);
      return metadata;
    };

    get = function get(it) {
      return hasOwn$8(it, STATE) ? it[STATE] : {};
    };

    has$4 = function has(it) {
      return hasOwn$8(it, STATE);
    };
  }

  var internalState = {
    set: set,
    get: get,
    has: has$4,
    enforce: enforce,
    getterFor: getterFor
  };

  var DESCRIPTORS$4 = descriptors;
  var hasOwn$7 = hasOwnProperty_1;
  var FunctionPrototype$1 = Function.prototype; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var getDescriptor = DESCRIPTORS$4 && Object.getOwnPropertyDescriptor;
  var EXISTS = hasOwn$7(FunctionPrototype$1, 'name'); // additional protection from minified / mangled / dropped function names

  var PROPER = EXISTS && function something() {
    /* empty */
  }.name === 'something';

  var CONFIGURABLE = EXISTS && (!DESCRIPTORS$4 || DESCRIPTORS$4 && getDescriptor(FunctionPrototype$1, 'name').configurable);
  var functionName = {
    EXISTS: EXISTS,
    PROPER: PROPER,
    CONFIGURABLE: CONFIGURABLE
  };

  var global$g = global$z;
  var isCallable$6 = isCallable$e;
  var hasOwn$6 = hasOwnProperty_1;
  var createNonEnumerableProperty$2 = createNonEnumerableProperty$4;
  var setGlobal$1 = setGlobal$3;
  var inspectSource$1 = inspectSource$3;
  var InternalStateModule = internalState;
  var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
  var getInternalState$1 = InternalStateModule.get;
  var enforceInternalState = InternalStateModule.enforce;
  var TEMPLATE = String(String).split('String');
  (redefine$6.exports = function (O, key, value, options) {
    var unsafe = options ? !!options.unsafe : false;
    var simple = options ? !!options.enumerable : false;
    var noTargetGet = options ? !!options.noTargetGet : false;
    var name = options && options.name !== undefined ? options.name : key;
    var state;

    if (isCallable$6(value)) {
      if (String(name).slice(0, 7) === 'Symbol(') {
        name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
      }

      if (!hasOwn$6(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
        createNonEnumerableProperty$2(value, 'name', name);
      }

      state = enforceInternalState(value);

      if (!state.source) {
        state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
      }
    }

    if (O === global$g) {
      if (simple) O[key] = value;else setGlobal$1(key, value);
      return;
    } else if (!unsafe) {
      delete O[key];
    } else if (!noTargetGet && O[key]) {
      simple = true;
    }

    if (simple) O[key] = value;else createNonEnumerableProperty$2(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, 'toString', function toString() {
    return isCallable$6(this) && getInternalState$1(this).source || inspectSource$1(this);
  });

  var objectGetOwnPropertyNames = {};

  var ceil = Math.ceil;
  var floor = Math.floor; // `ToIntegerOrInfinity` abstract operation
  // https://tc39.es/ecma262/#sec-tointegerorinfinity

  var toIntegerOrInfinity$3 = function toIntegerOrInfinity(argument) {
    var number = +argument; // eslint-disable-next-line no-self-compare -- safe

    return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
  };

  var toIntegerOrInfinity$2 = toIntegerOrInfinity$3;
  var max$1 = Math.max;
  var min$1 = Math.min; // Helper for a popular repeating case of the spec:
  // Let integer be ? ToInteger(index).
  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

  var toAbsoluteIndex$2 = function toAbsoluteIndex(index, length) {
    var integer = toIntegerOrInfinity$2(index);
    return integer < 0 ? max$1(integer + length, 0) : min$1(integer, length);
  };

  var toIntegerOrInfinity$1 = toIntegerOrInfinity$3;
  var min = Math.min; // `ToLength` abstract operation
  // https://tc39.es/ecma262/#sec-tolength

  var toLength$2 = function toLength(argument) {
    return argument > 0 ? min(toIntegerOrInfinity$1(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
  };

  var toLength$1 = toLength$2; // `LengthOfArrayLike` abstract operation
  // https://tc39.es/ecma262/#sec-lengthofarraylike

  var lengthOfArrayLike$5 = function lengthOfArrayLike(obj) {
    return toLength$1(obj.length);
  };

  var toIndexedObject$4 = toIndexedObject$6;
  var toAbsoluteIndex$1 = toAbsoluteIndex$2;
  var lengthOfArrayLike$4 = lengthOfArrayLike$5; // `Array.prototype.{ indexOf, includes }` methods implementation

  var createMethod$4 = function createMethod(IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIndexedObject$4($this);
      var length = lengthOfArrayLike$4(O);
      var index = toAbsoluteIndex$1(fromIndex, length);
      var value; // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare -- NaN check

      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
      } else for (; length > index; index++) {
        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
      }
      return !IS_INCLUDES && -1;
    };
  };

  var arrayIncludes = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod$4(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod$4(false)
  };

  var uncurryThis$i = functionUncurryThis;
  var hasOwn$5 = hasOwnProperty_1;
  var toIndexedObject$3 = toIndexedObject$6;
  var indexOf$2 = arrayIncludes.indexOf;
  var hiddenKeys$2 = hiddenKeys$4;
  var push$2 = uncurryThis$i([].push);

  var objectKeysInternal = function objectKeysInternal(object, names) {
    var O = toIndexedObject$3(object);
    var i = 0;
    var result = [];
    var key;

    for (key in O) {
      !hasOwn$5(hiddenKeys$2, key) && hasOwn$5(O, key) && push$2(result, key);
    } // Don't enum bug & hidden keys


    while (names.length > i) {
      if (hasOwn$5(O, key = names[i++])) {
        ~indexOf$2(result, key) || push$2(result, key);
      }
    }

    return result;
  };

  var enumBugKeys$3 = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

  var internalObjectKeys$1 = objectKeysInternal;
  var enumBugKeys$2 = enumBugKeys$3;
  var hiddenKeys$1 = enumBugKeys$2.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  // eslint-disable-next-line es/no-object-getownpropertynames -- safe

  objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return internalObjectKeys$1(O, hiddenKeys$1);
  };

  var objectGetOwnPropertySymbols = {};

  objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

  var getBuiltIn$2 = getBuiltIn$5;
  var uncurryThis$h = functionUncurryThis;
  var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
  var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
  var anObject$7 = anObject$9;
  var concat$1 = uncurryThis$h([].concat); // all object keys, includes non-enumerable and symbols

  var ownKeys$1 = getBuiltIn$2('Reflect', 'ownKeys') || function ownKeys(it) {
    var keys = getOwnPropertyNamesModule.f(anObject$7(it));
    var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
    return getOwnPropertySymbols ? concat$1(keys, getOwnPropertySymbols(it)) : keys;
  };

  var hasOwn$4 = hasOwnProperty_1;
  var ownKeys = ownKeys$1;
  var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
  var definePropertyModule$2 = objectDefineProperty;

  var copyConstructorProperties$1 = function copyConstructorProperties(target, source, exceptions) {
    var keys = ownKeys(source);
    var defineProperty = definePropertyModule$2.f;
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (!hasOwn$4(target, key) && !(exceptions && hasOwn$4(exceptions, key))) {
        defineProperty(target, key, getOwnPropertyDescriptor(source, key));
      }
    }
  };

  var fails$c = fails$j;
  var isCallable$5 = isCallable$e;
  var replacement = /#|\.prototype\./;

  var isForced$2 = function isForced(feature, detection) {
    var value = data$1[normalize(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : isCallable$5(detection) ? fails$c(detection) : !!detection;
  };

  var normalize = isForced$2.normalize = function (string) {
    return String(string).replace(replacement, '.').toLowerCase();
  };

  var data$1 = isForced$2.data = {};
  var NATIVE = isForced$2.NATIVE = 'N';
  var POLYFILL = isForced$2.POLYFILL = 'P';
  var isForced_1 = isForced$2;

  var global$f = global$z;
  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
  var createNonEnumerableProperty$1 = createNonEnumerableProperty$4;
  var redefine$5 = redefine$6.exports;
  var setGlobal = setGlobal$3;
  var copyConstructorProperties = copyConstructorProperties$1;
  var isForced$1 = isForced_1;
  /*
    options.target      - name of the target object
    options.global      - target is the global object
    options.stat        - export as static methods of target
    options.proto       - export as prototype methods of target
    options.real        - real prototype method for the `pure` version
    options.forced      - export even if the native feature is available
    options.bind        - bind methods to the target, required for the `pure` version
    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
    options.sham        - add a flag to not completely full polyfills
    options.enumerable  - export as enumerable property
    options.noTargetGet - prevent calling a getter on target
    options.name        - the .name of the function if it does not match the key
  */

  var _export = function _export(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;

    if (GLOBAL) {
      target = global$f;
    } else if (STATIC) {
      target = global$f[TARGET] || setGlobal(TARGET, {});
    } else {
      target = (global$f[TARGET] || {}).prototype;
    }

    if (target) for (key in source) {
      sourceProperty = source[key];

      if (options.noTargetGet) {
        descriptor = getOwnPropertyDescriptor$1(target, key);
        targetProperty = descriptor && descriptor.value;
      } else targetProperty = target[key];

      FORCED = isForced$1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

      if (!FORCED && targetProperty !== undefined) {
        if (_typeof(sourceProperty) == _typeof(targetProperty)) continue;
        copyConstructorProperties(sourceProperty, targetProperty);
      } // add a flag to not completely full polyfills


      if (options.sham || targetProperty && targetProperty.sham) {
        createNonEnumerableProperty$1(sourceProperty, 'sham', true);
      } // extend global


      redefine$5(target, key, sourceProperty, options);
    }
  };

  var classof$6 = classofRaw$1; // `IsArray` abstract operation
  // https://tc39.es/ecma262/#sec-isarray
  // eslint-disable-next-line es/no-array-isarray -- safe

  var isArray$9 = Array.isArray || function isArray(argument) {
    return classof$6(argument) == 'Array';
  };

  var toPropertyKey = toPropertyKey$3;
  var definePropertyModule$1 = objectDefineProperty;
  var createPropertyDescriptor = createPropertyDescriptor$3;

  var createProperty$2 = function createProperty(object, key, value) {
    var propertyKey = toPropertyKey(key);
    if (propertyKey in object) definePropertyModule$1.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
  };

  var wellKnownSymbol$6 = wellKnownSymbol$8;
  var TO_STRING_TAG$1 = wellKnownSymbol$6('toStringTag');
  var test = {};
  test[TO_STRING_TAG$1] = 'z';
  var toStringTagSupport = String(test) === '[object z]';

  var global$e = global$z;
  var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
  var isCallable$4 = isCallable$e;
  var classofRaw = classofRaw$1;
  var wellKnownSymbol$5 = wellKnownSymbol$8;
  var TO_STRING_TAG = wellKnownSymbol$5('toStringTag');
  var Object$1 = global$e.Object; // ES3 wrong here

  var CORRECT_ARGUMENTS = classofRaw(function () {
    return arguments;
  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

  var tryGet = function tryGet(it, key) {
    try {
      return it[key];
    } catch (error) {
      /* empty */
    }
  }; // getting tag from ES6+ `Object.prototype.toString`


  var classof$5 = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function (it) {
    var O, tag, result;
    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
    : typeof (tag = tryGet(O = Object$1(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable$4(O.callee) ? 'Arguments' : result;
  };

  var uncurryThis$g = functionUncurryThis;
  var fails$b = fails$j;
  var isCallable$3 = isCallable$e;
  var classof$4 = classof$5;
  var getBuiltIn$1 = getBuiltIn$5;
  var inspectSource = inspectSource$3;

  var noop$1 = function noop() {
    /* empty */
  };

  var empty = [];
  var construct = getBuiltIn$1('Reflect', 'construct');
  var constructorRegExp = /^\s*(?:class|function)\b/;
  var exec$1 = uncurryThis$g(constructorRegExp.exec);
  var INCORRECT_TO_STRING = !constructorRegExp.exec(noop$1);

  var isConstructorModern = function isConstructor(argument) {
    if (!isCallable$3(argument)) return false;

    try {
      construct(noop$1, empty, argument);
      return true;
    } catch (error) {
      return false;
    }
  };

  var isConstructorLegacy = function isConstructor(argument) {
    if (!isCallable$3(argument)) return false;

    switch (classof$4(argument)) {
      case 'AsyncFunction':
      case 'GeneratorFunction':
      case 'AsyncGeneratorFunction':
        return false;
    }

    try {
      // we can't check .prototype since constructors produced by .bind haven't it
      // `Function#toString` throws on some built-it function in some legacy engines
      // (for example, `DOMQuad` and similar in FF41-)
      return INCORRECT_TO_STRING || !!exec$1(constructorRegExp, inspectSource(argument));
    } catch (error) {
      return true;
    }
  };

  isConstructorLegacy.sham = true; // `IsConstructor` abstract operation
  // https://tc39.es/ecma262/#sec-isconstructor

  var isConstructor$2 = !construct || fails$b(function () {
    var called;
    return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function () {
      called = true;
    }) || called;
  }) ? isConstructorLegacy : isConstructorModern;

  var global$d = global$z;
  var isArray$8 = isArray$9;
  var isConstructor$1 = isConstructor$2;
  var isObject$4 = isObject$a;
  var wellKnownSymbol$4 = wellKnownSymbol$8;
  var SPECIES$3 = wellKnownSymbol$4('species');
  var Array$2 = global$d.Array; // a part of `ArraySpeciesCreate` abstract operation
  // https://tc39.es/ecma262/#sec-arrayspeciescreate

  var arraySpeciesConstructor$1 = function arraySpeciesConstructor(originalArray) {
    var C;

    if (isArray$8(originalArray)) {
      C = originalArray.constructor; // cross-realm fallback

      if (isConstructor$1(C) && (C === Array$2 || isArray$8(C.prototype))) C = undefined;else if (isObject$4(C)) {
        C = C[SPECIES$3];
        if (C === null) C = undefined;
      }
    }

    return C === undefined ? Array$2 : C;
  };

  var arraySpeciesConstructor = arraySpeciesConstructor$1; // `ArraySpeciesCreate` abstract operation
  // https://tc39.es/ecma262/#sec-arrayspeciescreate

  var arraySpeciesCreate$2 = function arraySpeciesCreate(originalArray, length) {
    return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
  };

  var fails$a = fails$j;
  var wellKnownSymbol$3 = wellKnownSymbol$8;
  var V8_VERSION$1 = engineV8Version;
  var SPECIES$2 = wellKnownSymbol$3('species');

  var arrayMethodHasSpeciesSupport$3 = function arrayMethodHasSpeciesSupport(METHOD_NAME) {
    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/677
    return V8_VERSION$1 >= 51 || !fails$a(function () {
      var array = [];
      var constructor = array.constructor = {};

      constructor[SPECIES$2] = function () {
        return {
          foo: 1
        };
      };

      return array[METHOD_NAME](Boolean).foo !== 1;
    });
  };

  var $$b = _export;
  var global$c = global$z;
  var fails$9 = fails$j;
  var isArray$7 = isArray$9;
  var isObject$3 = isObject$a;
  var toObject$4 = toObject$6;
  var lengthOfArrayLike$3 = lengthOfArrayLike$5;
  var createProperty$1 = createProperty$2;
  var arraySpeciesCreate$1 = arraySpeciesCreate$2;
  var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$3;
  var wellKnownSymbol$2 = wellKnownSymbol$8;
  var V8_VERSION = engineV8Version;
  var IS_CONCAT_SPREADABLE = wellKnownSymbol$2('isConcatSpreadable');
  var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
  var TypeError$5 = global$c.TypeError; // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/679

  var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$9(function () {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
  });
  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport$2('concat');

  var isConcatSpreadable = function isConcatSpreadable(O) {
    if (!isObject$3(O)) return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray$7(O);
  };

  var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
  // https://tc39.es/ecma262/#sec-array.prototype.concat
  // with adding support of @@isConcatSpreadable and @@species

  $$b({
    target: 'Array',
    proto: true,
    forced: FORCED
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    concat: function concat(arg) {
      var O = toObject$4(this);
      var A = arraySpeciesCreate$1(O, 0);
      var n = 0;
      var i, k, length, len, E;

      for (i = -1, length = arguments.length; i < length; i++) {
        E = i === -1 ? O : arguments[i];

        if (isConcatSpreadable(E)) {
          len = lengthOfArrayLike$3(E);
          if (n + len > MAX_SAFE_INTEGER) throw TypeError$5(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

          for (k = 0; k < len; k++, n++) {
            if (k in E) createProperty$1(A, n, E[k]);
          }
        } else {
          if (n >= MAX_SAFE_INTEGER) throw TypeError$5(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          createProperty$1(A, n++, E);
        }
      }

      A.length = n;
      return A;
    }
  });

  var runtime = {exports: {}};

  (function (module) {
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  })(runtime);

  var DESCRIPTORS$3 = descriptors;
  var FUNCTION_NAME_EXISTS = functionName.EXISTS;
  var uncurryThis$f = functionUncurryThis;
  var defineProperty$2 = objectDefineProperty.f;
  var FunctionPrototype = Function.prototype;
  var functionToString$1 = uncurryThis$f(FunctionPrototype.toString);
  var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
  var regExpExec$1 = uncurryThis$f(nameRE.exec);
  var NAME = 'name'; // Function instances `.name` property
  // https://tc39.es/ecma262/#sec-function-instances-name

  if (DESCRIPTORS$3 && !FUNCTION_NAME_EXISTS) {
    defineProperty$2(FunctionPrototype, NAME, {
      configurable: true,
      get: function get() {
        try {
          return regExpExec$1(nameRE, functionToString$1(this))[1];
        } catch (error) {
          return '';
        }
      }
    });
  }

  var global$b = global$z;
  var isCallable$2 = isCallable$e;
  var String$2 = global$b.String;
  var TypeError$4 = global$b.TypeError;

  var aPossiblePrototype$1 = function aPossiblePrototype(argument) {
    if (_typeof(argument) == 'object' || isCallable$2(argument)) return argument;
    throw TypeError$4("Can't set " + String$2(argument) + ' as a prototype');
  };

  /* eslint-disable no-proto -- safe */
  var uncurryThis$e = functionUncurryThis;
  var anObject$6 = anObject$9;
  var aPossiblePrototype = aPossiblePrototype$1; // `Object.setPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.setprototypeof
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  // eslint-disable-next-line es/no-object-setprototypeof -- safe

  var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
    var CORRECT_SETTER = false;
    var test = {};
    var setter;

    try {
      // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
      setter = uncurryThis$e(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
      setter(test, []);
      CORRECT_SETTER = test instanceof Array;
    } catch (error) {
      /* empty */
    }

    return function setPrototypeOf(O, proto) {
      anObject$6(O);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER) setter(O, proto);else O.__proto__ = proto;
      return O;
    };
  }() : undefined);

  var $$a = _export;
  var setPrototypeOf$1 = objectSetPrototypeOf; // `Object.setPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.setprototypeof

  $$a({
    target: 'Object',
    stat: true
  }, {
    setPrototypeOf: setPrototypeOf$1
  });

  var UnsupportedPlatformError = /*#__PURE__*/function (_Error) {
    _inherits(UnsupportedPlatformError, _Error);

    var _super = _createSuper(UnsupportedPlatformError);

    function UnsupportedPlatformError(platform) {
      var _this;

      _classCallCheck(this, UnsupportedPlatformError);

      var message = "This function is not supported in ".concat(platform, " environment");
      _this = _super.call(this, message); // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
      // Maintains proper stack trace for where our error was thrown (only available on V8)

      if (Error.captureStackTrace) {
        Error.captureStackTrace(_assertThisInitialized(_this), UnsupportedPlatformError);
      }

      _this.name = "UnsupportedPlatformError";
      _this.platform = platform; // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
      // Set the prototype explicitly.

      Object.setPrototypeOf(_assertThisInitialized(_this), UnsupportedPlatformError.prototype);
      return _this;
    }

    return _createClass(UnsupportedPlatformError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  var readFileFromPath = function readFileFromPath(filePath) {
    throw new UnsupportedPlatformError("Browser");
  };
  var getRequestToken = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _garoon$connect, _garoon$connect$kinto;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!((typeof kintone === "undefined" ? "undefined" : _typeof(kintone)) === "object" && kintone !== null && typeof kintone.getRequestToken === "function")) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", kintone.getRequestToken());

            case 2:
              if (!((typeof garoon === "undefined" ? "undefined" : _typeof(garoon)) === "object" && garoon !== null && typeof ((_garoon$connect = garoon.connect) === null || _garoon$connect === void 0 ? void 0 : (_garoon$connect$kinto = _garoon$connect.kintone) === null || _garoon$connect$kinto === void 0 ? void 0 : _garoon$connect$kinto.getRequestToken) === "function")) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", garoon.connect.kintone.getRequestToken());

            case 4:
              throw new Error("session authentication must specify a request token");

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getRequestToken() {
      return _ref.apply(this, arguments);
    };
  }();
  var getDefaultAuth = function getDefaultAuth() {
    return {
      type: "session"
    };
  };
  var buildPlatformDependentConfig = function buildPlatformDependentConfig() {
    return {};
  };
  var buildHeaders = function buildHeaders() {
    return {};
  };
  var buildFormDataValue = function buildFormDataValue(data) {
    return new Blob([data]);
  };
  var buildBaseUrl = function buildBaseUrl(baseUrl) {
    if (baseUrl) {
      return baseUrl;
    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


    var _ref2 = location,
        host = _ref2.host,
        protocol = _ref2.protocol;
    return "".concat(protocol, "//").concat(host);
  };
  var getVersion = function getVersion() {
    return "2.0.37";
  };

  var browserDeps = /*#__PURE__*/Object.freeze({
    __proto__: null,
    readFileFromPath: readFileFromPath,
    getRequestToken: getRequestToken,
    getDefaultAuth: getDefaultAuth,
    buildPlatformDependentConfig: buildPlatformDependentConfig,
    buildHeaders: buildHeaders,
    buildFormDataValue: buildFormDataValue,
    buildBaseUrl: buildBaseUrl,
    getVersion: getVersion
  });

  var uncurryThis$d = functionUncurryThis;
  var aCallable$1 = aCallable$3;
  var NATIVE_BIND = functionBindNative;
  var bind$7 = uncurryThis$d(uncurryThis$d.bind); // optional / simple context binding

  var functionBindContext = function functionBindContext(fn, that) {
    aCallable$1(fn);
    return that === undefined ? fn : NATIVE_BIND ? bind$7(fn, that) : function
      /* ...args */
    () {
      return fn.apply(that, arguments);
    };
  };

  var bind$6 = functionBindContext;
  var uncurryThis$c = functionUncurryThis;
  var IndexedObject$3 = indexedObject;
  var toObject$3 = toObject$6;
  var lengthOfArrayLike$2 = lengthOfArrayLike$5;
  var arraySpeciesCreate = arraySpeciesCreate$2;
  var push$1 = uncurryThis$c([].push); // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation

  var createMethod$3 = function createMethod(TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_REJECT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function ($this, callbackfn, that, specificCreate) {
      var O = toObject$3($this);
      var self = IndexedObject$3(O);
      var boundFunction = bind$6(callbackfn, that);
      var length = lengthOfArrayLike$2(self);
      var index = 0;
      var create = specificCreate || arraySpeciesCreate;
      var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
      var value, result;

      for (; length > index; index++) {
        if (NO_HOLES || index in self) {
          value = self[index];
          result = boundFunction(value, index, O);

          if (TYPE) {
            if (IS_MAP) target[index] = result; // map
            else if (result) switch (TYPE) {
              case 3:
                return true;
              // some

              case 5:
                return value;
              // find

              case 6:
                return index;
              // findIndex

              case 2:
                push$1(target, value);
              // filter
            } else switch (TYPE) {
              case 4:
                return false;
              // every

              case 7:
                push$1(target, value);
              // filterReject
            }
          }
        }
      }

      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };

  var arrayIteration = {
    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    forEach: createMethod$3(0),
    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    map: createMethod$3(1),
    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    filter: createMethod$3(2),
    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    some: createMethod$3(3),
    // `Array.prototype.every` method
    // https://tc39.es/ecma262/#sec-array.prototype.every
    every: createMethod$3(4),
    // `Array.prototype.find` method
    // https://tc39.es/ecma262/#sec-array.prototype.find
    find: createMethod$3(5),
    // `Array.prototype.findIndex` method
    // https://tc39.es/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod$3(6),
    // `Array.prototype.filterReject` method
    // https://github.com/tc39/proposal-array-filtering
    filterReject: createMethod$3(7)
  };

  var $$9 = _export;
  var $map = arrayIteration.map;
  var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$3;
  var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1('map'); // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  // with adding support of @@species

  $$9({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT$1
  }, {
    map: function map(callbackfn
    /* , thisArg */
    ) {
      return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var buildPath = function buildPath(params) {
    var endpointName = params.endpointName,
        guestSpaceId = params.guestSpaceId,
        preview = params.preview;
    var guestPath = guestSpaceId !== undefined ? "/guest/".concat(guestSpaceId) : "";
    var previewPath = preview ? "/preview" : "";
    return "/k".concat(guestPath, "/v1").concat(previewPath, "/").concat(endpointName, ".json");
  };

  var _excluded$3 = ["endpointName"];
  var BulkRequestClient = /*#__PURE__*/function () {
    function BulkRequestClient(client, guestSpaceId) {
      _classCallCheck(this, BulkRequestClient);

      this.client = client;
      this.guestSpaceId = guestSpaceId;
      this.REQUESTS_LENGTH_LIMIT = 20;
    }

    _createClass(BulkRequestClient, [{
      key: "send",
      value: function send(params) {
        var _this = this;

        var requestsParam = params.requests;
        var requests = requestsParam.map(function (request) {
          if ("endpointName" in request) {
            var endpointName = request.endpointName,
                rest = _objectWithoutProperties(request, _excluded$3);

            return _objectSpread2({
              api: _this.buildPathWithGuestSpaceId({
                endpointName: endpointName
              })
            }, rest);
          }

          return request;
        });
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "bulkRequest"
        });
        return this.client.post(path, {
          requests: requests
        });
      }
    }, {
      key: "buildPathWithGuestSpaceId",
      value: function buildPathWithGuestSpaceId(params) {
        return buildPath(_objectSpread2(_objectSpread2({}, params), {}, {
          guestSpaceId: this.guestSpaceId
        }));
      }
    }]);

    return BulkRequestClient;
  }();

  var _excluded$2 = ["preview"],
      _excluded2$1 = ["preview"],
      _excluded3$1 = ["preview"],
      _excluded4$1 = ["preview"],
      _excluded5 = ["preview"],
      _excluded6 = ["preview"],
      _excluded7 = ["preview"],
      _excluded8 = ["preview"],
      _excluded9 = ["preview"],
      _excluded10 = ["preview"],
      _excluded11 = ["preview"],
      _excluded12 = ["preview"],
      _excluded13 = ["preview"],
      _excluded14 = ["preview"];
  var AppClient = /*#__PURE__*/function () {
    function AppClient(client, guestSpaceId) {
      _classCallCheck(this, AppClient);

      this.client = client;
      this.guestSpaceId = guestSpaceId;
    }

    _createClass(AppClient, [{
      key: "getFormFields",
      value: function getFormFields(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded$2);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/form/fields",
          preview: preview
        });
        return this.client.get(path, _objectSpread2({}, rest));
      }
    }, {
      key: "addFormFields",
      value: function addFormFields(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/form/fields",
          preview: true
        });
        return this.client.post(path, params);
      }
    }, {
      key: "updateFormFields",
      value: function updateFormFields(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/form/fields",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "deleteFormFields",
      value: function deleteFormFields(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/form/fields",
          preview: true
        });
        return this.client["delete"](path, params);
      }
    }, {
      key: "getFormLayout",
      value: function getFormLayout(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded2$1);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/form/layout",
          preview: preview
        });
        return this.client.get(path, _objectSpread2({}, rest));
      }
    }, {
      key: "updateFormLayout",
      value: function updateFormLayout(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/form/layout",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getViews",
      value: function getViews(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded3$1);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/views",
          preview: preview
        });
        return this.client.get(path, rest);
      }
    }, {
      key: "updateViews",
      value: function updateViews(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/views",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getApp",
      value: function getApp(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app"
        });
        return this.client.get(path, params);
      }
    }, {
      key: "getApps",
      value: function getApps(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "apps"
        });
        return this.client.get(path, params);
      }
    }, {
      key: "addApp",
      value: function () {
        var _addApp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {
          var name, space, path, spacePath, _yield$this$client$ge, defaultThread;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  name = params.name, space = params.space;
                  path = this.buildPathWithGuestSpaceId({
                    endpointName: "app",
                    preview: true
                  });

                  if (!space) {
                    _context.next = 9;
                    break;
                  }

                  // NOTE: Although `thread` parameter is required in REST API,
                  // there are no visual representations of apps being related to threads.
                  // Moreover, there is currently no helpful reason to create apps in threads other than the default thread,
                  // so the API Client sets the default thread id here.
                  spacePath = this.buildPathWithGuestSpaceId({
                    endpointName: "space"
                  });
                  _context.next = 6;
                  return this.client.get(spacePath, {
                    id: space
                  });

                case 6:
                  _yield$this$client$ge = _context.sent;
                  defaultThread = _yield$this$client$ge.defaultThread;
                  return _context.abrupt("return", this.client.post(path, _objectSpread2(_objectSpread2({}, params), {}, {
                    thread: defaultThread
                  })));

                case 9:
                  return _context.abrupt("return", this.client.post(path, {
                    name: name
                  }));

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function addApp(_x) {
          return _addApp.apply(this, arguments);
        }

        return addApp;
      }()
    }, {
      key: "getAppSettings",
      value: function getAppSettings(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded4$1);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/settings",
          preview: preview
        });
        return this.client.get(path, rest);
      }
    }, {
      key: "updateAppSettings",
      value: function updateAppSettings(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/settings",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getProcessManagement",
      value: function getProcessManagement(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded5);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/status",
          preview: preview
        });
        return this.client.get(path, rest);
      }
    }, {
      key: "updateProcessManagement",
      value: function updateProcessManagement(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/status",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getDeployStatus",
      value: function getDeployStatus(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/deploy",
          preview: true
        });
        return this.client.get(path, params);
      }
    }, {
      key: "deployApp",
      value: function deployApp(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/deploy",
          preview: true
        });
        return this.client.post(path, params);
      }
    }, {
      key: "getFieldAcl",
      value: function getFieldAcl(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded6);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "field/acl",
          preview: preview
        });
        return this.client.get(path, _objectSpread2({}, rest));
      }
    }, {
      key: "updateFieldAcl",
      value: function updateFieldAcl(params) {
        // NOTE: When executing this API without `preview`,
        // all pre-live app's settings will be deployed to live app.
        // This behavior may not be what the users expected,
        // so we disable it temporarily.
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "field/acl",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getAppAcl",
      value: function getAppAcl(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded7);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/acl",
          preview: preview
        });
        return this.client.get(path, _objectSpread2({}, rest));
      }
    }, {
      key: "updateAppAcl",
      value: function updateAppAcl(params) {
        // NOTE: When executing this API without `preview`,
        // all pre-live app's settings will be deployed to live app.
        // This behavior may not be what the users expected,
        // so we disable it temporarily.
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/acl",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "evaluateRecordsAcl",
      value: function evaluateRecordsAcl(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "records/acl/evaluate"
        });
        return this.client.get(path, params);
      }
    }, {
      key: "getRecordAcl",
      value: function getRecordAcl(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded8);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record/acl",
          preview: preview
        });
        return this.client.get(path, _objectSpread2({}, rest));
      }
    }, {
      key: "updateRecordAcl",
      value: function updateRecordAcl(params) {
        // NOTE: When executing this API without `preview`,
        // all pre-live app's settings will be deployed to live app.
        // This behavior may not be what the users expected,
        // so we disable it temporarily.
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record/acl",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getAppCustomize",
      value: function getAppCustomize(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded9);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/customize",
          preview: preview
        });
        return this.client.get(path, _objectSpread2({}, rest));
      }
    }, {
      key: "updateAppCustomize",
      value: function updateAppCustomize(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/customize",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getGeneralNotifications",
      value: function getGeneralNotifications(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded10);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/notifications/general",
          preview: preview
        });
        return this.client.get(path, _objectSpread2({}, rest));
      }
    }, {
      key: "updateGeneralNotifications",
      value: function updateGeneralNotifications(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/notifications/general",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getPerRecordNotifications",
      value: function getPerRecordNotifications(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded11);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/notifications/perRecord",
          preview: preview
        });
        return this.client.get(path, rest);
      }
    }, {
      key: "updatePerRecordNotifications",
      value: function updatePerRecordNotifications(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/notifications/perRecord",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getReminderNotifications",
      value: function getReminderNotifications(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded12);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/notifications/reminder",
          preview: preview
        });
        return this.client.get(path, rest);
      }
    }, {
      key: "updateReminderNotifications",
      value: function updateReminderNotifications(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/notifications/reminder",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getReports",
      value: function getReports(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded13);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/reports",
          preview: preview
        });
        return this.client.get(path, rest);
      }
    }, {
      key: "updateReports",
      value: function updateReports(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/reports",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "getAppActions",
      value: function getAppActions(params) {
        var preview = params.preview,
            rest = _objectWithoutProperties(params, _excluded14);

        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/actions",
          preview: preview
        });
        return this.client.get(path, rest);
      }
    }, {
      key: "updateAppActions",
      value: function updateAppActions(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "app/actions",
          preview: true
        });
        return this.client.put(path, params);
      }
    }, {
      key: "buildPathWithGuestSpaceId",
      value: function buildPathWithGuestSpaceId(params) {
        return buildPath(_objectSpread2(_objectSpread2({}, params), {}, {
          guestSpaceId: this.guestSpaceId
        }));
      }
    }]);

    return AppClient;
  }();

  var internalObjectKeys = objectKeysInternal;
  var enumBugKeys$1 = enumBugKeys$3; // `Object.keys` method
  // https://tc39.es/ecma262/#sec-object.keys
  // eslint-disable-next-line es/no-object-keys -- safe

  var objectKeys$2 = Object.keys || function keys(O) {
    return internalObjectKeys(O, enumBugKeys$1);
  };

  var DESCRIPTORS$2 = descriptors;
  var uncurryThis$b = functionUncurryThis;
  var call$3 = functionCall;
  var fails$8 = fails$j;
  var objectKeys$1 = objectKeys$2;
  var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
  var propertyIsEnumerableModule = objectPropertyIsEnumerable;
  var toObject$2 = toObject$6;
  var IndexedObject$2 = indexedObject; // eslint-disable-next-line es/no-object-assign -- safe

  var $assign = Object.assign; // eslint-disable-next-line es/no-object-defineproperty -- required for testing

  var defineProperty$1 = Object.defineProperty;
  var concat = uncurryThis$b([].concat); // `Object.assign` method
  // https://tc39.es/ecma262/#sec-object.assign

  var objectAssign = !$assign || fails$8(function () {
    // should have correct order of operations (Edge bug)
    if (DESCRIPTORS$2 && $assign({
      b: 1
    }, $assign(defineProperty$1({}, 'a', {
      enumerable: true,
      get: function get() {
        defineProperty$1(this, 'b', {
          value: 3,
          enumerable: false
        });
      }
    }), {
      b: 2
    })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

    var A = {};
    var B = {}; // eslint-disable-next-line es/no-symbol -- safe

    var symbol = Symbol();
    var alphabet = 'abcdefghijklmnopqrst';
    A[symbol] = 7;
    alphabet.split('').forEach(function (chr) {
      B[chr] = chr;
    });
    return $assign({}, A)[symbol] != 7 || objectKeys$1($assign({}, B)).join('') != alphabet;
  }) ? function assign(target, source) {
    // eslint-disable-line no-unused-vars -- required for `.length`
    var T = toObject$2(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    var propertyIsEnumerable = propertyIsEnumerableModule.f;

    while (argumentsLength > index) {
      var S = IndexedObject$2(arguments[index++]);
      var keys = getOwnPropertySymbols ? concat(objectKeys$1(S), getOwnPropertySymbols(S)) : objectKeys$1(S);
      var length = keys.length;
      var j = 0;
      var key;

      while (length > j) {
        key = keys[j++];
        if (!DESCRIPTORS$2 || call$3(propertyIsEnumerable, S, key)) T[key] = S[key];
      }
    }

    return T;
  } : $assign;

  var $$8 = _export;
  var assign$1 = objectAssign; // `Object.assign` method
  // https://tc39.es/ecma262/#sec-object.assign
  // eslint-disable-next-line es/no-object-assign -- required for testing

  $$8({
    target: 'Object',
    stat: true,
    forced: Object.assign !== assign$1
  }, {
    assign: assign$1
  });

  var global$a = global$z;
  var classof$3 = classof$5;
  var String$1 = global$a.String;

  var toString$6 = function toString(argument) {
    if (classof$3(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
    return String$1(argument);
  };

  var anObject$5 = anObject$9; // `RegExp.prototype.flags` getter implementation
  // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags

  var regexpFlags$1 = function regexpFlags() {
    var that = anObject$5(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.dotAll) result += 's';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };

  var fails$7 = fails$j;
  var global$9 = global$z; // babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError

  var $RegExp$2 = global$9.RegExp;
  var UNSUPPORTED_Y$1 = fails$7(function () {
    var re = $RegExp$2('a', 'y');
    re.lastIndex = 2;
    return re.exec('abcd') != null;
  }); // UC Browser bug
  // https://github.com/zloirock/core-js/issues/1008

  var MISSED_STICKY = UNSUPPORTED_Y$1 || fails$7(function () {
    return !$RegExp$2('a', 'y').sticky;
  });
  var BROKEN_CARET = UNSUPPORTED_Y$1 || fails$7(function () {
    // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
    var re = $RegExp$2('^r', 'gy');
    re.lastIndex = 2;
    return re.exec('str') != null;
  });
  var regexpStickyHelpers = {
    BROKEN_CARET: BROKEN_CARET,
    MISSED_STICKY: MISSED_STICKY,
    UNSUPPORTED_Y: UNSUPPORTED_Y$1
  };

  var objectDefineProperties = {};

  var DESCRIPTORS$1 = descriptors;
  var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
  var definePropertyModule = objectDefineProperty;
  var anObject$4 = anObject$9;
  var toIndexedObject$2 = toIndexedObject$6;
  var objectKeys = objectKeys$2; // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  // eslint-disable-next-line es/no-object-defineproperties -- safe

  objectDefineProperties.f = DESCRIPTORS$1 && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject$4(O);
    var props = toIndexedObject$2(Properties);
    var keys = objectKeys(Properties);
    var length = keys.length;
    var index = 0;
    var key;

    while (length > index) {
      definePropertyModule.f(O, key = keys[index++], props[key]);
    }

    return O;
  };

  var getBuiltIn = getBuiltIn$5;
  var html$1 = getBuiltIn('document', 'documentElement');

  /* global ActiveXObject -- old IE, WSH */
  var anObject$3 = anObject$9;
  var definePropertiesModule = objectDefineProperties;
  var enumBugKeys = enumBugKeys$3;
  var hiddenKeys = hiddenKeys$4;
  var html = html$1;
  var documentCreateElement = documentCreateElement$1;
  var sharedKey = sharedKey$2;
  var GT = '>';
  var LT = '<';
  var PROTOTYPE = 'prototype';
  var SCRIPT = 'script';
  var IE_PROTO = sharedKey('IE_PROTO');

  var EmptyConstructor = function EmptyConstructor() {
    /* empty */
  };

  var scriptTag = function scriptTag(content) {
    return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
  }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


  var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
    activeXDocument.write(scriptTag(''));
    activeXDocument.close();
    var temp = activeXDocument.parentWindow.Object;
    activeXDocument = null; // avoid memory leak

    return temp;
  }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


  var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement('iframe');
    var JS = 'java' + SCRIPT + ':';
    var iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag('document.F=Object'));
    iframeDocument.close();
    return iframeDocument.F;
  }; // Check for document.domain and active x support
  // No need to use active x approach when document.domain is not set
  // see https://github.com/es-shims/es5-shim/issues/150
  // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
  // avoid IE GC bug


  var activeXDocument;

  var _NullProtoObject = function NullProtoObject() {
    try {
      activeXDocument = new ActiveXObject('htmlfile');
    } catch (error) {
      /* ignore */
    }

    _NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
    : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH

    var length = enumBugKeys.length;

    while (length--) {
      delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];
    }

    return _NullProtoObject();
  };

  hiddenKeys[IE_PROTO] = true; // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create

  var objectCreate = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      EmptyConstructor[PROTOTYPE] = anObject$3(O);
      result = new EmptyConstructor();
      EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

      result[IE_PROTO] = O;
    } else result = _NullProtoObject();

    return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
  };

  var fails$6 = fails$j;
  var global$8 = global$z; // babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError

  var $RegExp$1 = global$8.RegExp;
  var regexpUnsupportedDotAll = fails$6(function () {
    var re = $RegExp$1('.', 's');
    return !(re.dotAll && re.exec('\n') && re.flags === 's');
  });

  var fails$5 = fails$j;
  var global$7 = global$z; // babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError

  var $RegExp = global$7.RegExp;
  var regexpUnsupportedNcg = fails$5(function () {
    var re = $RegExp('(?<a>b)', 'g');
    return re.exec('b').groups.a !== 'b' || 'b'.replace(re, '$<a>c') !== 'bc';
  });

  /* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */

  /* eslint-disable regexp/no-useless-quantifier -- testing */


  var call$2 = functionCall;
  var uncurryThis$a = functionUncurryThis;
  var toString$5 = toString$6;
  var regexpFlags = regexpFlags$1;
  var stickyHelpers = regexpStickyHelpers;
  var shared = shared$4.exports;
  var create = objectCreate;
  var getInternalState = internalState.get;
  var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
  var UNSUPPORTED_NCG = regexpUnsupportedNcg;
  var nativeReplace = shared('native-string-replace', String.prototype.replace);
  var nativeExec = RegExp.prototype.exec;
  var patchedExec = nativeExec;
  var charAt$2 = uncurryThis$a(''.charAt);
  var indexOf$1 = uncurryThis$a(''.indexOf);
  var replace$2 = uncurryThis$a(''.replace);
  var stringSlice$1 = uncurryThis$a(''.slice);

  var UPDATES_LAST_INDEX_WRONG = function () {
    var re1 = /a/;
    var re2 = /b*/g;
    call$2(nativeExec, re1, 'a');
    call$2(nativeExec, re2, 'a');
    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
  }();

  var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

  if (PATCH) {
    patchedExec = function exec(string) {
      var re = this;
      var state = getInternalState(re);
      var str = toString$5(string);
      var raw = state.raw;
      var result, reCopy, lastIndex, match, i, object, group;

      if (raw) {
        raw.lastIndex = re.lastIndex;
        result = call$2(patchedExec, raw, str);
        re.lastIndex = raw.lastIndex;
        return result;
      }

      var groups = state.groups;
      var sticky = UNSUPPORTED_Y && re.sticky;
      var flags = call$2(regexpFlags, re);
      var source = re.source;
      var charsAdded = 0;
      var strCopy = str;

      if (sticky) {
        flags = replace$2(flags, 'y', '');

        if (indexOf$1(flags, 'g') === -1) {
          flags += 'g';
        }

        strCopy = stringSlice$1(str, re.lastIndex); // Support anchored sticky behavior.

        if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$2(str, re.lastIndex - 1) !== '\n')) {
          source = '(?: ' + source + ')';
          strCopy = ' ' + strCopy;
          charsAdded++;
        } // ^(? + rx + ) is needed, in combination with some str slicing, to
        // simulate the 'y' flag.


        reCopy = new RegExp('^(?:' + source + ')', flags);
      }

      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
      }

      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
      match = call$2(nativeExec, sticky ? reCopy : re, strCopy);

      if (sticky) {
        if (match) {
          match.input = stringSlice$1(match.input, charsAdded);
          match[0] = stringSlice$1(match[0], charsAdded);
          match.index = re.lastIndex;
          re.lastIndex += match[0].length;
        } else re.lastIndex = 0;
      } else if (UPDATES_LAST_INDEX_WRONG && match) {
        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
      }

      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        call$2(nativeReplace, match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      if (match && groups) {
        match.groups = object = create(null);

        for (i = 0; i < groups.length; i++) {
          group = groups[i];
          object[group[0]] = match[group[1]];
        }
      }

      return match;
    };
  }

  var regexpExec$2 = patchedExec;

  var $$7 = _export;
  var exec = regexpExec$2; // `RegExp.prototype.exec` method
  // https://tc39.es/ecma262/#sec-regexp.prototype.exec

  $$7({
    target: 'RegExp',
    proto: true,
    forced: /./.exec !== exec
  }, {
    exec: exec
  });

  var uncurryThis$9 = functionUncurryThis;
  var redefine$4 = redefine$6.exports;
  var regexpExec$1 = regexpExec$2;
  var fails$4 = fails$j;
  var wellKnownSymbol$1 = wellKnownSymbol$8;
  var createNonEnumerableProperty = createNonEnumerableProperty$4;
  var SPECIES$1 = wellKnownSymbol$1('species');
  var RegExpPrototype$1 = RegExp.prototype;

  var fixRegexpWellKnownSymbolLogic = function fixRegexpWellKnownSymbolLogic(KEY, exec, FORCED, SHAM) {
    var SYMBOL = wellKnownSymbol$1(KEY);
    var DELEGATES_TO_SYMBOL = !fails$4(function () {
      // String methods call symbol-named RegEp methods
      var O = {};

      O[SYMBOL] = function () {
        return 7;
      };

      return ''[KEY](O) != 7;
    });
    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$4(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;

      if (KEY === 'split') {
        // We can't use real regex here since it causes deoptimization
        // and serious performance degradation in V8
        // https://github.com/zloirock/core-js/issues/306
        re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.

        re.constructor = {};

        re.constructor[SPECIES$1] = function () {
          return re;
        };

        re.flags = '';
        re[SYMBOL] = /./[SYMBOL];
      }

      re.exec = function () {
        execCalled = true;
        return null;
      };

      re[SYMBOL]('');
      return !execCalled;
    });

    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
      var uncurriedNativeRegExpMethod = uncurryThis$9(/./[SYMBOL]);
      var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
        var uncurriedNativeMethod = uncurryThis$9(nativeMethod);
        var $exec = regexp.exec;

        if ($exec === regexpExec$1 || $exec === RegExpPrototype$1.exec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return {
              done: true,
              value: uncurriedNativeRegExpMethod(regexp, str, arg2)
            };
          }

          return {
            done: true,
            value: uncurriedNativeMethod(str, regexp, arg2)
          };
        }

        return {
          done: false
        };
      });
      redefine$4(String.prototype, KEY, methods[0]);
      redefine$4(RegExpPrototype$1, SYMBOL, methods[1]);
    }

    if (SHAM) createNonEnumerableProperty(RegExpPrototype$1[SYMBOL], 'sham', true);
  };

  var uncurryThis$8 = functionUncurryThis;
  var toIntegerOrInfinity = toIntegerOrInfinity$3;
  var toString$4 = toString$6;
  var requireObjectCoercible$2 = requireObjectCoercible$5;
  var charAt$1 = uncurryThis$8(''.charAt);
  var charCodeAt$1 = uncurryThis$8(''.charCodeAt);
  var stringSlice = uncurryThis$8(''.slice);

  var createMethod$2 = function createMethod(CONVERT_TO_STRING) {
    return function ($this, pos) {
      var S = toString$4(requireObjectCoercible$2($this));
      var position = toIntegerOrInfinity(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
      first = charCodeAt$1(S, position);
      return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? charAt$1(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
    };
  };

  var stringMultibyte = {
    // `String.prototype.codePointAt` method
    // https://tc39.es/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod$2(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod$2(true)
  };

  var charAt = stringMultibyte.charAt; // `AdvanceStringIndex` abstract operation
  // https://tc39.es/ecma262/#sec-advancestringindex

  var advanceStringIndex$1 = function advanceStringIndex(S, index, unicode) {
    return index + (unicode ? charAt(S, index).length : 1);
  };

  var global$6 = global$z;
  var call$1 = functionCall;
  var anObject$2 = anObject$9;
  var isCallable$1 = isCallable$e;
  var classof$2 = classofRaw$1;
  var regexpExec = regexpExec$2;
  var TypeError$3 = global$6.TypeError; // `RegExpExec` abstract operation
  // https://tc39.es/ecma262/#sec-regexpexec

  var regexpExecAbstract = function regexpExecAbstract(R, S) {
    var exec = R.exec;

    if (isCallable$1(exec)) {
      var result = call$1(exec, R, S);
      if (result !== null) anObject$2(result);
      return result;
    }

    if (classof$2(R) === 'RegExp') return call$1(regexpExec, R, S);
    throw TypeError$3('RegExp#exec called on incompatible receiver');
  };

  var call = functionCall;
  var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
  var anObject$1 = anObject$9;
  var toLength = toLength$2;
  var toString$3 = toString$6;
  var requireObjectCoercible$1 = requireObjectCoercible$5;
  var getMethod = getMethod$2;
  var advanceStringIndex = advanceStringIndex$1;
  var regExpExec = regexpExecAbstract; // @@match logic

  fixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
    return [// `String.prototype.match` method
    // https://tc39.es/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible$1(this);
      var matcher = regexp == undefined ? undefined : getMethod(regexp, MATCH);
      return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString$3(O));
    }, // `RegExp.prototype[@@match]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
    function (string) {
      var rx = anObject$1(this);
      var S = toString$3(string);
      var res = maybeCallNative(nativeMatch, rx, S);
      if (res.done) return res.value;
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;

      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = toString$3(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }

      return n === 0 ? null : A;
    }];
  });

  var isCallable = isCallable$e;
  var isObject$2 = isObject$a;
  var setPrototypeOf = objectSetPrototypeOf; // makes subclassing work correct for wrapped built-ins

  var inheritIfRequired$1 = function inheritIfRequired($this, dummy, Wrapper) {
    var NewTarget, NewTargetPrototype;
    if ( // it can work only with native `setPrototypeOf`
    setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject$2(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);
    return $this;
  };

  var uncurryThis$7 = functionUncurryThis; // `thisNumberValue` abstract operation
  // https://tc39.es/ecma262/#sec-thisnumbervalue

  var thisNumberValue$1 = uncurryThis$7(1.0.valueOf);

  var whitespaces$1 = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002" + "\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

  var uncurryThis$6 = functionUncurryThis;
  var requireObjectCoercible = requireObjectCoercible$5;
  var toString$2 = toString$6;
  var whitespaces = whitespaces$1;
  var replace$1 = uncurryThis$6(''.replace);
  var whitespace = '[' + whitespaces + ']';
  var ltrim = RegExp('^' + whitespace + whitespace + '*');
  var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

  var createMethod$1 = function createMethod(TYPE) {
    return function ($this) {
      var string = toString$2(requireObjectCoercible($this));
      if (TYPE & 1) string = replace$1(string, ltrim, '');
      if (TYPE & 2) string = replace$1(string, rtrim, '');
      return string;
    };
  };

  var stringTrim = {
    // `String.prototype.{ trimLeft, trimStart }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimstart
    start: createMethod$1(1),
    // `String.prototype.{ trimRight, trimEnd }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimend
    end: createMethod$1(2),
    // `String.prototype.trim` method
    // https://tc39.es/ecma262/#sec-string.prototype.trim
    trim: createMethod$1(3)
  };

  var DESCRIPTORS = descriptors;
  var global$5 = global$z;
  var uncurryThis$5 = functionUncurryThis;
  var isForced = isForced_1;
  var redefine$3 = redefine$6.exports;
  var hasOwn$3 = hasOwnProperty_1;
  var inheritIfRequired = inheritIfRequired$1;
  var isPrototypeOf$1 = objectIsPrototypeOf;
  var isSymbol$1 = isSymbol$4;
  var toPrimitive = toPrimitive$2;
  var fails$3 = fails$j;
  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
  var defineProperty = objectDefineProperty.f;
  var thisNumberValue = thisNumberValue$1;
  var trim$1 = stringTrim.trim;
  var NUMBER = 'Number';
  var NativeNumber = global$5[NUMBER];
  var NumberPrototype = NativeNumber.prototype;
  var TypeError$2 = global$5.TypeError;
  var arraySlice$1 = uncurryThis$5(''.slice);
  var charCodeAt = uncurryThis$5(''.charCodeAt); // `ToNumeric` abstract operation
  // https://tc39.es/ecma262/#sec-tonumeric

  var toNumeric = function toNumeric(value) {
    var primValue = toPrimitive(value, 'number');
    return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
  }; // `ToNumber` abstract operation
  // https://tc39.es/ecma262/#sec-tonumber


  var toNumber = function toNumber(argument) {
    var it = toPrimitive(argument, 'number');
    var first, third, radix, maxCode, digits, length, index, code;
    if (isSymbol$1(it)) throw TypeError$2('Cannot convert a Symbol value to a number');

    if (typeof it == 'string' && it.length > 2) {
      it = trim$1(it);
      first = charCodeAt(it, 0);

      if (first === 43 || first === 45) {
        third = charCodeAt(it, 2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (charCodeAt(it, 1)) {
          case 66:
          case 98:
            radix = 2;
            maxCode = 49;
            break;
          // fast equal of /^0b[01]+$/i

          case 79:
          case 111:
            radix = 8;
            maxCode = 55;
            break;
          // fast equal of /^0o[0-7]+$/i

          default:
            return +it;
        }

        digits = arraySlice$1(it, 2);
        length = digits.length;

        for (index = 0; index < length; index++) {
          code = charCodeAt(digits, index); // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols

          if (code < 48 || code > maxCode) return NaN;
        }

        return parseInt(digits, radix);
      }
    }

    return +it;
  }; // `Number` constructor
  // https://tc39.es/ecma262/#sec-number-constructor


  if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
    var NumberWrapper = function Number(value) {
      var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
      var dummy = this; // check on 1..constructor(foo) case

      return isPrototypeOf$1(NumberPrototype, dummy) && fails$3(function () {
        thisNumberValue(dummy);
      }) ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
    };

    for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' + // ESNext
    'fromString,range').split(','), j = 0, key; keys.length > j; j++) {
      if (hasOwn$3(NativeNumber, key = keys[j]) && !hasOwn$3(NumberWrapper, key)) {
        defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
      }
    }

    NumberWrapper.prototype = NumberPrototype;
    NumberPrototype.constructor = NumberWrapper;
    redefine$3(global$5, NUMBER, NumberWrapper);
  }

  var fails$2 = fails$j;

  var arrayMethodIsStrict$4 = function arrayMethodIsStrict(METHOD_NAME, argument) {
    var method = [][METHOD_NAME];
    return !!method && fails$2(function () {
      // eslint-disable-next-line no-useless-call -- required for testing
      method.call(null, argument || function () {
        return 1;
      }, 1);
    });
  };

  /* eslint-disable es/no-array-prototype-indexof -- required for testing */


  var $$6 = _export;
  var uncurryThis$4 = functionUncurryThis;
  var $IndexOf = arrayIncludes.indexOf;
  var arrayMethodIsStrict$3 = arrayMethodIsStrict$4;
  var un$IndexOf = uncurryThis$4([].indexOf);
  var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
  var STRICT_METHOD$3 = arrayMethodIsStrict$3('indexOf'); // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof

  $$6({
    target: 'Array',
    proto: true,
    forced: NEGATIVE_ZERO || !STRICT_METHOD$3
  }, {
    indexOf: function indexOf(searchElement
    /* , fromIndex = 0 */
    ) {
      var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
      return NEGATIVE_ZERO // convert -0 to +0
      ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
    }
  });

  var $$5 = _export;
  var $every = arrayIteration.every;
  var arrayMethodIsStrict$2 = arrayMethodIsStrict$4;
  var STRICT_METHOD$2 = arrayMethodIsStrict$2('every'); // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every

  $$5({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD$2
  }, {
    every: function every(callbackfn
    /* , thisArg */
    ) {
      return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
  var classof$1 = classof$5; // `Object.prototype.toString` method implementation
  // https://tc39.es/ecma262/#sec-object.prototype.tostring

  var objectToString$1 = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
    return '[object ' + classof$1(this) + ']';
  };

  var TO_STRING_TAG_SUPPORT = toStringTagSupport;
  var redefine$2 = redefine$6.exports;
  var toString$1 = objectToString$1; // `Object.prototype.toString` method
  // https://tc39.es/ecma262/#sec-object.prototype.tostring

  if (!TO_STRING_TAG_SUPPORT) {
    redefine$2(Object.prototype, 'toString', toString$1, {
      unsafe: true
    });
  }

  var $$4 = _export;
  var isArray$6 = isArray$9; // `Array.isArray` method
  // https://tc39.es/ecma262/#sec-array.isarray

  $$4({
    target: 'Array',
    stat: true
  }, {
    isArray: isArray$6
  });

  var uncurryThis$3 = functionUncurryThis;
  var arraySlice = uncurryThis$3([].slice);

  var $$3 = _export;
  var global$4 = global$z;
  var isArray$5 = isArray$9;
  var isConstructor = isConstructor$2;
  var isObject$1 = isObject$a;
  var toAbsoluteIndex = toAbsoluteIndex$2;
  var lengthOfArrayLike$1 = lengthOfArrayLike$5;
  var toIndexedObject$1 = toIndexedObject$6;
  var createProperty = createProperty$2;
  var wellKnownSymbol = wellKnownSymbol$8;
  var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$3;
  var un$Slice = arraySlice;
  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
  var SPECIES = wellKnownSymbol('species');
  var Array$1 = global$4.Array;
  var max = Math.max; // `Array.prototype.slice` method
  // https://tc39.es/ecma262/#sec-array.prototype.slice
  // fallback for not array-like ES3 strings and DOM objects

  $$3({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT
  }, {
    slice: function slice(start, end) {
      var O = toIndexedObject$1(this);
      var length = lengthOfArrayLike$1(O);
      var k = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

      var Constructor, result, n;

      if (isArray$5(O)) {
        Constructor = O.constructor; // cross-realm fallback

        if (isConstructor(Constructor) && (Constructor === Array$1 || isArray$5(Constructor.prototype))) {
          Constructor = undefined;
        } else if (isObject$1(Constructor)) {
          Constructor = Constructor[SPECIES];
          if (Constructor === null) Constructor = undefined;
        }

        if (Constructor === Array$1 || Constructor === undefined) {
          return un$Slice(O, k, fin);
        }
      }

      result = new (Constructor === undefined ? Array$1 : Constructor)(max(fin - k, 0));

      for (n = 0; k < fin; k++, n++) {
        if (k in O) createProperty(result, n, O[k]);
      }

      result.length = n;
      return result;
    }
  });

  var global$3 = global$z;
  var aCallable = aCallable$3;
  var toObject$1 = toObject$6;
  var IndexedObject$1 = indexedObject;
  var lengthOfArrayLike = lengthOfArrayLike$5;
  var TypeError$1 = global$3.TypeError; // `Array.prototype.{ reduce, reduceRight }` methods implementation

  var createMethod = function createMethod(IS_RIGHT) {
    return function (that, callbackfn, argumentsLength, memo) {
      aCallable(callbackfn);
      var O = toObject$1(that);
      var self = IndexedObject$1(O);
      var length = lengthOfArrayLike(O);
      var index = IS_RIGHT ? length - 1 : 0;
      var i = IS_RIGHT ? -1 : 1;
      if (argumentsLength < 2) while (true) {
        if (index in self) {
          memo = self[index];
          index += i;
          break;
        }

        index += i;

        if (IS_RIGHT ? index < 0 : length <= index) {
          throw TypeError$1('Reduce of empty array with no initial value');
        }
      }

      for (; IS_RIGHT ? index >= 0 : length > index; index += i) {
        if (index in self) {
          memo = callbackfn(memo, self[index], index, O);
        }
      }

      return memo;
    };
  };

  var arrayReduce = {
    // `Array.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduce
    left: createMethod(false),
    // `Array.prototype.reduceRight` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduceright
    right: createMethod(true)
  };

  var classof = classofRaw$1;
  var global$2 = global$z;
  var engineIsNode = classof(global$2.process) == 'process';

  var $$2 = _export;
  var $reduce = arrayReduce.left;
  var arrayMethodIsStrict$1 = arrayMethodIsStrict$4;
  var CHROME_VERSION = engineV8Version;
  var IS_NODE = engineIsNode;
  var STRICT_METHOD$1 = arrayMethodIsStrict$1('reduce'); // Chrome 80-82 has a critical bug
  // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

  var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce

  $$2({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD$1 || CHROME_BUG
  }, {
    reduce: function reduce(callbackfn
    /* , initialValue */
    ) {
      var length = arguments.length;
      return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
    }
  });

  var $$1 = _export;
  var toObject = toObject$6;
  var nativeKeys = objectKeys$2;
  var fails$1 = fails$j;
  var FAILS_ON_PRIMITIVES = fails$1(function () {
    nativeKeys(1);
  }); // `Object.keys` method
  // https://tc39.es/ecma262/#sec-object.keys

  $$1({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES
  }, {
    keys: function keys(it) {
      return nativeKeys(toObject(it));
    }
  });

  var KintoneAllRecordsError = /*#__PURE__*/function (_Error) {
    _inherits(KintoneAllRecordsError, _Error);

    var _super = _createSuper(KintoneAllRecordsError);

    function KintoneAllRecordsError(processedRecordsResult, unprocessedRecords, numOfAllRecords, error, chunkLength) {
      var _this;

      _classCallCheck(this, KintoneAllRecordsError);

      var numOfProcessedRecords = numOfAllRecords - unprocessedRecords.length;
      var errorIndex = KintoneAllRecordsError.extractErrorIndex(numOfProcessedRecords, error, chunkLength);
      var message = KintoneAllRecordsError.buildErrorMessage(numOfProcessedRecords, numOfAllRecords, errorIndex);
      _this = _super.call(this, message);
      _this.name = "KintoneAllRecordsError";
      _this.processedRecordsResult = processedRecordsResult;
      _this.unprocessedRecords = unprocessedRecords;
      _this.error = error;
      _this.errorIndex = errorIndex;
      _this.message = message; // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
      // Set the prototype explicitly.

      Object.setPrototypeOf(_assertThisInitialized(_this), KintoneAllRecordsError.prototype);
      return _this;
    }

    _createClass(KintoneAllRecordsError, null, [{
      key: "parseErrorIndex",
      value: function parseErrorIndex(errors) {
        var firstErrorKey = Object.keys(errors)[0];
        var result = firstErrorKey.match(/records\[(\d+)\]/);
        return result ? Number(result[1]) : null;
      }
    }, {
      key: "extractErrorIndex",
      value: function extractErrorIndex(numOfProcessedRecords, error, chunkLength) {
        if (error.bulkRequestIndex !== undefined && error.errors) {
          var errorParseResult = KintoneAllRecordsError.parseErrorIndex(error.errors);

          if (errorParseResult !== null) {
            return numOfProcessedRecords + error.bulkRequestIndex * chunkLength + errorParseResult;
          }
        }

        return undefined;
      }
    }, {
      key: "buildErrorMessage",
      value: function buildErrorMessage(numOfProcessedRecords, numOfAllRecords, errorIndex) {
        var message = "";

        if (errorIndex !== undefined) {
          message = "An error occurred at records[".concat(errorIndex, "]. ");
        }

        message += "".concat(numOfProcessedRecords, "/").concat(numOfAllRecords, " records are processed successfully");
        return message;
      }
    }]);

    return KintoneAllRecordsError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  var _excluded$1 = ["condition", "orderBy", "withCursor"],
      _excluded2 = ["fields"],
      _excluded3 = ["condition"],
      _excluded4 = ["condition", "orderBy"];
  var ADD_RECORDS_LIMIT = 100;
  var UPDATE_RECORDS_LIMIT = 100;
  var DELETE_RECORDS_LIMIT = 100;
  var RecordClient = /*#__PURE__*/function () {
    function RecordClient(client, bulkRequestClient, guestSpaceId) {
      _classCallCheck(this, RecordClient);

      this.client = client;
      this.bulkRequestClient = bulkRequestClient;
      this.guestSpaceId = guestSpaceId;
      this.didWarnMaximumOffsetValue = false;
    }

    _createClass(RecordClient, [{
      key: "getRecord",
      value: function getRecord(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record"
        });
        return this.client.get(path, params);
      }
    }, {
      key: "addRecord",
      value: function addRecord(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record"
        });
        return this.client.post(path, params);
      }
    }, {
      key: "updateRecord",
      value: function updateRecord(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record"
        });
        return this.client.put(path, params);
      }
    }, {
      key: "upsertRecord",
      value: function () {
        var _upsertRecord = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {
          var app, updateKey, record, _yield$this$getRecord, records, _yield$this$updateRec, revision;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  app = params.app, updateKey = params.updateKey, record = params.record; // if the client can't get a record matches `updateKey`, use `addRecord`

                  _context.next = 3;
                  return this.getRecords({
                    app: app,
                    query: "".concat(updateKey.field, " = \"").concat(updateKey.value, "\"")
                  });

                case 3:
                  _yield$this$getRecord = _context.sent;
                  records = _yield$this$getRecord.records;

                  if (!(records.length > 0)) {
                    _context.next = 13;
                    break;
                  }

                  if (!(records[0].$id.type === "__ID__")) {
                    _context.next = 12;
                    break;
                  }

                  _context.next = 9;
                  return this.updateRecord(params);

                case 9:
                  _yield$this$updateRec = _context.sent;
                  revision = _yield$this$updateRec.revision;
                  return _context.abrupt("return", {
                    id: records[0].$id.value,
                    revision: revision
                  });

                case 12:
                  throw new Error("Missing `$id` in `getRecords` response. This error is likely caused by a bug in Kintone REST API Client. Please file an issue.");

                case 13:
                  return _context.abrupt("return", this.addRecord({
                    app: app,
                    record: Object.assign({}, record, _defineProperty({}, updateKey.field, {
                      value: updateKey.value
                    }))
                  }));

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function upsertRecord(_x) {
          return _upsertRecord.apply(this, arguments);
        }

        return upsertRecord;
      }() // TODO: `records` type in return type should be filtered by `fields`.

    }, {
      key: "getRecords",
      value: function () {
        var _getRecords = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(params) {
          var path, response;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  path = this.buildPathWithGuestSpaceId({
                    endpointName: "records"
                  });
                  _context2.next = 3;
                  return this.client.get(path, params);

                case 3:
                  response = _context2.sent;
                  this.warnMaximumOffsetValueIfNeeded(params.query);
                  return _context2.abrupt("return", response);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function getRecords(_x2) {
          return _getRecords.apply(this, arguments);
        }

        return getRecords;
      }()
    }, {
      key: "warnMaximumOffsetValueIfNeeded",
      value: function warnMaximumOffsetValueIfNeeded(query) {
        if (query) {
          var regexp = /offset\s+(\d+)/i;
          var result = query.match(regexp);

          if (!this.didWarnMaximumOffsetValue && result && Number(result[1]) > 10000) {
            this.didWarnMaximumOffsetValue = true;
            console.warn("Warning: The maximum offset value will be limited to 10,000 in the future. Please use `createCursor()` and `getRecordsByCursor()` instead.");
          }
        }
      }
    }, {
      key: "addRecords",
      value: function () {
        var _addRecords = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(params) {
          var path, _yield$this$client$po, ids, revisions;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  path = this.buildPathWithGuestSpaceId({
                    endpointName: "records"
                  });
                  _context3.next = 3;
                  return this.client.post(path, params);

                case 3:
                  _yield$this$client$po = _context3.sent;
                  ids = _yield$this$client$po.ids;
                  revisions = _yield$this$client$po.revisions;
                  return _context3.abrupt("return", {
                    ids: ids,
                    revisions: revisions,
                    records: ids.map(function (id, i) {
                      return {
                        id: id,
                        revision: revisions[i]
                      };
                    })
                  });

                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function addRecords(_x3) {
          return _addRecords.apply(this, arguments);
        }

        return addRecords;
      }()
    }, {
      key: "updateRecords",
      value: function updateRecords(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "records"
        });
        return this.client.put(path, params);
      }
    }, {
      key: "deleteRecords",
      value: function deleteRecords(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "records"
        });
        return this.client["delete"](path, params);
      }
    }, {
      key: "createCursor",
      value: function createCursor(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "records/cursor"
        });
        return this.client.post(path, params);
      }
    }, {
      key: "getRecordsByCursor",
      value: function getRecordsByCursor(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "records/cursor"
        });
        return this.client.get(path, params);
      }
    }, {
      key: "deleteCursor",
      value: function deleteCursor(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "records/cursor"
        });
        return this.client["delete"](path, params);
      }
    }, {
      key: "getAllRecords",
      value: function () {
        var _getAllRecords = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(params) {
          var condition, orderBy, _params$withCursor, withCursor, rest, conditionQuery, query;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  condition = params.condition, orderBy = params.orderBy, _params$withCursor = params.withCursor, withCursor = _params$withCursor === void 0 ? true : _params$withCursor, rest = _objectWithoutProperties(params, _excluded$1);

                  if (orderBy) {
                    _context4.next = 3;
                    break;
                  }

                  return _context4.abrupt("return", this.getAllRecordsWithId(_objectSpread2(_objectSpread2({}, rest), {}, {
                    condition: condition
                  })));

                case 3:
                  if (!withCursor) {
                    _context4.next = 7;
                    break;
                  }

                  conditionQuery = condition ? "".concat(condition, " ") : "";
                  query = "".concat(conditionQuery).concat(orderBy ? "order by ".concat(orderBy) : "");
                  return _context4.abrupt("return", this.getAllRecordsWithCursor(_objectSpread2(_objectSpread2({}, rest), {}, {
                    query: query
                  })));

                case 7:
                  return _context4.abrupt("return", this.getAllRecordsWithOffset(_objectSpread2(_objectSpread2({}, rest), {}, {
                    orderBy: orderBy,
                    condition: condition
                  })));

                case 8:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getAllRecords(_x4) {
          return _getAllRecords.apply(this, arguments);
        }

        return getAllRecords;
      }()
    }, {
      key: "getAllRecordsWithId",
      value: function () {
        var _getAllRecordsWithId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(params) {
          var originalFields, rest, fields;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  originalFields = params.fields, rest = _objectWithoutProperties(params, _excluded2);
                  fields = originalFields; // Append $id if $id doesn't exist in fields

                  if (fields && fields.length > 0 && fields.indexOf("$id") === -1) {
                    fields = [].concat(_toConsumableArray(fields), ["$id"]);
                  }

                  return _context5.abrupt("return", this.getAllRecordsRecursiveWithId(_objectSpread2(_objectSpread2({}, rest), {}, {
                    fields: fields
                  }), "0", []));

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function getAllRecordsWithId(_x5) {
          return _getAllRecordsWithId.apply(this, arguments);
        }

        return getAllRecordsWithId;
      }()
    }, {
      key: "getAllRecordsRecursiveWithId",
      value: function () {
        var _getAllRecordsRecursiveWithId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(params, id, records) {
          var GET_RECORDS_LIMIT, condition, rest, conditionQuery, query, result, allRecords, lastRecord, lastId;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  GET_RECORDS_LIMIT = 500;
                  condition = params.condition, rest = _objectWithoutProperties(params, _excluded3);
                  conditionQuery = condition ? "(".concat(condition, ") and ") : "";
                  query = "".concat(conditionQuery, "$id > ").concat(id, " order by $id asc limit ").concat(GET_RECORDS_LIMIT);
                  _context6.next = 6;
                  return this.getRecords(_objectSpread2(_objectSpread2({}, rest), {}, {
                    query: query
                  }));

                case 6:
                  result = _context6.sent;
                  allRecords = records.concat(result.records);

                  if (!(result.records.length < GET_RECORDS_LIMIT)) {
                    _context6.next = 10;
                    break;
                  }

                  return _context6.abrupt("return", allRecords);

                case 10:
                  lastRecord = result.records[result.records.length - 1];

                  if (!(lastRecord.$id.type === "__ID__")) {
                    _context6.next = 14;
                    break;
                  }

                  lastId = lastRecord.$id.value;
                  return _context6.abrupt("return", this.getAllRecordsRecursiveWithId(params, lastId, allRecords));

                case 14:
                  throw new Error("Missing `$id` in `getRecords` response. This error is likely caused by a bug in Kintone REST API Client. Please file an issue.");

                case 15:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function getAllRecordsRecursiveWithId(_x6, _x7, _x8) {
          return _getAllRecordsRecursiveWithId.apply(this, arguments);
        }

        return getAllRecordsRecursiveWithId;
      }()
    }, {
      key: "getAllRecordsWithOffset",
      value: function () {
        var _getAllRecordsWithOffset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(params) {
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  return _context7.abrupt("return", this.getAllRecordsRecursiveWithOffset(params, 0, []));

                case 1:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function getAllRecordsWithOffset(_x9) {
          return _getAllRecordsWithOffset.apply(this, arguments);
        }

        return getAllRecordsWithOffset;
      }()
    }, {
      key: "getAllRecordsRecursiveWithOffset",
      value: function () {
        var _getAllRecordsRecursiveWithOffset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(params, offset, records) {
          var GET_RECORDS_LIMIT, condition, orderBy, rest, conditionQuery, query, result, allRecords;
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  GET_RECORDS_LIMIT = 500;
                  condition = params.condition, orderBy = params.orderBy, rest = _objectWithoutProperties(params, _excluded4);
                  conditionQuery = condition ? "".concat(condition, " ") : "";
                  query = "".concat(conditionQuery).concat(orderBy ? "order by ".concat(orderBy, " ") : "", "limit ").concat(GET_RECORDS_LIMIT, " offset ").concat(offset);
                  _context8.next = 6;
                  return this.getRecords(_objectSpread2(_objectSpread2({}, rest), {}, {
                    query: query
                  }));

                case 6:
                  result = _context8.sent;
                  allRecords = records.concat(result.records);

                  if (!(result.records.length < GET_RECORDS_LIMIT)) {
                    _context8.next = 10;
                    break;
                  }

                  return _context8.abrupt("return", allRecords);

                case 10:
                  return _context8.abrupt("return", this.getAllRecordsRecursiveWithOffset(params, offset + GET_RECORDS_LIMIT, allRecords));

                case 11:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function getAllRecordsRecursiveWithOffset(_x10, _x11, _x12) {
          return _getAllRecordsRecursiveWithOffset.apply(this, arguments);
        }

        return getAllRecordsRecursiveWithOffset;
      }()
    }, {
      key: "getAllRecordsWithCursor",
      value: function () {
        var _getAllRecordsWithCursor = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(params) {
          var _yield$this$createCur, id;

          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.createCursor(params);

                case 2:
                  _yield$this$createCur = _context9.sent;
                  id = _yield$this$createCur.id;
                  _context9.prev = 4;
                  _context9.next = 7;
                  return this.getAllRecordsRecursiveByCursor(id, []);

                case 7:
                  return _context9.abrupt("return", _context9.sent);

                case 10:
                  _context9.prev = 10;
                  _context9.t0 = _context9["catch"](4);
                  _context9.next = 14;
                  return this.deleteCursor({
                    id: id
                  });

                case 14:
                  throw _context9.t0;

                case 15:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this, [[4, 10]]);
        }));

        function getAllRecordsWithCursor(_x13) {
          return _getAllRecordsWithCursor.apply(this, arguments);
        }

        return getAllRecordsWithCursor;
      }()
    }, {
      key: "getAllRecordsRecursiveByCursor",
      value: function () {
        var _getAllRecordsRecursiveByCursor = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(id, records) {
          var result, allRecords;
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return this.getRecordsByCursor({
                    id: id
                  });

                case 2:
                  result = _context10.sent;
                  allRecords = records.concat(result.records);

                  if (!result.next) {
                    _context10.next = 6;
                    break;
                  }

                  return _context10.abrupt("return", this.getAllRecordsRecursiveByCursor(id, allRecords));

                case 6:
                  return _context10.abrupt("return", allRecords);

                case 7:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function getAllRecordsRecursiveByCursor(_x14, _x15) {
          return _getAllRecordsRecursiveByCursor.apply(this, arguments);
        }

        return getAllRecordsRecursiveByCursor;
      }()
    }, {
      key: "addAllRecords",
      value: function () {
        var _addAllRecords = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(params) {
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  if (params.records.every(function (record) {
                    return !Array.isArray(record) && record instanceof Object;
                  })) {
                    _context11.next = 2;
                    break;
                  }

                  throw new Error("the `records` parameter must be an array of object.");

                case 2:
                  return _context11.abrupt("return", this.addAllRecordsRecursive(params, params.records.length, []));

                case 3:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function addAllRecords(_x16) {
          return _addAllRecords.apply(this, arguments);
        }

        return addAllRecords;
      }()
    }, {
      key: "addAllRecordsRecursive",
      value: function () {
        var _addAllRecordsRecursive = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(params, numOfAllRecords, results) {
          var CHUNK_LENGTH, app, records, recordsChunk, newResults;
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  CHUNK_LENGTH = this.bulkRequestClient.REQUESTS_LENGTH_LIMIT * ADD_RECORDS_LIMIT;
                  app = params.app, records = params.records;
                  recordsChunk = records.slice(0, CHUNK_LENGTH);

                  if (!(recordsChunk.length === 0)) {
                    _context12.next = 5;
                    break;
                  }

                  return _context12.abrupt("return", {
                    records: results
                  });

                case 5:
                  _context12.prev = 5;
                  _context12.next = 8;
                  return this.addAllRecordsWithBulkRequest({
                    app: app,
                    records: recordsChunk
                  });

                case 8:
                  newResults = _context12.sent;
                  _context12.next = 14;
                  break;

                case 11:
                  _context12.prev = 11;
                  _context12.t0 = _context12["catch"](5);
                  throw new KintoneAllRecordsError({
                    records: results
                  }, records, numOfAllRecords, _context12.t0, ADD_RECORDS_LIMIT);

                case 14:
                  return _context12.abrupt("return", this.addAllRecordsRecursive({
                    app: app,
                    records: records.slice(CHUNK_LENGTH)
                  }, numOfAllRecords, results.concat(newResults)));

                case 15:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this, [[5, 11]]);
        }));

        function addAllRecordsRecursive(_x17, _x18, _x19) {
          return _addAllRecordsRecursive.apply(this, arguments);
        }

        return addAllRecordsRecursive;
      }()
    }, {
      key: "addAllRecordsWithBulkRequest",
      value: function () {
        var _addAllRecordsWithBulkRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(params) {
          var separatedRecords, requests, results;
          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  separatedRecords = this.separateArrayRecursive(ADD_RECORDS_LIMIT, [], params.records);
                  requests = separatedRecords.map(function (records) {
                    return {
                      method: "POST",
                      endpointName: "records",
                      payload: {
                        app: params.app,
                        records: records
                      }
                    };
                  });
                  _context13.next = 4;
                  return this.bulkRequestClient.send({
                    requests: requests
                  });

                case 4:
                  results = _context13.sent.results;
                  return _context13.abrupt("return", results.map(function (result) {
                    var ids = result.ids,
                        revisions = result.revisions;
                    return ids.map(function (id, i) {
                      return {
                        id: id,
                        revision: revisions[i]
                      };
                    });
                  }).reduce(function (acc, records) {
                    return acc.concat(records);
                  }, []));

                case 6:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function addAllRecordsWithBulkRequest(_x20) {
          return _addAllRecordsWithBulkRequest.apply(this, arguments);
        }

        return addAllRecordsWithBulkRequest;
      }()
    }, {
      key: "updateAllRecords",
      value: function () {
        var _updateAllRecords = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(params) {
          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  return _context14.abrupt("return", this.updateAllRecordsRecursive(params, params.records.length, []));

                case 1:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function updateAllRecords(_x21) {
          return _updateAllRecords.apply(this, arguments);
        }

        return updateAllRecords;
      }()
    }, {
      key: "updateAllRecordsRecursive",
      value: function () {
        var _updateAllRecordsRecursive = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(params, numOfAllRecords, results) {
          var CHUNK_LENGTH, app, records, recordsChunk, newResults;
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  CHUNK_LENGTH = this.bulkRequestClient.REQUESTS_LENGTH_LIMIT * UPDATE_RECORDS_LIMIT;
                  app = params.app, records = params.records;
                  recordsChunk = records.slice(0, CHUNK_LENGTH);

                  if (!(recordsChunk.length === 0)) {
                    _context15.next = 5;
                    break;
                  }

                  return _context15.abrupt("return", {
                    records: results
                  });

                case 5:
                  _context15.prev = 5;
                  _context15.next = 8;
                  return this.updateAllRecordsWithBulkRequest({
                    app: app,
                    records: recordsChunk
                  });

                case 8:
                  newResults = _context15.sent;
                  _context15.next = 14;
                  break;

                case 11:
                  _context15.prev = 11;
                  _context15.t0 = _context15["catch"](5);
                  throw new KintoneAllRecordsError({
                    records: results
                  }, records, numOfAllRecords, _context15.t0, UPDATE_RECORDS_LIMIT);

                case 14:
                  return _context15.abrupt("return", this.updateAllRecordsRecursive({
                    app: app,
                    records: records.slice(CHUNK_LENGTH)
                  }, numOfAllRecords, results.concat(newResults)));

                case 15:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this, [[5, 11]]);
        }));

        function updateAllRecordsRecursive(_x22, _x23, _x24) {
          return _updateAllRecordsRecursive.apply(this, arguments);
        }

        return updateAllRecordsRecursive;
      }()
    }, {
      key: "updateAllRecordsWithBulkRequest",
      value: function () {
        var _updateAllRecordsWithBulkRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(params) {
          var separatedRecords, requests, results;
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  separatedRecords = this.separateArrayRecursive(UPDATE_RECORDS_LIMIT, [], params.records);
                  requests = separatedRecords.map(function (records) {
                    return {
                      method: "PUT",
                      endpointName: "records",
                      payload: {
                        app: params.app,
                        records: records
                      }
                    };
                  });
                  _context16.next = 4;
                  return this.bulkRequestClient.send({
                    requests: requests
                  });

                case 4:
                  results = _context16.sent.results;
                  return _context16.abrupt("return", results.map(function (result) {
                    return result.records;
                  }).reduce(function (acc, records) {
                    return acc.concat(records);
                  }, []));

                case 6:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function updateAllRecordsWithBulkRequest(_x25) {
          return _updateAllRecordsWithBulkRequest.apply(this, arguments);
        }

        return updateAllRecordsWithBulkRequest;
      }()
    }, {
      key: "deleteAllRecords",
      value: function deleteAllRecords(params) {
        return this.deleteAllRecordsRecursive(params, params.records.length);
      }
    }, {
      key: "deleteAllRecordsRecursive",
      value: function () {
        var _deleteAllRecordsRecursive = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(params, numOfAllRecords) {
          var CHUNK_LENGTH, app, records, recordsChunk;
          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  CHUNK_LENGTH = this.bulkRequestClient.REQUESTS_LENGTH_LIMIT * DELETE_RECORDS_LIMIT;
                  app = params.app, records = params.records;
                  recordsChunk = records.slice(0, CHUNK_LENGTH);

                  if (!(recordsChunk.length === 0)) {
                    _context17.next = 5;
                    break;
                  }

                  return _context17.abrupt("return", {});

                case 5:
                  _context17.prev = 5;
                  _context17.next = 8;
                  return this.deleteAllRecordsWithBulkRequest({
                    app: app,
                    records: recordsChunk
                  });

                case 8:
                  _context17.next = 13;
                  break;

                case 10:
                  _context17.prev = 10;
                  _context17.t0 = _context17["catch"](5);
                  throw new KintoneAllRecordsError({}, records, numOfAllRecords, _context17.t0, DELETE_RECORDS_LIMIT);

                case 13:
                  return _context17.abrupt("return", this.deleteAllRecordsRecursive({
                    app: app,
                    records: records.slice(CHUNK_LENGTH)
                  }, numOfAllRecords));

                case 14:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this, [[5, 10]]);
        }));

        function deleteAllRecordsRecursive(_x26, _x27) {
          return _deleteAllRecordsRecursive.apply(this, arguments);
        }

        return deleteAllRecordsRecursive;
      }()
    }, {
      key: "deleteAllRecordsWithBulkRequest",
      value: function () {
        var _deleteAllRecordsWithBulkRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(params) {
          var separatedRecords, requests;
          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  separatedRecords = this.separateArrayRecursive(DELETE_RECORDS_LIMIT, [], params.records);
                  requests = separatedRecords.map(function (records) {
                    return {
                      method: "DELETE",
                      endpointName: "records",
                      payload: {
                        app: params.app,
                        ids: records.map(function (record) {
                          return record.id;
                        }),
                        revisions: records.map(function (record) {
                          return record.revision;
                        })
                      }
                    };
                  });
                  _context18.next = 4;
                  return this.bulkRequestClient.send({
                    requests: requests
                  });

                case 4:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18, this);
        }));

        function deleteAllRecordsWithBulkRequest(_x28) {
          return _deleteAllRecordsWithBulkRequest.apply(this, arguments);
        }

        return deleteAllRecordsWithBulkRequest;
      }()
    }, {
      key: "separateArrayRecursive",
      value: function separateArrayRecursive(size, separated, array) {
        var chunk = array.slice(0, size);

        if (chunk.length === 0) {
          return separated;
        }

        return this.separateArrayRecursive(size, [].concat(_toConsumableArray(separated), [chunk]), array.slice(size));
      }
    }, {
      key: "addRecordComment",
      value: function addRecordComment(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record/comment"
        });
        return this.client.post(path, params);
      }
    }, {
      key: "deleteRecordComment",
      value: function deleteRecordComment(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record/comment"
        });
        return this.client["delete"](path, params);
      }
    }, {
      key: "getRecordComments",
      value: function getRecordComments(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record/comments"
        });
        return this.client.get(path, params);
      }
    }, {
      key: "updateRecordAssignees",
      value: function updateRecordAssignees(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record/assignees"
        });
        return this.client.put(path, params);
      }
    }, {
      key: "updateRecordStatus",
      value: function updateRecordStatus(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "record/status"
        });
        return this.client.put(path, params);
      }
    }, {
      key: "updateRecordsStatus",
      value: function updateRecordsStatus(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "records/status"
        });
        return this.client.put(path, params);
      }
    }, {
      key: "buildPathWithGuestSpaceId",
      value: function buildPathWithGuestSpaceId(params) {
        return buildPath(_objectSpread2(_objectSpread2({}, params), {}, {
          guestSpaceId: this.guestSpaceId
        }));
      }
    }]);

    return RecordClient;
  }();

  var browser$1 = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' ? self.FormData : window.FormData;

  var FileClient = /*#__PURE__*/function () {
    function FileClient(client, guestSpaceId) {
      _classCallCheck(this, FileClient);

      this.client = client;
      this.guestSpaceId = guestSpaceId;
    }

    _createClass(FileClient, [{
      key: "uploadFile",
      value: function () {
        var _uploadFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {
          var path, formData, _yield$platformDeps$r, name, data, _params$file, _name, _data;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  path = this.buildPathWithGuestSpaceId({
                    endpointName: "file"
                  });
                  formData = new browser$1();

                  if (!("path" in params.file)) {
                    _context.next = 19;
                    break;
                  }

                  _context.prev = 3;
                  _context.next = 6;
                  return platformDeps.readFileFromPath(params.file.path);

                case 6:
                  _yield$platformDeps$r = _context.sent;
                  name = _yield$platformDeps$r.name;
                  data = _yield$platformDeps$r.data;
                  formData.append("file", data, name);
                  _context.next = 17;
                  break;

                case 12:
                  _context.prev = 12;
                  _context.t0 = _context["catch"](3);

                  if (!(_context.t0 instanceof UnsupportedPlatformError)) {
                    _context.next = 16;
                    break;
                  }

                  throw new Error("uploadFile doesn't allow to accept a file path in ".concat(_context.t0.platform, " environment."));

                case 16:
                  throw _context.t0;

                case 17:
                  _context.next = 21;
                  break;

                case 19:
                  _params$file = params.file, _name = _params$file.name, _data = _params$file.data;
                  formData.append("file", platformDeps.buildFormDataValue(_data), _name);

                case 21:
                  return _context.abrupt("return", this.client.postData(path, formData));

                case 22:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[3, 12]]);
        }));

        function uploadFile(_x) {
          return _uploadFile.apply(this, arguments);
        }

        return uploadFile;
      }()
    }, {
      key: "downloadFile",
      value: function downloadFile(params) {
        var path = this.buildPathWithGuestSpaceId({
          endpointName: "file"
        });
        return this.client.getData(path, params);
      }
    }, {
      key: "buildPathWithGuestSpaceId",
      value: function buildPathWithGuestSpaceId(params) {
        return buildPath(_objectSpread2(_objectSpread2({}, params), {}, {
          guestSpaceId: this.guestSpaceId
        }));
      }
    }]);

    return FileClient;
  }();

  var axios$2 = {exports: {}};

  var bind$5 = function bind(fn, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);

      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      return fn.apply(thisArg, args);
    };
  };

  var bind$4 = bind$5; // utils is a library of generic helper functions non-specific to axios

  var toString = Object.prototype.toString;
  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Array, otherwise false
   */

  function isArray$4(val) {
    return Array.isArray(val);
  }
  /**
   * Determine if a value is undefined
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if the value is undefined, otherwise false
   */


  function isUndefined(val) {
    return typeof val === 'undefined';
  }
  /**
   * Determine if a value is a Buffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Buffer, otherwise false
   */


  function isBuffer$1(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
  }
  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */


  function isArrayBuffer(val) {
    return toString.call(val) === '[object ArrayBuffer]';
  }
  /**
   * Determine if a value is a FormData
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an FormData, otherwise false
   */


  function isFormData(val) {
    return toString.call(val) === '[object FormData]';
  }
  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */


  function isArrayBufferView(val) {
    var result;

    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }

    return result;
  }
  /**
   * Determine if a value is a String
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a String, otherwise false
   */


  function isString$1(val) {
    return typeof val === 'string';
  }
  /**
   * Determine if a value is a Number
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Number, otherwise false
   */


  function isNumber$1(val) {
    return typeof val === 'number';
  }
  /**
   * Determine if a value is an Object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Object, otherwise false
   */


  function isObject(val) {
    return val !== null && _typeof(val) === 'object';
  }
  /**
   * Determine if a value is a plain Object
   *
   * @param {Object} val The value to test
   * @return {boolean} True if value is a plain Object, otherwise false
   */


  function isPlainObject(val) {
    if (toString.call(val) !== '[object Object]') {
      return false;
    }

    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
  }
  /**
   * Determine if a value is a Date
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Date, otherwise false
   */


  function isDate$1(val) {
    return toString.call(val) === '[object Date]';
  }
  /**
   * Determine if a value is a File
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a File, otherwise false
   */


  function isFile(val) {
    return toString.call(val) === '[object File]';
  }
  /**
   * Determine if a value is a Blob
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Blob, otherwise false
   */


  function isBlob(val) {
    return toString.call(val) === '[object Blob]';
  }
  /**
   * Determine if a value is a Function
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */


  function isFunction(val) {
    return toString.call(val) === '[object Function]';
  }
  /**
   * Determine if a value is a Stream
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Stream, otherwise false
   */


  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }
  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */


  function isURLSearchParams(val) {
    return toString.call(val) === '[object URLSearchParams]';
  }
  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   * @returns {String} The String freed of excess whitespace
   */


  function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
  }
  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   */


  function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
      return false;
    }

    return typeof window !== 'undefined' && typeof document !== 'undefined';
  }
  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   */


  function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    } // Force an array if not already something iterable


    if (_typeof(obj) !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }

    if (isArray$4(obj)) {
      // Iterate over array values
      for (var i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Iterate over object keys
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }
  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   * @returns {Object} Result of all merge properties
   */


  function
    /* obj1, obj2, obj3, ... */
  merge$1() {
    var result = {};

    function assignValue(val, key) {
      if (isPlainObject(result[key]) && isPlainObject(val)) {
        result[key] = merge$1(result[key], val);
      } else if (isPlainObject(val)) {
        result[key] = merge$1({}, val);
      } else if (isArray$4(val)) {
        result[key] = val.slice();
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }

    return result;
  }
  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   * @return {Object} The resulting value of object a
   */


  function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
      if (thisArg && typeof val === 'function') {
        a[key] = bind$4(val, thisArg);
      } else {
        a[key] = val;
      }
    });
    return a;
  }
  /**
   * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
   *
   * @param {string} content with BOM
   * @return {string} content value without BOM
   */


  function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) {
      content = content.slice(1);
    }

    return content;
  }

  var utils$h = {
    isArray: isArray$4,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer$1,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString$1,
    isNumber: isNumber$1,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate$1,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge$1,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
  };

  var utils$g = utils$h;

  function encode$2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
  }
  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @returns {string} The formatted url
   */


  var buildURL$2 = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }

    var serializedParams;

    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils$g.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];
      utils$g.forEach(params, function serialize(val, key) {
        if (val === null || typeof val === 'undefined') {
          return;
        }

        if (utils$g.isArray(val)) {
          key = key + '[]';
        } else {
          val = [val];
        }

        utils$g.forEach(val, function parseValue(v) {
          if (utils$g.isDate(v)) {
            v = v.toISOString();
          } else if (utils$g.isObject(v)) {
            v = JSON.stringify(v);
          }

          parts.push(encode$2(key) + '=' + encode$2(v));
        });
      });
      serializedParams = parts.join('&');
    }

    if (serializedParams) {
      var hashmarkIndex = url.indexOf('#');

      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }

      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  };

  var utils$f = utils$h;

  function InterceptorManager$1() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */


  InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled: fulfilled,
      rejected: rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  };
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   */


  InterceptorManager$1.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   */


  InterceptorManager$1.prototype.forEach = function forEach(fn) {
    utils$f.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  };

  var InterceptorManager_1 = InterceptorManager$1;

  var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js
  function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
  }

  function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
  }

  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;

  if (typeof global$1.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
  }

  if (typeof global$1.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
      //normal enviroments in sane situations
      return setTimeout(fun, 0);
    } // if setTimeout wasn't available but was latter defined


    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
      cachedSetTimeout = setTimeout;
      return setTimeout(fun, 0);
    }

    try {
      // when when somebody has screwed with setTimeout but no I.E. maddness
      return cachedSetTimeout(fun, 0);
    } catch (e) {
      try {
        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
        return cachedSetTimeout.call(null, fun, 0);
      } catch (e) {
        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
        return cachedSetTimeout.call(this, fun, 0);
      }
    }
  }

  function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
      //normal enviroments in sane situations
      return clearTimeout(marker);
    } // if clearTimeout wasn't available but was latter defined


    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
      cachedClearTimeout = clearTimeout;
      return clearTimeout(marker);
    }

    try {
      // when when somebody has screwed with setTimeout but no I.E. maddness
      return cachedClearTimeout(marker);
    } catch (e) {
      try {
        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
        return cachedClearTimeout.call(null, marker);
      } catch (e) {
        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
        return cachedClearTimeout.call(this, marker);
      }
    }
  }

  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
    if (!draining || !currentQueue) {
      return;
    }

    draining = false;

    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }

    if (queue.length) {
      drainQueue();
    }
  }

  function drainQueue() {
    if (draining) {
      return;
    }

    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;

    while (len) {
      currentQueue = queue;
      queue = [];

      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }

      queueIndex = -1;
      len = queue.length;
    }

    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
  }

  function nextTick(fun) {
    var args = new Array(arguments.length - 1);

    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }

    queue.push(new Item(fun, args));

    if (queue.length === 1 && !draining) {
      runTimeout(drainQueue);
    }
  } // v8 likes predictible objects

  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }

  Item.prototype.run = function () {
    this.fun.apply(null, this.array);
  };

  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version$1 = ''; // empty string to avoid regexp issues

  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;
  function binding(name) {
    throw new Error('process.binding is not supported');
  }
  function cwd() {
    return '/';
  }
  function chdir(dir) {
    throw new Error('process.chdir is not supported');
  }
  function umask() {
    return 0;
  } // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

  var performance = global$1.performance || {};

  var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
    return new Date().getTime();
  }; // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime


  function hrtime(previousTimestamp) {
    var clocktime = performanceNow.call(performance) * 1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor(clocktime % 1 * 1e9);

    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];

      if (nanoseconds < 0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }

    return [seconds, nanoseconds];
  }
  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }
  var process = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version$1,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var utils$e = utils$h;

  var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
    utils$e.forEach(headers, function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    });
  };

  /**
   * Update an Error with the specified config, error code, and response.
   *
   * @param {Error} error The error to update.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The error.
   */


  var enhanceError$2 = function enhanceError(error, config, code, request, response) {
    error.config = config;

    if (code) {
      error.code = code;
    }

    error.request = request;
    error.response = response;
    error.isAxiosError = true;

    error.toJSON = function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: this.config,
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    };

    return error;
  };

  var transitional = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  var enhanceError$1 = enhanceError$2;
  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The created error.
   */

  var createError$2 = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError$1(error, config, code, request, response);
  };

  var createError$1 = createError$2;
  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   */

  var settle$1 = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;

    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError$1('Request failed with status code ' + response.status, response.config, null, response.request, response));
    }
  };

  var utils$d = utils$h;
  var cookies$1 = utils$d.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
  function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils$d.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils$d.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils$d.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },
      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  }() : // Non standard browser env (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() {
        return null;
      },
      remove: function remove() {}
    };
  }();

  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */


  var isAbsoluteURL$1 = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  };

  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   * @returns {string} The combined URL
   */


  var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
  };

  var isAbsoluteURL = isAbsoluteURL$1;
  var combineURLs = combineURLs$1;
  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   * @returns {string} The combined full path
   */

  var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }

    return requestedURL;
  };

  var utils$c = utils$h; // Headers whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers

  var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} headers Headers needing to be parsed
   * @returns {Object} Headers parsed into an object
   */

  var parseHeaders$1 = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;

    if (!headers) {
      return parsed;
    }

    utils$c.forEach(headers.split('\n'), function parser(line) {
      i = line.indexOf(':');
      key = utils$c.trim(line.substr(0, i)).toLowerCase();
      val = utils$c.trim(line.substr(i + 1));

      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }

        if (key === 'set-cookie') {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      }
    });
    return parsed;
  };

  var utils$b = utils$h;
  var isURLSameOrigin$1 = utils$b.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */

    return function isURLSameOrigin(requestURL) {
      var parsed = utils$b.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }() : // Non standard browser envs (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }();

  /**
   * A `Cancel` is an object that is thrown when an operation is canceled.
   *
   * @class
   * @param {string=} message The message.
   */


  function Cancel$3(message) {
    this.message = message;
  }

  Cancel$3.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
  };

  Cancel$3.prototype.__CANCEL__ = true;
  var Cancel_1 = Cancel$3;

  var utils$a = utils$h;
  var settle = settle$1;
  var cookies = cookies$1;
  var buildURL$1 = buildURL$2;
  var buildFullPath = buildFullPath$1;
  var parseHeaders = parseHeaders$1;
  var isURLSameOrigin = isURLSameOrigin$1;
  var createError = createError$2;
  var transitionalDefaults$1 = transitional;
  var Cancel$2 = Cancel_1;

  var xhr = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;
      var responseType = config.responseType;
      var onCanceled;

      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }

        if (config.signal) {
          config.signal.removeEventListener('abort', onCanceled);
        }
      }

      if (utils$a.isFormData(requestData)) {
        delete requestHeaders['Content-Type']; // Let the browser set it
      }

      var request = new XMLHttpRequest(); // HTTP basic authentication

      if (config.auth) {
        var username = config.auth.username || '';
        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
      }

      var fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

      request.timeout = config.timeout;

      function onloadend() {
        if (!request) {
          return;
        } // Prepare the response


        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
        var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
        var response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config: config,
          request: request
        };
        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response); // Clean up request

        request = null;
      }

      if ('onloadend' in request) {
        // Use onloadend if available
        request.onloadend = onloadend;
      } else {
        // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          } // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request


          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          } // readystate handler is calling before onerror or ontimeout handlers,
          // so we should call onloadend on the next 'tick'


          setTimeout(onloadend);
        };
      } // Handle browser request cancellation (as opposed to a manual cancellation)


      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

        request = null;
      }; // Handle low level network errors


      request.onerror = function handleError() {
        // Real errors are hidden from us by the browser
        // onerror should only fire if it's a network error
        reject(createError('Network Error', config, null, request)); // Clean up request

        request = null;
      }; // Handle timeout


      request.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
        var transitional = config.transitional || transitionalDefaults$1;

        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }

        reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request)); // Clean up request

        request = null;
      }; // Add xsrf header
      // This is only done if running in a standard browser environment.
      // Specifically not if we're in a web worker, or react-native.


      if (utils$a.isStandardBrowserEnv()) {
        // Add xsrf header
        var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      } // Add headers to the request


      if ('setRequestHeader' in request) {
        utils$a.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
            // Remove Content-Type if data is undefined
            delete requestHeaders[key];
          } else {
            // Otherwise add header to the request
            request.setRequestHeader(key, val);
          }
        });
      } // Add withCredentials to request if needed


      if (!utils$a.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      } // Add responseType to request if needed


      if (responseType && responseType !== 'json') {
        request.responseType = config.responseType;
      } // Handle progress if needed


      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', config.onDownloadProgress);
      } // Not all browsers support upload events


      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', config.onUploadProgress);
      }

      if (config.cancelToken || config.signal) {
        // Handle cancellation
        // eslint-disable-next-line func-names
        onCanceled = function onCanceled(cancel) {
          if (!request) {
            return;
          }

          reject(!cancel || cancel && cancel.type ? new Cancel$2('canceled') : cancel);
          request.abort();
          request = null;
        };

        config.cancelToken && config.cancelToken.subscribe(onCanceled);

        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
        }
      }

      if (!requestData) {
        requestData = null;
      } // Send the request


      request.send(requestData);
    });
  };

  var utils$9 = utils$h;
  var normalizeHeaderName = normalizeHeaderName$1;
  var enhanceError = enhanceError$2;
  var transitionalDefaults = transitional;
  var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };

  function setContentTypeIfUnset(headers, value) {
    if (!utils$9.isUndefined(headers) && utils$9.isUndefined(headers['Content-Type'])) {
      headers['Content-Type'] = value;
    }
  }

  function getDefaultAdapter() {
    var adapter;

    if (typeof XMLHttpRequest !== 'undefined') {
      // For browsers use XHR adapter
      adapter = xhr;
    } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
      // For node use HTTP adapter
      adapter = xhr;
    }

    return adapter;
  }

  function stringifySafely(rawValue, parser, encoder) {
    if (utils$9.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils$9.trim(rawValue);
      } catch (e) {
        if (e.name !== 'SyntaxError') {
          throw e;
        }
      }
    }

    return (encoder || JSON.stringify)(rawValue);
  }

  var defaults$5 = {
    transitional: transitionalDefaults,
    adapter: getDefaultAdapter(),
    transformRequest: [function transformRequest(data, headers) {
      normalizeHeaderName(headers, 'Accept');
      normalizeHeaderName(headers, 'Content-Type');

      if (utils$9.isFormData(data) || utils$9.isArrayBuffer(data) || utils$9.isBuffer(data) || utils$9.isStream(data) || utils$9.isFile(data) || utils$9.isBlob(data)) {
        return data;
      }

      if (utils$9.isArrayBufferView(data)) {
        return data.buffer;
      }

      if (utils$9.isURLSearchParams(data)) {
        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
        return data.toString();
      }

      if (utils$9.isObject(data) || headers && headers['Content-Type'] === 'application/json') {
        setContentTypeIfUnset(headers, 'application/json');
        return stringifySafely(data);
      }

      return data;
    }],
    transformResponse: [function transformResponse(data) {
      var transitional = this.transitional || defaults$5.transitional;
      var silentJSONParsing = transitional && transitional.silentJSONParsing;
      var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
      var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

      if (strictJSONParsing || forcedJSONParsing && utils$9.isString(data) && data.length) {
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === 'SyntaxError') {
              throw enhanceError(e, this, 'E_JSON_PARSE');
            }

            throw e;
          }
        }
      }

      return data;
    }],

    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      }
    }
  };
  utils$9.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
    defaults$5.headers[method] = {};
  });
  utils$9.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    defaults$5.headers[method] = utils$9.merge(DEFAULT_CONTENT_TYPE);
  });
  var defaults_1 = defaults$5;

  var utils$8 = utils$h;
  var defaults$4 = defaults_1;
  /**
   * Transform the data for a request or a response
   *
   * @param {Object|String} data The data to be transformed
   * @param {Array} headers The headers for the request or response
   * @param {Array|Function} fns A single function or Array of functions
   * @returns {*} The resulting transformed data
   */

  var transformData$1 = function transformData(data, headers, fns) {
    var context = this || defaults$4;
    /*eslint no-param-reassign:0*/

    utils$8.forEach(fns, function transform(fn) {
      data = fn.call(context, data, headers);
    });
    return data;
  };

  var isCancel$1 = function isCancel(value) {
    return !!(value && value.__CANCEL__);
  };

  var utils$7 = utils$h;
  var transformData = transformData$1;
  var isCancel = isCancel$1;
  var defaults$3 = defaults_1;
  var Cancel$1 = Cancel_1;
  /**
   * Throws a `Cancel` if cancellation has been requested.
   */

  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }

    if (config.signal && config.signal.aborted) {
      throw new Cancel$1('canceled');
    }
  }
  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   * @returns {Promise} The Promise to be fulfilled
   */


  var dispatchRequest$1 = function dispatchRequest(config) {
    throwIfCancellationRequested(config); // Ensure headers exist

    config.headers = config.headers || {}; // Transform request data

    config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers

    config.headers = utils$7.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils$7.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
      delete config.headers[method];
    });
    var adapter = config.adapter || defaults$3.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config); // Transform response data

      response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config); // Transform response data

        if (reason && reason.response) {
          reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
      }

      return Promise.reject(reason);
    });
  };

  var utils$6 = utils$h;
  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   * @returns {Object} New object resulting from merging config2 to config1
   */

  var mergeConfig$2 = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};

    function getMergedValue(target, source) {
      if (utils$6.isPlainObject(target) && utils$6.isPlainObject(source)) {
        return utils$6.merge(target, source);
      } else if (utils$6.isPlainObject(source)) {
        return utils$6.merge({}, source);
      } else if (utils$6.isArray(source)) {
        return source.slice();
      }

      return source;
    } // eslint-disable-next-line consistent-return


    function mergeDeepProperties(prop) {
      if (!utils$6.isUndefined(config2[prop])) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (!utils$6.isUndefined(config1[prop])) {
        return getMergedValue(undefined, config1[prop]);
      }
    } // eslint-disable-next-line consistent-return


    function valueFromConfig2(prop) {
      if (!utils$6.isUndefined(config2[prop])) {
        return getMergedValue(undefined, config2[prop]);
      }
    } // eslint-disable-next-line consistent-return


    function defaultToConfig2(prop) {
      if (!utils$6.isUndefined(config2[prop])) {
        return getMergedValue(undefined, config2[prop]);
      } else if (!utils$6.isUndefined(config1[prop])) {
        return getMergedValue(undefined, config1[prop]);
      }
    } // eslint-disable-next-line consistent-return


    function mergeDirectKeys(prop) {
      if (prop in config2) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (prop in config1) {
        return getMergedValue(undefined, config1[prop]);
      }
    }

    var mergeMap = {
      'url': valueFromConfig2,
      'method': valueFromConfig2,
      'data': valueFromConfig2,
      'baseURL': defaultToConfig2,
      'transformRequest': defaultToConfig2,
      'transformResponse': defaultToConfig2,
      'paramsSerializer': defaultToConfig2,
      'timeout': defaultToConfig2,
      'timeoutMessage': defaultToConfig2,
      'withCredentials': defaultToConfig2,
      'adapter': defaultToConfig2,
      'responseType': defaultToConfig2,
      'xsrfCookieName': defaultToConfig2,
      'xsrfHeaderName': defaultToConfig2,
      'onUploadProgress': defaultToConfig2,
      'onDownloadProgress': defaultToConfig2,
      'decompress': defaultToConfig2,
      'maxContentLength': defaultToConfig2,
      'maxBodyLength': defaultToConfig2,
      'transport': defaultToConfig2,
      'httpAgent': defaultToConfig2,
      'httpsAgent': defaultToConfig2,
      'cancelToken': defaultToConfig2,
      'socketPath': defaultToConfig2,
      'responseEncoding': defaultToConfig2,
      'validateStatus': mergeDirectKeys
    };
    utils$6.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
      var merge = mergeMap[prop] || mergeDeepProperties;
      var configValue = merge(prop);
      utils$6.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  };

  var data = {
    "version": "0.26.1"
  };

  var VERSION$1 = data.version;
  var validators$1 = {}; // eslint-disable-next-line func-names

  ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
    validators$1[type] = function validator(thing) {
      return _typeof(thing) === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  });
  var deprecatedWarnings = {};
  /**
   * Transitional option validator
   * @param {function|boolean?} validator - set to false if the transitional option has been removed
   * @param {string?} version - deprecated version / removed since version
   * @param {string?} message - some message with additional info
   * @returns {function}
   */

  validators$1.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
    } // eslint-disable-next-line func-names


    return function (value, opt, opts) {
      if (validator === false) {
        throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
      }

      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console

        console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
      }

      return validator ? validator(value, opt, opts) : true;
    };
  };
  /**
   * Assert object's properties type
   * @param {object} options
   * @param {object} schema
   * @param {boolean?} allowUnknown
   */


  function assertOptions(options, schema, allowUnknown) {
    if (_typeof(options) !== 'object') {
      throw new TypeError('options must be an object');
    }

    var keys = Object.keys(options);
    var i = keys.length;

    while (i-- > 0) {
      var opt = keys[i];
      var validator = schema[opt];

      if (validator) {
        var value = options[opt];
        var result = value === undefined || validator(value, opt, options);

        if (result !== true) {
          throw new TypeError('option ' + opt + ' must be ' + result);
        }

        continue;
      }

      if (allowUnknown !== true) {
        throw Error('Unknown option ' + opt);
      }
    }
  }

  var validator$1 = {
    assertOptions: assertOptions,
    validators: validators$1
  };

  var utils$5 = utils$h;
  var buildURL = buildURL$2;
  var InterceptorManager = InterceptorManager_1;
  var dispatchRequest = dispatchRequest$1;
  var mergeConfig$1 = mergeConfig$2;
  var validator = validator$1;
  var validators = validator.validators;
  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   */

  function Axios$1(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {Object} config The config specific for this request (merged with this.defaults)
   */


  Axios$1.prototype.request = function request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig$1(this.defaults, config); // Set config.method

    if (config.method) {
      config.method = config.method.toLowerCase();
    } else if (this.defaults.method) {
      config.method = this.defaults.method.toLowerCase();
    } else {
      config.method = 'get';
    }

    var transitional = config.transitional;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    } // filter out skipped interceptors


    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;

    if (!synchronousRequestInterceptors) {
      var chain = [dispatchRequest, undefined];
      Array.prototype.unshift.apply(chain, requestInterceptorChain);
      chain = chain.concat(responseInterceptorChain);
      promise = Promise.resolve(config);

      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    }

    var newConfig = config;

    while (requestInterceptorChain.length) {
      var onFulfilled = requestInterceptorChain.shift();
      var onRejected = requestInterceptorChain.shift();

      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected(error);
        break;
      }
    }

    try {
      promise = dispatchRequest(newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    while (responseInterceptorChain.length) {
      promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    }

    return promise;
  };

  Axios$1.prototype.getUri = function getUri(config) {
    config = mergeConfig$1(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
  }; // Provide aliases for supported request methods


  utils$5.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios$1.prototype[method] = function (url, config) {
      return this.request(mergeConfig$1(config || {}, {
        method: method,
        url: url,
        data: (config || {}).data
      }));
    };
  });
  utils$5.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/
    Axios$1.prototype[method] = function (url, data, config) {
      return this.request(mergeConfig$1(config || {}, {
        method: method,
        url: url,
        data: data
      }));
    };
  });
  var Axios_1 = Axios$1;

  var Cancel = Cancel_1;
  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @class
   * @param {Function} executor The executor function.
   */

  function CancelToken(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    var token = this; // eslint-disable-next-line func-names

    this.promise.then(function (cancel) {
      if (!token._listeners) return;
      var i;
      var l = token._listeners.length;

      for (i = 0; i < l; i++) {
        token._listeners[i](cancel);
      }

      token._listeners = null;
    }); // eslint-disable-next-line func-names

    this.promise.then = function (onfulfilled) {
      var _resolve; // eslint-disable-next-line func-names


      var promise = new Promise(function (resolve) {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new Cancel(message);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `Cancel` if cancellation has been requested.
   */


  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };
  /**
   * Subscribe to the cancel signal
   */


  CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  };
  /**
   * Unsubscribe from the cancel signal
   */


  CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }

    var index = this._listeners.indexOf(listener);

    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  };
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */


  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token: token,
      cancel: cancel
    };
  };

  var CancelToken_1 = CancelToken;

  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   * @returns {Function}
   */


  var spread = function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };

  var utils$4 = utils$h;
  /**
   * Determines whether the payload is an error thrown by Axios
   *
   * @param {*} payload The value to test
   * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
   */

  var isAxiosError = function isAxiosError(payload) {
    return utils$4.isObject(payload) && payload.isAxiosError === true;
  };

  var utils$3 = utils$h;
  var bind$3 = bind$5;
  var Axios = Axios_1;
  var mergeConfig = mergeConfig$2;
  var defaults$2 = defaults_1;
  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   * @return {Axios} A new instance of Axios
   */

  function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind$3(Axios.prototype.request, context); // Copy axios.prototype to instance

    utils$3.extend(instance, Axios.prototype, context); // Copy context to instance

    utils$3.extend(instance, context); // Factory for creating new instances

    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };

    return instance;
  } // Create the default instance to be exported


  var axios$1 = createInstance(defaults$2); // Expose Axios class to allow class inheritance

  axios$1.Axios = Axios; // Expose Cancel & CancelToken

  axios$1.Cancel = Cancel_1;
  axios$1.CancelToken = CancelToken_1;
  axios$1.isCancel = isCancel$1;
  axios$1.VERSION = data.version; // Expose all/spread

  axios$1.all = function all(promises) {
    return Promise.all(promises);
  };

  axios$1.spread = spread; // Expose isAxiosError

  axios$1.isAxiosError = isAxiosError;
  axios$2.exports = axios$1; // Allow use of default import syntax in TypeScript

  axios$2.exports.default = axios$1;

  var axios = axios$2.exports;

  var AxiosClient = /*#__PURE__*/function () {
    function AxiosClient(_ref) {
      var responseHandler = _ref.responseHandler,
          requestConfigBuilder = _ref.requestConfigBuilder;

      _classCallCheck(this, AxiosClient);

      this.responseHandler = responseHandler;
      this.requestConfigBuilder = requestConfigBuilder;
    }

    _createClass(AxiosClient, [{
      key: "get",
      value: function () {
        var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(path, params) {
          var requestConfig;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.requestConfigBuilder.build("get", path, params);

                case 2:
                  requestConfig = _context.sent;
                  _context.next = 5;
                  return this.sendRequest(requestConfig);

                case 5:
                  return _context.abrupt("return", _context.sent);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function get(_x, _x2) {
          return _get.apply(this, arguments);
        }

        return get;
      }()
    }, {
      key: "getData",
      value: function () {
        var _getData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(path, params) {
          var requestConfig;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.requestConfigBuilder.build("get", path, params, {
                    responseType: "arraybuffer"
                  });

                case 2:
                  requestConfig = _context2.sent;
                  _context2.next = 5;
                  return this.sendRequest(requestConfig);

                case 5:
                  return _context2.abrupt("return", _context2.sent);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function getData(_x3, _x4) {
          return _getData.apply(this, arguments);
        }

        return getData;
      }()
    }, {
      key: "post",
      value: function () {
        var _post = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(path, params) {
          var requestConfig;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.requestConfigBuilder.build("post", path, params);

                case 2:
                  requestConfig = _context3.sent;
                  _context3.next = 5;
                  return this.sendRequest(requestConfig);

                case 5:
                  return _context3.abrupt("return", _context3.sent);

                case 6:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function post(_x5, _x6) {
          return _post.apply(this, arguments);
        }

        return post;
      }()
    }, {
      key: "postData",
      value: function () {
        var _postData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(path, formData) {
          var requestConfig;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.requestConfigBuilder.build("post", path, formData);

                case 2:
                  requestConfig = _context4.sent;
                  _context4.next = 5;
                  return this.sendRequest(requestConfig);

                case 5:
                  return _context4.abrupt("return", _context4.sent);

                case 6:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function postData(_x7, _x8) {
          return _postData.apply(this, arguments);
        }

        return postData;
      }()
    }, {
      key: "put",
      value: function () {
        var _put = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(path, params) {
          var requestConfig;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.requestConfigBuilder.build("put", path, params);

                case 2:
                  requestConfig = _context5.sent;
                  _context5.next = 5;
                  return this.sendRequest(requestConfig);

                case 5:
                  return _context5.abrupt("return", _context5.sent);

                case 6:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function put(_x9, _x10) {
          return _put.apply(this, arguments);
        }

        return put;
      }()
    }, {
      key: "delete",
      value: function () {
        var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(path, params) {
          var requestConfig;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this.requestConfigBuilder.build("delete", path, params);

                case 2:
                  requestConfig = _context6.sent;
                  _context6.next = 5;
                  return this.sendRequest(requestConfig);

                case 5:
                  return _context6.abrupt("return", _context6.sent);

                case 6:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function _delete(_x11, _x12) {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }, {
      key: "sendRequest",
      value: function sendRequest(requestConfig) {
        return this.responseHandler.handle( // eslint-disable-next-line new-cap
        axios(_objectSpread2(_objectSpread2({}, requestConfig), {}, {
          maxBodyLength: Infinity,
          maxContentLength: Infinity
        })));
      }
    }]);

    return AxiosClient;
  }();

  var $ = _export;
  var uncurryThis$2 = functionUncurryThis;
  var IndexedObject = indexedObject;
  var toIndexedObject = toIndexedObject$6;
  var arrayMethodIsStrict = arrayMethodIsStrict$4;
  var un$Join = uncurryThis$2([].join);
  var ES3_STRINGS = IndexedObject != Object;
  var STRICT_METHOD = arrayMethodIsStrict('join', ','); // `Array.prototype.join` method
  // https://tc39.es/ecma262/#sec-array.prototype.join

  $({
    target: 'Array',
    proto: true,
    forced: ES3_STRINGS || !STRICT_METHOD
  }, {
    join: function join(separator) {
      return un$Join(toIndexedObject(this), separator === undefined ? ',' : separator);
    }
  });

  /* eslint complexity: [2, 18], max-statements: [2, 33] */


  var shams = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
      return false;
    }

    if (_typeof(Symbol.iterator) === 'symbol') {
      return true;
    }

    var obj = {};
    var sym = Symbol('test');
    var symObj = Object(sym);

    if (typeof sym === 'string') {
      return false;
    }

    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
      return false;
    }

    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
      return false;
    } // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


    var symVal = 42;
    obj[sym] = symVal;

    for (sym in obj) {
      return false;
    } // eslint-disable-line no-restricted-syntax


    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
      return false;
    }

    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }

    var syms = Object.getOwnPropertySymbols(obj);

    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }

    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }

    if (typeof Object.getOwnPropertyDescriptor === 'function') {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }

    return true;
  };

  var origSymbol = commonjsGlobal.Symbol;
  var hasSymbolSham = shams;

  var hasSymbols$2 = function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') {
      return false;
    }

    if (typeof Symbol !== 'function') {
      return false;
    }

    if (_typeof(origSymbol('foo')) !== 'symbol') {
      return false;
    }

    if (_typeof(Symbol('bar')) !== 'symbol') {
      return false;
    }

    return hasSymbolSham();
  };

  /* eslint no-invalid-this: 1 */


  var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
  var slice = Array.prototype.slice;
  var toStr$1 = Object.prototype.toString;
  var funcType = '[object Function]';

  var implementation$1 = function bind(that) {
    var target = this;

    if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }

    var args = slice.call(arguments, 1);
    var bound;

    var binder = function binder() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));

        if (Object(result) === result) {
          return result;
        }

        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];

    for (var i = 0; i < boundLength; i++) {
      boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
      var Empty = function Empty() {};

      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }

    return bound;
  };

  var implementation = implementation$1;
  var functionBind = Function.prototype.bind || implementation;

  var bind$2 = functionBind;
  var src = bind$2.call(Function.call, Object.prototype.hasOwnProperty);

  var undefined$2;
  var $SyntaxError$1 = SyntaxError;
  var $Function$1 = Function;
  var $TypeError$2 = TypeError; // eslint-disable-next-line consistent-return

  var getEvalledConstructor$1 = function getEvalledConstructor(expressionSyntax) {
    try {
      return $Function$1('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {}
  };

  var $gOPD$1 = Object.getOwnPropertyDescriptor;

  if ($gOPD$1) {
    try {
      $gOPD$1({}, '');
    } catch (e) {
      $gOPD$1 = null; // this is IE 8, which has a broken gOPD
    }
  }

  var throwTypeError$1 = function throwTypeError() {
    throw new $TypeError$2();
  };

  var ThrowTypeError$1 = $gOPD$1 ? function () {
    try {
      // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
      arguments.callee; // IE 8 does not throw here

      return throwTypeError$1;
    } catch (calleeThrows) {
      try {
        // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
        return $gOPD$1(arguments, 'callee').get;
      } catch (gOPDthrows) {
        return throwTypeError$1;
      }
    }
  }() : throwTypeError$1;
  var hasSymbols$1 = hasSymbols$2();

  var getProto$1 = Object.getPrototypeOf || function (x) {
    return x.__proto__;
  }; // eslint-disable-line no-proto


  var needsEval = {};
  var TypedArray$1 = typeof Uint8Array === 'undefined' ? undefined$2 : getProto$1(Uint8Array);
  var INTRINSICS$1 = {
    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined$2 : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$2 : ArrayBuffer,
    '%ArrayIteratorPrototype%': hasSymbols$1 ? getProto$1([][Symbol.iterator]()) : undefined$2,
    '%AsyncFromSyncIteratorPrototype%': undefined$2,
    '%AsyncFunction%': needsEval,
    '%AsyncGenerator%': needsEval,
    '%AsyncGeneratorFunction%': needsEval,
    '%AsyncIteratorPrototype%': needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? undefined$2 : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? undefined$2 : BigInt,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? undefined$2 : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': Error,
    '%eval%': eval,
    // eslint-disable-line no-eval
    '%EvalError%': EvalError,
    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$2 : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$2 : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$2 : FinalizationRegistry,
    '%Function%': $Function$1,
    '%GeneratorFunction%': needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$2 : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$2 : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$2 : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': hasSymbols$1 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$2,
    '%JSON%': (typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) === 'object' ? JSON : undefined$2,
    '%Map%': typeof Map === 'undefined' ? undefined$2 : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$1 ? undefined$2 : getProto$1(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': Object,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? undefined$2 : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? undefined$2 : Proxy,
    '%RangeError%': RangeError,
    '%ReferenceError%': ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? undefined$2 : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? undefined$2 : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$1 ? undefined$2 : getProto$1(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$2 : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': hasSymbols$1 ? getProto$1(''[Symbol.iterator]()) : undefined$2,
    '%Symbol%': hasSymbols$1 ? Symbol : undefined$2,
    '%SyntaxError%': $SyntaxError$1,
    '%ThrowTypeError%': ThrowTypeError$1,
    '%TypedArray%': TypedArray$1,
    '%TypeError%': $TypeError$2,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$2 : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$2 : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$2 : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$2 : Uint32Array,
    '%URIError%': URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$2 : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined$2 : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$2 : WeakSet
  };

  var doEval = function doEval(name) {
    var value;

    if (name === '%AsyncFunction%') {
      value = getEvalledConstructor$1('async function () {}');
    } else if (name === '%GeneratorFunction%') {
      value = getEvalledConstructor$1('function* () {}');
    } else if (name === '%AsyncGeneratorFunction%') {
      value = getEvalledConstructor$1('async function* () {}');
    } else if (name === '%AsyncGenerator%') {
      var fn = doEval('%AsyncGeneratorFunction%');

      if (fn) {
        value = fn.prototype;
      }
    } else if (name === '%AsyncIteratorPrototype%') {
      var gen = doEval('%AsyncGenerator%');

      if (gen) {
        value = getProto$1(gen.prototype);
      }
    }

    INTRINSICS$1[name] = value;
    return value;
  };

  var LEGACY_ALIASES$1 = {
    '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    '%ArrayPrototype%': ['Array', 'prototype'],
    '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    '%ArrayProto_values%': ['Array', 'prototype', 'values'],
    '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    '%BooleanPrototype%': ['Boolean', 'prototype'],
    '%DataViewPrototype%': ['DataView', 'prototype'],
    '%DatePrototype%': ['Date', 'prototype'],
    '%ErrorPrototype%': ['Error', 'prototype'],
    '%EvalErrorPrototype%': ['EvalError', 'prototype'],
    '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    '%FunctionPrototype%': ['Function', 'prototype'],
    '%Generator%': ['GeneratorFunction', 'prototype'],
    '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    '%JSONParse%': ['JSON', 'parse'],
    '%JSONStringify%': ['JSON', 'stringify'],
    '%MapPrototype%': ['Map', 'prototype'],
    '%NumberPrototype%': ['Number', 'prototype'],
    '%ObjectPrototype%': ['Object', 'prototype'],
    '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    '%PromisePrototype%': ['Promise', 'prototype'],
    '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    '%Promise_all%': ['Promise', 'all'],
    '%Promise_reject%': ['Promise', 'reject'],
    '%Promise_resolve%': ['Promise', 'resolve'],
    '%RangeErrorPrototype%': ['RangeError', 'prototype'],
    '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    '%RegExpPrototype%': ['RegExp', 'prototype'],
    '%SetPrototype%': ['Set', 'prototype'],
    '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    '%StringPrototype%': ['String', 'prototype'],
    '%SymbolPrototype%': ['Symbol', 'prototype'],
    '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    '%TypeErrorPrototype%': ['TypeError', 'prototype'],
    '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    '%URIErrorPrototype%': ['URIError', 'prototype'],
    '%WeakMapPrototype%': ['WeakMap', 'prototype'],
    '%WeakSetPrototype%': ['WeakSet', 'prototype']
  };
  var bind$1 = functionBind;
  var hasOwn$2 = src;
  var $concat$1 = bind$1.call(Function.call, Array.prototype.concat);
  var $spliceApply$1 = bind$1.call(Function.apply, Array.prototype.splice);
  var $replace$1 = bind$1.call(Function.call, String.prototype.replace);
  var $strSlice = bind$1.call(Function.call, String.prototype.slice);
  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

  var rePropName$1 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar$1 = /\\(\\)?/g;
  /** Used to match backslashes in property paths. */

  var stringToPath$1 = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);

    if (first === '%' && last !== '%') {
      throw new $SyntaxError$1('invalid intrinsic syntax, expected closing `%`');
    } else if (last === '%' && first !== '%') {
      throw new $SyntaxError$1('invalid intrinsic syntax, expected opening `%`');
    }

    var result = [];
    $replace$1(string, rePropName$1, function (match, number, quote, subString) {
      result[result.length] = quote ? $replace$1(subString, reEscapeChar$1, '$1') : number || match;
    });
    return result;
  };
  /* end adaptation */


  var getBaseIntrinsic$1 = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;

    if (hasOwn$2(LEGACY_ALIASES$1, intrinsicName)) {
      alias = LEGACY_ALIASES$1[intrinsicName];
      intrinsicName = '%' + alias[0] + '%';
    }

    if (hasOwn$2(INTRINSICS$1, intrinsicName)) {
      var value = INTRINSICS$1[intrinsicName];

      if (value === needsEval) {
        value = doEval(intrinsicName);
      }

      if (typeof value === 'undefined' && !allowMissing) {
        throw new $TypeError$2('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
      }

      return {
        alias: alias,
        name: intrinsicName,
        value: value
      };
    }

    throw new $SyntaxError$1('intrinsic ' + name + ' does not exist!');
  };

  var getIntrinsic$1 = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) {
      throw new $TypeError$2('intrinsic name must be a non-empty string');
    }

    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
      throw new $TypeError$2('"allowMissing" argument must be a boolean');
    }

    var parts = stringToPath$1(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = getBaseIntrinsic$1('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;

    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply$1(parts, $concat$1([0, 1], alias));
    }

    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);

      if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
        throw new $SyntaxError$1('property names with quotes must have matching quotes');
      }

      if (part === 'constructor' || !isOwn) {
        skipFurtherCaching = true;
      }

      intrinsicBaseName += '.' + part;
      intrinsicRealName = '%' + intrinsicBaseName + '%';

      if (hasOwn$2(INTRINSICS$1, intrinsicRealName)) {
        value = INTRINSICS$1[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError$2('base intrinsic for ' + name + ' exists, but the property is not available.');
          }

          return void undefined$2;
        }

        if ($gOPD$1 && i + 1 >= parts.length) {
          var desc = $gOPD$1(value, part);
          isOwn = !!desc; // By convention, when a data property is converted to an accessor
          // property to emulate a data property that does not suffer from
          // the override mistake, that accessor's getter is marked with
          // an `originalValue` property. Here, when we detect this, we
          // uphold the illusion by pretending to see that original data
          // property, i.e., returning the value rather than the getter
          // itself.

          if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn$2(value, part);
          value = value[part];
        }

        if (isOwn && !skipFurtherCaching) {
          INTRINSICS$1[intrinsicRealName] = value;
        }
      }
    }

    return value;
  };

  /* globals
  	AggregateError,
  	Atomics,
  	FinalizationRegistry,
  	SharedArrayBuffer,
  	WeakRef,
  */


  var undefined$1;
  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError$1 = TypeError; // eslint-disable-next-line consistent-return

  var getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {
    try {
      // eslint-disable-next-line no-new-func
      return Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {}
  };

  var $gOPD = Object.getOwnPropertyDescriptor;

  if ($gOPD) {
    try {
      $gOPD({}, '');
    } catch (e) {
      $gOPD = null; // this is IE 8, which has a broken gOPD
    }
  }

  var throwTypeError = function throwTypeError() {
    throw new $TypeError$1();
  };

  var ThrowTypeError = $gOPD ? function () {
    try {
      // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
      arguments.callee; // IE 8 does not throw here

      return throwTypeError;
    } catch (calleeThrows) {
      try {
        // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
        return $gOPD(arguments, 'callee').get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = hasSymbols$2();

  var getProto = Object.getPrototypeOf || function (x) {
    return x.__proto__;
  }; // eslint-disable-line no-proto


  var asyncGenFunction = getEvalledConstructor('async function* () {}');
  var asyncGenFunctionPrototype = asyncGenFunction ? asyncGenFunction.prototype : undefined$1;
  var asyncGenPrototype = asyncGenFunctionPrototype ? asyncGenFunctionPrototype.prototype : undefined$1;
  var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
    '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined$1,
    '%AsyncFromSyncIteratorPrototype%': undefined$1,
    '%AsyncFunction%': getEvalledConstructor('async function () {}'),
    '%AsyncGenerator%': asyncGenFunctionPrototype,
    '%AsyncGeneratorFunction%': asyncGenFunction,
    '%AsyncIteratorPrototype%': asyncGenPrototype ? getProto(asyncGenPrototype) : undefined$1,
    '%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': Error,
    '%eval%': eval,
    // eslint-disable-line no-eval
    '%EvalError%': EvalError,
    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
    '%Function%': $Function,
    '%GeneratorFunction%': getEvalledConstructor('function* () {}'),
    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    '%JSON%': (typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) === 'object' ? JSON : undefined$1,
    '%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': Object,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
    '%RangeError%': RangeError,
    '%ReferenceError%': ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined$1,
    '%Symbol%': hasSymbols ? Symbol : undefined$1,
    '%SyntaxError%': $SyntaxError,
    '%ThrowTypeError%': ThrowTypeError,
    '%TypedArray%': TypedArray,
    '%TypeError%': $TypeError$1,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
    '%URIError%': URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
  };
  var LEGACY_ALIASES = {
    '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    '%ArrayPrototype%': ['Array', 'prototype'],
    '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    '%ArrayProto_values%': ['Array', 'prototype', 'values'],
    '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    '%BooleanPrototype%': ['Boolean', 'prototype'],
    '%DataViewPrototype%': ['DataView', 'prototype'],
    '%DatePrototype%': ['Date', 'prototype'],
    '%ErrorPrototype%': ['Error', 'prototype'],
    '%EvalErrorPrototype%': ['EvalError', 'prototype'],
    '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    '%FunctionPrototype%': ['Function', 'prototype'],
    '%Generator%': ['GeneratorFunction', 'prototype'],
    '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    '%JSONParse%': ['JSON', 'parse'],
    '%JSONStringify%': ['JSON', 'stringify'],
    '%MapPrototype%': ['Map', 'prototype'],
    '%NumberPrototype%': ['Number', 'prototype'],
    '%ObjectPrototype%': ['Object', 'prototype'],
    '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    '%PromisePrototype%': ['Promise', 'prototype'],
    '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    '%Promise_all%': ['Promise', 'all'],
    '%Promise_reject%': ['Promise', 'reject'],
    '%Promise_resolve%': ['Promise', 'resolve'],
    '%RangeErrorPrototype%': ['RangeError', 'prototype'],
    '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    '%RegExpPrototype%': ['RegExp', 'prototype'],
    '%SetPrototype%': ['Set', 'prototype'],
    '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    '%StringPrototype%': ['String', 'prototype'],
    '%SymbolPrototype%': ['Symbol', 'prototype'],
    '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    '%TypeErrorPrototype%': ['TypeError', 'prototype'],
    '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    '%URIErrorPrototype%': ['URIError', 'prototype'],
    '%WeakMapPrototype%': ['WeakMap', 'prototype'],
    '%WeakSetPrototype%': ['WeakSet', 'prototype']
  };
  var bind = functionBind;
  var hasOwn$1 = src;
  var $concat = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace = bind.call(Function.call, String.prototype.replace);
  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  /** Used to match backslashes in property paths. */

  var stringToPath = function stringToPath(string) {
    var result = [];
    $replace(string, rePropName, function (match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
    });
    return result;
  };
  /* end adaptation */


  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;

    if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = '%' + alias[0] + '%';
    }

    if (hasOwn$1(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];

      if (typeof value === 'undefined' && !allowMissing) {
        throw new $TypeError$1('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
      }

      return {
        alias: alias,
        name: intrinsicName,
        value: value
      };
    }

    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
  };

  var getIntrinsic = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) {
      throw new $TypeError$1('intrinsic name must be a non-empty string');
    }

    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
      throw new $TypeError$1('"allowMissing" argument must be a boolean');
    }

    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;

    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }

    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];

      if (part === 'constructor' || !isOwn) {
        skipFurtherCaching = true;
      }

      intrinsicBaseName += '.' + part;
      intrinsicRealName = '%' + intrinsicBaseName + '%';

      if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;

          if (!allowMissing && !(part in value)) {
            throw new $TypeError$1('base intrinsic for ' + name + ' exists, but the property is not available.');
          } // By convention, when a data property is converted to an accessor
          // property to emulate a data property that does not suffer from
          // the override mistake, that accessor's getter is marked with
          // an `originalValue` property. Here, when we detect this, we
          // uphold the illusion by pretending to see that original data
          // property, i.e., returning the value rather than the getter
          // itself.


          if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn$1(value, part);
          value = value[part];
        }

        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }

    return value;
  };

  var callBind$1 = {exports: {}};

  (function (module) {

    var bind = functionBind;
    var GetIntrinsic = getIntrinsic;
    var $apply = GetIntrinsic('%Function.prototype.apply%');
    var $call = GetIntrinsic('%Function.prototype.call%');
    var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
    var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

    if ($defineProperty) {
      try {
        $defineProperty({}, 'a', {
          value: 1
        });
      } catch (e) {
        // IE 8 has a broken defineProperty
        $defineProperty = null;
      }
    }

    module.exports = function callBind() {
      return $reflectApply(bind, $call, arguments);
    };

    var applyBind = function applyBind() {
      return $reflectApply(bind, $apply, arguments);
    };

    if ($defineProperty) {
      $defineProperty(module.exports, 'apply', {
        value: applyBind
      });
    } else {
      module.exports.apply = applyBind;
    }
  })(callBind$1);

  var GetIntrinsic$1 = getIntrinsic;
  var callBind = callBind$1.exports;
  var $indexOf = callBind(GetIntrinsic$1('String.prototype.indexOf'));

  var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic$1(name, !!allowMissing);

    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
      return callBind(intrinsic);
    }

    return intrinsic;
  };

  var _nodeResolve_empty = {};

  var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': _nodeResolve_empty
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

  var hasMap = typeof Map === 'function' && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === 'function' && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var match = String.prototype.match;
  var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === 'function' ? Symbol.prototype.toString : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var inspectCustom = require$$0.custom;
  var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;

  var objectInspect = function inspect_(obj, options, depth, seen) {
    var opts = options || {};

    if (has$3(opts, 'quoteStyle') && opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double') {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }

    if (has$3(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }

    var customInspect = has$3(opts, 'customInspect') ? opts.customInspect : true;

    if (typeof customInspect !== 'boolean') {
      throw new TypeError('option "customInspect", if provided, must be `true` or `false`');
    }

    if (has$3(opts, 'indent') && opts.indent !== null && opts.indent !== '\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
    }

    if (typeof obj === 'undefined') {
      return 'undefined';
    }

    if (obj === null) {
      return 'null';
    }

    if (typeof obj === 'boolean') {
      return obj ? 'true' : 'false';
    }

    if (typeof obj === 'string') {
      return inspectString(obj, opts);
    }

    if (typeof obj === 'number') {
      if (obj === 0) {
        return Infinity / obj > 0 ? '0' : '-0';
      }

      return String(obj);
    }

    if (typeof obj === 'bigint') {
      return String(obj) + 'n';
    }

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;

    if (typeof depth === 'undefined') {
      depth = 0;
    }

    if (depth >= maxDepth && maxDepth > 0 && _typeof(obj) === 'object') {
      return isArray$3(obj) ? '[Array]' : '[Object]';
    }

    var indent = getIndent(opts, depth);

    if (typeof seen === 'undefined') {
      seen = [];
    } else if (indexOf(seen, obj) >= 0) {
      return '[Circular]';
    }

    function inspect(value, from, noIndent) {
      if (from) {
        seen = seen.slice();
        seen.push(from);
      }

      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };

        if (has$3(opts, 'quoteStyle')) {
          newOpts.quoteStyle = opts.quoteStyle;
        }

        return inspect_(value, newOpts, depth + 1, seen);
      }

      return inspect_(value, opts, depth + 1, seen);
    }

    if (typeof obj === 'function') {
      var name = nameOf(obj);
      var keys = arrObjKeys(obj, inspect);
      return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');
    }

    if (isSymbol(obj)) {
      var symString = symToString.call(obj);
      return _typeof(obj) === 'object' ? markBoxed(symString) : symString;
    }

    if (isElement(obj)) {
      var s = '<' + String(obj.nodeName).toLowerCase();
      var attrs = obj.attributes || [];

      for (var i = 0; i < attrs.length; i++) {
        s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
      }

      s += '>';

      if (obj.childNodes && obj.childNodes.length) {
        s += '...';
      }

      s += '</' + String(obj.nodeName).toLowerCase() + '>';
      return s;
    }

    if (isArray$3(obj)) {
      if (obj.length === 0) {
        return '[]';
      }

      var xs = arrObjKeys(obj, inspect);

      if (indent && !singleLineValues(xs)) {
        return '[' + indentedJoin(xs, indent) + ']';
      }

      return '[ ' + xs.join(', ') + ' ]';
    }

    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect);

      if (parts.length === 0) {
        return '[' + String(obj) + ']';
      }

      return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
    }

    if (_typeof(obj) === 'object' && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
        return obj[inspectSymbol]();
      } else if (typeof obj.inspect === 'function') {
        return obj.inspect();
      }
    }

    if (isMap(obj)) {
      var mapParts = [];
      mapForEach.call(obj, function (value, key) {
        mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
      });
      return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }

    if (isSet(obj)) {
      var setParts = [];
      setForEach.call(obj, function (value) {
        setParts.push(inspect(value, obj));
      });
      return collectionOf('Set', setSize.call(obj), setParts, indent);
    }

    if (isWeakMap(obj)) {
      return weakCollectionOf('WeakMap');
    }

    if (isWeakSet(obj)) {
      return weakCollectionOf('WeakSet');
    }

    if (isNumber(obj)) {
      return markBoxed(inspect(Number(obj)));
    }

    if (isBigInt(obj)) {
      return markBoxed(inspect(bigIntValueOf.call(obj)));
    }

    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }

    if (isString(obj)) {
      return markBoxed(inspect(String(obj)));
    }

    if (!isDate(obj) && !isRegExp$1(obj)) {
      var ys = arrObjKeys(obj, inspect);

      if (ys.length === 0) {
        return '{}';
      }

      if (indent) {
        return '{' + indentedJoin(ys, indent) + '}';
      }

      return '{ ' + ys.join(', ') + ' }';
    }

    return String(obj);
  };

  function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
  }

  function quote(s) {
    return String(s).replace(/"/g, '&quot;');
  }

  function isArray$3(obj) {
    return toStr(obj) === '[object Array]';
  }

  function isDate(obj) {
    return toStr(obj) === '[object Date]';
  }

  function isRegExp$1(obj) {
    return toStr(obj) === '[object RegExp]';
  }

  function isError(obj) {
    return toStr(obj) === '[object Error]';
  }

  function isSymbol(obj) {
    return toStr(obj) === '[object Symbol]';
  }

  function isString(obj) {
    return toStr(obj) === '[object String]';
  }

  function isNumber(obj) {
    return toStr(obj) === '[object Number]';
  }

  function isBigInt(obj) {
    return toStr(obj) === '[object BigInt]';
  }

  function isBoolean(obj) {
    return toStr(obj) === '[object Boolean]';
  }

  var hasOwn = Object.prototype.hasOwnProperty || function (key) {
    return key in this;
  };

  function has$3(obj, key) {
    return hasOwn.call(obj, key);
  }

  function toStr(obj) {
    return objectToString.call(obj);
  }

  function nameOf(f) {
    if (f.name) {
      return f.name;
    }

    var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);

    if (m) {
      return m[1];
    }

    return null;
  }

  function indexOf(xs, x) {
    if (xs.indexOf) {
      return xs.indexOf(x);
    }

    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) {
        return i;
      }
    }

    return -1;
  }

  function isMap(x) {
    if (!mapSize || !x || _typeof(x) !== 'object') {
      return false;
    }

    try {
      mapSize.call(x);

      try {
        setSize.call(x);
      } catch (s) {
        return true;
      }

      return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}

    return false;
  }

  function isWeakMap(x) {
    if (!weakMapHas || !x || _typeof(x) !== 'object') {
      return false;
    }

    try {
      weakMapHas.call(x, weakMapHas);

      try {
        weakSetHas.call(x, weakSetHas);
      } catch (s) {
        return true;
      }

      return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}

    return false;
  }

  function isSet(x) {
    if (!setSize || !x || _typeof(x) !== 'object') {
      return false;
    }

    try {
      setSize.call(x);

      try {
        mapSize.call(x);
      } catch (m) {
        return true;
      }

      return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}

    return false;
  }

  function isWeakSet(x) {
    if (!weakSetHas || !x || _typeof(x) !== 'object') {
      return false;
    }

    try {
      weakSetHas.call(x, weakSetHas);

      try {
        weakMapHas.call(x, weakMapHas);
      } catch (s) {
        return true;
      }

      return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}

    return false;
  }

  function isElement(x) {
    if (!x || _typeof(x) !== 'object') {
      return false;
    }

    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
      return true;
    }

    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
  }

  function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
      return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;
    } // eslint-disable-next-line no-control-regex


    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
  }

  function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
      8: 'b',
      9: 't',
      10: 'n',
      12: 'f',
      13: 'r'
    }[n];

    if (x) {
      return '\\' + x;
    }

    return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();
  }

  function markBoxed(str) {
    return 'Object(' + str + ')';
  }

  function weakCollectionOf(type) {
    return type + ' { ? }';
  }

  function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
  }

  function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
      if (indexOf(xs[i], '\n') >= 0) {
        return false;
      }
    }

    return true;
  }

  function getIndent(opts, depth) {
    var baseIndent;

    if (opts.indent === '\t') {
      baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
      baseIndent = Array(opts.indent + 1).join(' ');
    } else {
      return null;
    }

    return {
      base: baseIndent,
      prev: Array(depth + 1).join(baseIndent)
    };
  }

  function indentedJoin(xs, indent) {
    if (xs.length === 0) {
      return '';
    }

    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + xs.join(',' + lineJoiner) + '\n' + indent.prev;
  }

  function arrObjKeys(obj, inspect) {
    var isArr = isArray$3(obj);
    var xs = [];

    if (isArr) {
      xs.length = obj.length;

      for (var i = 0; i < obj.length; i++) {
        xs[i] = has$3(obj, i) ? inspect(obj[i], obj) : '';
      }
    }

    for (var key in obj) {
      // eslint-disable-line no-restricted-syntax
      if (!has$3(obj, key)) {
        continue;
      } // eslint-disable-line no-restricted-syntax, no-continue


      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      } // eslint-disable-line no-restricted-syntax, no-continue


      if (/[^\w$]/.test(key)) {
        xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
      } else {
        xs.push(key + ': ' + inspect(obj[key], obj));
      }
    }

    if (typeof gOPS === 'function') {
      var syms = gOPS(obj);

      for (var j = 0; j < syms.length; j++) {
        if (isEnumerable.call(obj, syms[j])) {
          xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
        }
      }
    }

    return xs;
  }

  var GetIntrinsic = getIntrinsic$1;
  var callBound = callBound$1;
  var inspect = objectInspect;
  var $TypeError = GetIntrinsic('%TypeError%');
  var $WeakMap = GetIntrinsic('%WeakMap%', true);
  var $Map = GetIntrinsic('%Map%', true);
  var $weakMapGet = callBound('WeakMap.prototype.get', true);
  var $weakMapSet = callBound('WeakMap.prototype.set', true);
  var $weakMapHas = callBound('WeakMap.prototype.has', true);
  var $mapGet = callBound('Map.prototype.get', true);
  var $mapSet = callBound('Map.prototype.set', true);
  var $mapHas = callBound('Map.prototype.has', true);
  /*
   * This function traverses the list returning the node corresponding to the
   * given key.
   *
   * That node is also moved to the head of the list, so that if it's accessed
   * again we don't need to traverse the whole list. By doing so, all the recently
   * used nodes can be accessed relatively quickly.
   */

  var listGetNode = function listGetNode(list, key) {
    // eslint-disable-line consistent-return
    for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        curr.next = list.next;
        list.next = curr; // eslint-disable-line no-param-reassign

        return curr;
      }
    }
  };

  var listGet = function listGet(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
  };

  var listSet = function listSet(objects, key, value) {
    var node = listGetNode(objects, key);

    if (node) {
      node.value = value;
    } else {
      // Prepend the new node to the beginning of the list
      objects.next = {
        // eslint-disable-line no-param-reassign
        key: key,
        next: objects.next,
        value: value
      };
    }
  };

  var listHas = function listHas(objects, key) {
    return !!listGetNode(objects, key);
  };

  var sideChannel = function getSideChannel() {
    var $wm;
    var $m;
    var $o;
    var channel = {
      assert: function assert(key) {
        if (!channel.has(key)) {
          throw new $TypeError('Side channel does not contain ' + inspect(key));
        }
      },
      get: function get(key) {
        // eslint-disable-line consistent-return
        if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {
          if ($wm) {
            return $weakMapGet($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapGet($m, key);
          }
        } else {
          if ($o) {
            // eslint-disable-line no-lonely-if
            return listGet($o, key);
          }
        }
      },
      has: function has(key) {
        if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {
          if ($wm) {
            return $weakMapHas($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapHas($m, key);
          }
        } else {
          if ($o) {
            // eslint-disable-line no-lonely-if
            return listHas($o, key);
          }
        }

        return false;
      },
      set: function set(key, value) {
        if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {
          if (!$wm) {
            $wm = new $WeakMap();
          }

          $weakMapSet($wm, key, value);
        } else if ($Map) {
          if (!$m) {
            $m = new $Map();
          }

          $mapSet($m, key, value);
        } else {
          if (!$o) {
            /*
             * Initialize the linked list as an empty node, so that we don't have
             * to special-case handling of the first node: we can always refer to
             * it as (previous node).next, instead of something like (list).head
             */
            $o = {
              key: {},
              next: null
            };
          }

          listSet($o, key, value);
        }
      }
    };
    return channel;
  };

  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  var Format = {
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
  };
  var formats$3 = {
    'default': Format.RFC3986,
    formatters: {
      RFC1738: function RFC1738(value) {
        return replace.call(value, percentTwenties, '+');
      },
      RFC3986: function RFC3986(value) {
        return String(value);
      }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
  };

  var formats$2 = formats$3;
  var has$2 = Object.prototype.hasOwnProperty;
  var isArray$2 = Array.isArray;

  var hexTable = function () {
    var array = [];

    for (var i = 0; i < 256; ++i) {
      array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
  }();

  var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];

      if (isArray$2(obj)) {
        var compacted = [];

        for (var j = 0; j < obj.length; ++j) {
          if (typeof obj[j] !== 'undefined') {
            compacted.push(obj[j]);
          }
        }

        item.obj[item.prop] = compacted;
      }
    }
  };

  var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};

    for (var i = 0; i < source.length; ++i) {
      if (typeof source[i] !== 'undefined') {
        obj[i] = source[i];
      }
    }

    return obj;
  };

  var merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */
    if (!source) {
      return target;
    }

    if (_typeof(source) !== 'object') {
      if (isArray$2(target)) {
        target.push(source);
      } else if (target && _typeof(target) === 'object') {
        if (options && (options.plainObjects || options.allowPrototypes) || !has$2.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }

      return target;
    }

    if (!target || _typeof(target) !== 'object') {
      return [target].concat(source);
    }

    var mergeTarget = target;

    if (isArray$2(target) && !isArray$2(source)) {
      mergeTarget = arrayToObject(target, options);
    }

    if (isArray$2(target) && isArray$2(source)) {
      source.forEach(function (item, i) {
        if (has$2.call(target, i)) {
          var targetItem = target[i];

          if (targetItem && _typeof(targetItem) === 'object' && item && _typeof(item) === 'object') {
            target[i] = merge(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i] = item;
        }
      });
      return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
      var value = source[key];

      if (has$2.call(acc, key)) {
        acc[key] = merge(acc[key], value, options);
      } else {
        acc[key] = value;
      }

      return acc;
    }, mergeTarget);
  };

  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };

  var decode$1 = function decode(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');

    if (charset === 'iso-8859-1') {
      // unescape never throws, no try...catch needed:
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    } // utf-8


    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };

  var encode$1 = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
      return str;
    }

    var string = str;

    if (_typeof(str) === 'symbol') {
      string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== 'string') {
      string = String(str);
    }

    if (charset === 'iso-8859-1') {
      return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
        return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
      });
    }

    var out = '';

    for (var i = 0; i < string.length; ++i) {
      var c = string.charCodeAt(i);

      if (c === 0x2D // -
      || c === 0x2E // .
      || c === 0x5F // _
      || c === 0x7E // ~
      || c >= 0x30 && c <= 0x39 // 0-9
      || c >= 0x41 && c <= 0x5A // a-z
      || c >= 0x61 && c <= 0x7A // A-Z
      || format === formats$2.RFC1738 && (c === 0x28 || c === 0x29) // ( )
      ) {
        out += string.charAt(i);
        continue;
      }

      if (c < 0x80) {
        out = out + hexTable[c];
        continue;
      }

      if (c < 0x800) {
        out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
        continue;
      }

      if (c < 0xD800 || c >= 0xE000) {
        out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
        continue;
      }

      i += 1;
      c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
      /* eslint operator-linebreak: [2, "before"] */

      out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
    }

    return out;
  };

  var compact = function compact(value) {
    var queue = [{
      obj: {
        o: value
      },
      prop: 'o'
    }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
      var item = queue[i];
      var obj = item.obj[item.prop];
      var keys = Object.keys(obj);

      for (var j = 0; j < keys.length; ++j) {
        var key = keys[j];
        var val = obj[key];

        if (_typeof(val) === 'object' && val !== null && refs.indexOf(val) === -1) {
          queue.push({
            obj: obj,
            prop: key
          });
          refs.push(val);
        }
      }
    }

    compactQueue(queue);
    return value;
  };

  var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
  };

  var isBuffer = function isBuffer(obj) {
    if (!obj || _typeof(obj) !== 'object') {
      return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };

  var combine = function combine(a, b) {
    return [].concat(a, b);
  };

  var maybeMap = function maybeMap(val, fn) {
    if (isArray$2(val)) {
      var mapped = [];

      for (var i = 0; i < val.length; i += 1) {
        mapped.push(fn(val[i]));
      }

      return mapped;
    }

    return fn(val);
  };

  var utils$2 = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode$1,
    encode: encode$1,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    maybeMap: maybeMap,
    merge: merge
  };

  var getSideChannel = sideChannel;
  var utils$1 = utils$2;
  var formats$1 = formats$3;
  var has$1 = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) {
      return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray$1 = Array.isArray;
  var split = String.prototype.split;
  var push = Array.prototype.push;

  var pushToArray = function pushToArray(arr, valueOrArray) {
    push.apply(arr, isArray$1(valueOrArray) ? valueOrArray : [valueOrArray]);
  };

  var toISO = Date.prototype.toISOString;
  var defaultFormat = formats$1['default'];
  var defaults$1 = {
    addQueryPrefix: false,
    allowDots: false,
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encoder: utils$1.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats$1.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };

  var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || _typeof(v) === 'symbol' || typeof v === 'bigint';
  };

  var sentinel = {};

  var stringify$1 = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
    var obj = object;
    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;

    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
      // Where object last appeared in the ref tree
      var pos = tmpSc.get(object);
      step += 1;

      if (typeof pos !== 'undefined') {
        if (pos === step) {
          throw new RangeError('Cyclic object value');
        } else {
          findFlag = true; // Break while
        }
      }

      if (typeof tmpSc.get(sentinel) === 'undefined') {
        step = 0;
      }
    }

    if (typeof filter === 'function') {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
      obj = utils$1.maybeMap(obj, function (value) {
        if (value instanceof Date) {
          return serializeDate(value);
        }

        return value;
      });
    }

    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults$1.encoder, charset, 'key', format) : prefix;
      }

      obj = '';
    }

    if (isNonNullishPrimitive(obj) || utils$1.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$1.encoder, charset, 'key', format);

        if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
          var valuesArray = split.call(String(obj), ',');
          var valuesJoined = '';

          for (var i = 0; i < valuesArray.length; ++i) {
            valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults$1.encoder, charset, 'value', format));
          }

          return [formatter(keyValue) + '=' + valuesJoined];
        }

        return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults$1.encoder, charset, 'value', format))];
      }

      return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
      return values;
    }

    var objKeys;

    if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
      // we need to join elements in
      objKeys = [{
        value: obj.length > 0 ? obj.join(',') || null : void undefined
      }];
    } else if (isArray$1(filter)) {
      objKeys = filter;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var j = 0; j < objKeys.length; ++j) {
      var key = objKeys[j];
      var value = _typeof(key) === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

      if (skipNulls && value === null) {
        continue;
      }

      var keyPrefix = isArray$1(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? '.' + key : '[' + key + ']');
      sideChannel.set(object, step);
      var valueSideChannel = getSideChannel();
      valueSideChannel.set(sentinel, sideChannel);
      pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
    }

    return values;
  };

  var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
      return defaults$1;
    }

    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
      throw new TypeError('Encoder has to be a function.');
    }

    var charset = opts.charset || defaults$1.charset;

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
      throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    var format = formats$1['default'];

    if (typeof opts.format !== 'undefined') {
      if (!has$1.call(formats$1.formatters, opts.format)) {
        throw new TypeError('Unknown format option provided.');
      }

      format = opts.format;
    }

    var formatter = formats$1.formatters[format];
    var filter = defaults$1.filter;

    if (typeof opts.filter === 'function' || isArray$1(opts.filter)) {
      filter = opts.filter;
    }

    return {
      addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults$1.addQueryPrefix,
      allowDots: typeof opts.allowDots === 'undefined' ? defaults$1.allowDots : !!opts.allowDots,
      charset: charset,
      charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$1.charsetSentinel,
      delimiter: typeof opts.delimiter === 'undefined' ? defaults$1.delimiter : opts.delimiter,
      encode: typeof opts.encode === 'boolean' ? opts.encode : defaults$1.encode,
      encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults$1.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults$1.encodeValuesOnly,
      filter: filter,
      format: format,
      formatter: formatter,
      serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults$1.serializeDate,
      skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults$1.skipNulls,
      sort: typeof opts.sort === 'function' ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$1.strictNullHandling
    };
  };

  var stringify_1 = function stringify_1(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
      filter = options.filter;
      obj = filter('', obj);
    } else if (isArray$1(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }

    var keys = [];

    if (_typeof(obj) !== 'object' || obj === null) {
      return '';
    }

    var arrayFormat;

    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = opts.arrayFormat;
    } else if (opts && 'indices' in opts) {
      arrayFormat = opts.indices ? 'indices' : 'repeat';
    } else {
      arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
      objKeys = Object.keys(obj);
    }

    if (options.sort) {
      objKeys.sort(options.sort);
    }

    var sideChannel = getSideChannel();

    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];

      if (options.skipNulls && obj[key] === null) {
        continue;
      }

      pushToArray(keys, stringify$1(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
    }

    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    if (options.charsetSentinel) {
      if (options.charset === 'iso-8859-1') {
        // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
        prefix += 'utf8=%26%2310003%3B&';
      } else {
        // encodeURIComponent('✓')
        prefix += 'utf8=%E2%9C%93&';
      }
    }

    return joined.length > 0 ? prefix + joined : '';
  };

  var utils = utils$2;
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var defaults = {
    allowDots: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
  };

  var interpretNumericEntities = function interpretNumericEntities(str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };

  var parseArrayValue = function parseArrayValue(val, options) {
    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
      return val.split(',');
    }

    return val;
  }; // This is what browsers will submit when the ✓ character occurs in an
  // application/x-www-form-urlencoded body and the encoding of the page containing
  // the form is iso-8859-1, or when the submitted form has an accept-charset
  // attribute of iso-8859-1. Presumably also with other charsets that do not contain
  // the ✓ character, such as us-ascii.


  var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
  // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.

  var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

  var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found

    var i;
    var charset = options.charset;

    if (options.charsetSentinel) {
      for (i = 0; i < parts.length; ++i) {
        if (parts[i].indexOf('utf8=') === 0) {
          if (parts[i] === charsetSentinel) {
            charset = 'utf-8';
          } else if (parts[i] === isoSentinel) {
            charset = 'iso-8859-1';
          }

          skipIndex = i;
          i = parts.length; // The eslint settings do not allow break;
        }
      }
    }

    for (i = 0; i < parts.length; ++i) {
      if (i === skipIndex) {
        continue;
      }

      var part = parts[i];
      var bracketEqualsPos = part.indexOf(']=');
      var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
      var key, val;

      if (pos === -1) {
        key = options.decoder(part, defaults.decoder, charset, 'key');
        val = options.strictNullHandling ? null : '';
      } else {
        key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
        val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {
          return options.decoder(encodedVal, defaults.decoder, charset, 'value');
        });
      }

      if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
        val = interpretNumericEntities(val);
      }

      if (part.indexOf('[]=') > -1) {
        val = isArray(val) ? [val] : val;
      }

      if (has.call(obj, key)) {
        obj[key] = utils.combine(obj[key], val);
      } else {
        obj[key] = val;
      }
    }

    return obj;
  };

  var parseObject = function parseObject(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);

    for (var i = chain.length - 1; i >= 0; --i) {
      var obj;
      var root = chain[i];

      if (root === '[]' && options.parseArrays) {
        obj = [].concat(leaf);
      } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);

        if (!options.parseArrays && cleanRoot === '') {
          obj = {
            0: leaf
          };
        } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
          obj = [];
          obj[index] = leaf;
        } else if (cleanRoot !== '__proto__') {
          obj[cleanRoot] = leaf;
        }
      }

      leaf = obj;
    }

    return leaf;
  };

  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
      return;
    } // Transform dot notation to bracket notation


    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey; // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g; // Get the parent

    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key; // Stash the parent if it exists

    var keys = [];

    if (parent) {
      // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }

      keys.push(parent);
    } // Loop through children appending to the array until we hit depth


    var i = 0;

    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
      i += 1;

      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }

      keys.push(segment[1]);
    } // If there's a remainder, just add whatever is left


    if (segment) {
      keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options, valuesParsed);
  };

  var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
      return defaults;
    }

    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
      throw new TypeError('Decoder has to be a function.');
    }

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
      throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
    return {
      allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
      allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
      allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
      arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
      charset: charset,
      charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
      comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
      decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
      delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
      // eslint-disable-next-line no-implicit-coercion, no-extra-parens
      depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
      strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };

  var parse$1 = function parse(str, opts) {
    var options = normalizeParseOptions(opts);

    if (str === '' || str === null || typeof str === 'undefined') {
      return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {}; // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
      obj = utils.merge(obj, newObj, options);
    }

    if (options.allowSparse === true) {
      return obj;
    }

    return utils.compact(obj);
  };

  var stringify = stringify_1;
  var parse = parse$1;
  var formats = formats$3;
  var lib = {
    formats: formats,
    parse: parse,
    stringify: stringify
  };

  /**
   *  base64.ts
   *
   *  Licensed under the BSD 3-Clause License.
   *    http://opensource.org/licenses/BSD-3-Clause
   *
   *  References:
   *    http://en.wikipedia.org/wiki/Base64
   *
   * @author Dan Kogai (https://github.com/dankogai)
   */
  var version = '3.7.2';
  /**
   * @deprecated use lowercase `version`.
   */

  var VERSION = version;

  var _hasatob = typeof atob === 'function';

  var _hasbtoa = typeof btoa === 'function';

  var _hasBuffer = typeof Buffer === 'function';

  var _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;

  var _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;

  var b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var b64chs = Array.prototype.slice.call(b64ch);

  var b64tab = function (a) {
    var tab = {};
    a.forEach(function (c, i) {
      return tab[c] = i;
    });
    return tab;
  }(b64chs);

  var b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;

  var _fromCC = String.fromCharCode.bind(String);

  var _U8Afrom = typeof Uint8Array.from === 'function' ? Uint8Array.from.bind(Uint8Array) : function (it) {
    var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {
      return x;
    };
    return new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
  };

  var _mkUriSafe = function _mkUriSafe(src) {
    return src.replace(/=/g, '').replace(/[+\/]/g, function (m0) {
      return m0 == '+' ? '-' : '_';
    });
  };

  var _tidyB64 = function _tidyB64(s) {
    return s.replace(/[^A-Za-z0-9\+\/]/g, '');
  };
  /**
   * polyfill version of `btoa`
   */


  var btoaPolyfill = function btoaPolyfill(bin) {
    // console.log('polyfilled');
    var u32,
        c0,
        c1,
        c2,
        asc = '';
    var pad = bin.length % 3;

    for (var i = 0; i < bin.length;) {
      if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError('invalid character found');
      u32 = c0 << 16 | c1 << 8 | c2;
      asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
    }

    return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
  };
  /**
   * does what `window.btoa` of web browsers do.
   * @param {String} bin binary string
   * @returns {string} Base64-encoded string
   */


  var _btoa = _hasbtoa ? function (bin) {
    return btoa(bin);
  } : _hasBuffer ? function (bin) {
    return Buffer.from(bin, 'binary').toString('base64');
  } : btoaPolyfill;

  var _fromUint8Array = _hasBuffer ? function (u8a) {
    return Buffer.from(u8a).toString('base64');
  } : function (u8a) {
    // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326
    var maxargs = 0x1000;
    var strs = [];

    for (var i = 0, l = u8a.length; i < l; i += maxargs) {
      strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
    }

    return _btoa(strs.join(''));
  };
  /**
   * converts a Uint8Array to a Base64 string.
   * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5
   * @returns {string} Base64 string
   */


  var fromUint8Array = function fromUint8Array(u8a) {
    var urlsafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
  }; // This trick is found broken https://github.com/dankogai/js-base64/issues/130
  // const utob = (src: string) => unescape(encodeURIComponent(src));
  // reverting good old fationed regexp


  var cb_utob = function cb_utob(c) {
    if (c.length < 2) {
      var cc = c.charCodeAt(0);
      return cc < 0x80 ? c : cc < 0x800 ? _fromCC(0xc0 | cc >>> 6) + _fromCC(0x80 | cc & 0x3f) : _fromCC(0xe0 | cc >>> 12 & 0x0f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);
    } else {
      var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
      return _fromCC(0xf0 | cc >>> 18 & 0x07) + _fromCC(0x80 | cc >>> 12 & 0x3f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);
    }
  };

  var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
  /**
   * @deprecated should have been internal use only.
   * @param {string} src UTF-8 string
   * @returns {string} UTF-16 string
   */

  var utob = function utob(u) {
    return u.replace(re_utob, cb_utob);
  }; //


  var _encode = _hasBuffer ? function (s) {
    return Buffer.from(s, 'utf8').toString('base64');
  } : _TE ? function (s) {
    return _fromUint8Array(_TE.encode(s));
  } : function (s) {
    return _btoa(utob(s));
  };
  /**
   * converts a UTF-8-encoded string to a Base64 string.
   * @param {boolean} [urlsafe] if `true` make the result URL-safe
   * @returns {string} Base64 string
   */


  var encode = function encode(src) {
    var urlsafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);
  };
  /**
   * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.
   * @returns {string} Base64 string
   */


  var encodeURI$1 = function encodeURI(src) {
    return encode(src, true);
  }; // This trick is found broken https://github.com/dankogai/js-base64/issues/130
  // const btou = (src: string) => decodeURIComponent(escape(src));
  // reverting good old fationed regexp


  var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;

  var cb_btou = function cb_btou(cccc) {
    switch (cccc.length) {
      case 4:
        var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),
            offset = cp - 0x10000;
        return _fromCC((offset >>> 10) + 0xD800) + _fromCC((offset & 0x3FF) + 0xDC00);

      case 3:
        return _fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));

      default:
        return _fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));
    }
  };
  /**
   * @deprecated should have been internal use only.
   * @param {string} src UTF-16 string
   * @returns {string} UTF-8 string
   */


  var btou = function btou(b) {
    return b.replace(re_btou, cb_btou);
  };
  /**
   * polyfill version of `atob`
   */


  var atobPolyfill = function atobPolyfill(asc) {
    // console.log('polyfilled');
    asc = asc.replace(/\s+/g, '');
    if (!b64re.test(asc)) throw new TypeError('malformed base64.');
    asc += '=='.slice(2 - (asc.length & 3));
    var u24,
        bin = '',
        r1,
        r2;

    for (var i = 0; i < asc.length;) {
      u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);
      bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
    }

    return bin;
  };
  /**
   * does what `window.atob` of web browsers do.
   * @param {String} asc Base64-encoded string
   * @returns {string} binary string
   */


  var _atob = _hasatob ? function (asc) {
    return atob(_tidyB64(asc));
  } : _hasBuffer ? function (asc) {
    return Buffer.from(asc, 'base64').toString('binary');
  } : atobPolyfill; //


  var _toUint8Array = _hasBuffer ? function (a) {
    return _U8Afrom(Buffer.from(a, 'base64'));
  } : function (a) {
    return _U8Afrom(_atob(a), function (c) {
      return c.charCodeAt(0);
    });
  };
  /**
   * converts a Base64 string to a Uint8Array.
   */


  var toUint8Array = function toUint8Array(a) {
    return _toUint8Array(_unURI(a));
  }; //


  var _decode = _hasBuffer ? function (a) {
    return Buffer.from(a, 'base64').toString('utf8');
  } : _TD ? function (a) {
    return _TD.decode(_toUint8Array(a));
  } : function (a) {
    return btou(_atob(a));
  };

  var _unURI = function _unURI(a) {
    return _tidyB64(a.replace(/[-_]/g, function (m0) {
      return m0 == '-' ? '+' : '/';
    }));
  };
  /**
   * converts a Base64 string to a UTF-8 string.
   * @param {String} src Base64 string.  Both normal and URL-safe are supported
   * @returns {string} UTF-8 string
   */


  var decode = function decode(src) {
    return _decode(_unURI(src));
  };
  /**
   * check if a value is a valid Base64 string
   * @param {String} src a value to check
    */


  var isValid = function isValid(src) {
    if (typeof src !== 'string') return false;
    var s = src.replace(/\s+/g, '').replace(/={0,2}$/, '');
    return !/[^\s0-9a-zA-Z\+/]/.test(s) || !/[^\s0-9a-zA-Z\-_]/.test(s);
  }; //


  var _noEnum = function _noEnum(v) {
    return {
      value: v,
      enumerable: false,
      writable: true,
      configurable: true
    };
  };
  /**
   * extend String.prototype with relevant methods
   */


  var extendString = function extendString() {
    var _add = function _add(name, body) {
      return Object.defineProperty(String.prototype, name, _noEnum(body));
    };

    _add('fromBase64', function () {
      return decode(this);
    });

    _add('toBase64', function (urlsafe) {
      return encode(this, urlsafe);
    });

    _add('toBase64URI', function () {
      return encode(this, true);
    });

    _add('toBase64URL', function () {
      return encode(this, true);
    });

    _add('toUint8Array', function () {
      return toUint8Array(this);
    });
  };
  /**
   * extend Uint8Array.prototype with relevant methods
   */


  var extendUint8Array = function extendUint8Array() {
    var _add = function _add(name, body) {
      return Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
    };

    _add('toBase64', function (urlsafe) {
      return fromUint8Array(this, urlsafe);
    });

    _add('toBase64URI', function () {
      return fromUint8Array(this, true);
    });

    _add('toBase64URL', function () {
      return fromUint8Array(this, true);
    });
  };
  /**
   * extend Builtin prototypes with relevant methods
   */


  var extendBuiltins = function extendBuiltins() {
    extendString();
    extendUint8Array();
  };

  var gBase64 = {
    version: version,
    VERSION: VERSION,
    atob: _atob,
    atobPolyfill: atobPolyfill,
    btoa: _btoa,
    btoaPolyfill: btoaPolyfill,
    fromBase64: decode,
    toBase64: encode,
    encode: encode,
    encodeURI: encodeURI$1,
    encodeURL: encodeURI$1,
    utob: utob,
    btou: btou,
    decode: decode,
    isValid: isValid,
    fromUint8Array: fromUint8Array,
    toUint8Array: toUint8Array,
    extendString: extendString,
    extendUint8Array: extendUint8Array,
    extendBuiltins: extendBuiltins
  }; // makecjs:CUT //

  var THRESHOLD_AVOID_REQUEST_URL_TOO_LARGE = 4096;
  var KintoneRequestConfigBuilder = /*#__PURE__*/function () {
    function KintoneRequestConfigBuilder(_ref) {
      var baseUrl = _ref.baseUrl,
          auth = _ref.auth,
          basicAuth = _ref.basicAuth,
          clientCertAuth = _ref.clientCertAuth,
          proxy = _ref.proxy,
          userAgent = _ref.userAgent;

      _classCallCheck(this, KintoneRequestConfigBuilder);

      this.baseUrl = baseUrl;
      this.auth = auth;
      this.headers = this.buildHeaders({
        basicAuth: basicAuth,
        userAgent: userAgent
      });
      this.clientCertAuth = clientCertAuth;
      this.proxy = proxy;
      this.requestToken = null;
    }

    _createClass(KintoneRequestConfigBuilder, [{
      key: "build",
      value: function () {
        var _build = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(method, path, params, options) {
          var requestConfig, requestUrl, formData, _requestUrl;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  requestConfig = _objectSpread2(_objectSpread2(_objectSpread2({
                    method: method,
                    headers: this.headers,
                    url: "".concat(this.baseUrl).concat(path)
                  }, options ? options : {}), platformDeps.buildPlatformDependentConfig({
                    clientCertAuth: this.clientCertAuth
                  })), {}, {
                    proxy: this.proxy
                  });
                  _context.t0 = method;
                  _context.next = _context.t0 === "get" ? 4 : _context.t0 === "post" ? 16 : _context.t0 === "put" ? 29 : _context.t0 === "delete" ? 37 : 44;
                  break;

                case 4:
                  requestUrl = this.buildRequestUrl(path, params);

                  if (!(requestUrl.length > THRESHOLD_AVOID_REQUEST_URL_TOO_LARGE)) {
                    _context.next = 15;
                    break;
                  }

                  _context.t1 = _objectSpread2;
                  _context.t2 = _objectSpread2({}, requestConfig);
                  _context.t3 = {};
                  _context.t4 = _objectSpread2(_objectSpread2({}, this.headers), {}, {
                    "X-HTTP-Method-Override": "GET"
                  });
                  _context.next = 12;
                  return this.buildData(params);

                case 12:
                  _context.t5 = _context.sent;
                  _context.t6 = {
                    method: "post",
                    headers: _context.t4,
                    data: _context.t5
                  };
                  return _context.abrupt("return", (0, _context.t1)(_context.t2, _context.t3, _context.t6));

                case 15:
                  return _context.abrupt("return", _objectSpread2(_objectSpread2({}, requestConfig), {}, {
                    url: requestUrl
                  }));

                case 16:
                  if (!(params instanceof browser$1)) {
                    _context.next = 21;
                    break;
                  }

                  _context.next = 19;
                  return this.buildData(params);

                case 19:
                  formData = _context.sent;
                  return _context.abrupt("return", _objectSpread2(_objectSpread2({}, requestConfig), {}, {
                    headers: // NOTE: formData.getHeaders does not exist in a browser environment.
                    typeof formData.getHeaders === "function" ? _objectSpread2(_objectSpread2({}, this.headers), formData.getHeaders()) : this.headers,
                    data: formData
                  }));

                case 21:
                  _context.t7 = _objectSpread2;
                  _context.t8 = _objectSpread2({}, requestConfig);
                  _context.t9 = {};
                  _context.next = 26;
                  return this.buildData(params);

                case 26:
                  _context.t10 = _context.sent;
                  _context.t11 = {
                    data: _context.t10
                  };
                  return _context.abrupt("return", (0, _context.t7)(_context.t8, _context.t9, _context.t11));

                case 29:
                  _context.t12 = _objectSpread2;
                  _context.t13 = _objectSpread2({}, requestConfig);
                  _context.t14 = {};
                  _context.next = 34;
                  return this.buildData(params);

                case 34:
                  _context.t15 = _context.sent;
                  _context.t16 = {
                    data: _context.t15
                  };
                  return _context.abrupt("return", (0, _context.t12)(_context.t13, _context.t14, _context.t16));

                case 37:
                  _context.t17 = this;
                  _context.t18 = path;
                  _context.next = 41;
                  return this.buildData(params);

                case 41:
                  _context.t19 = _context.sent;
                  _requestUrl = _context.t17.buildRequestUrl.call(_context.t17, _context.t18, _context.t19);
                  return _context.abrupt("return", _objectSpread2(_objectSpread2({}, requestConfig), {}, {
                    url: _requestUrl
                  }));

                case 44:
                  throw new Error("".concat(method, " method is not supported"));

                case 45:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function build(_x, _x2, _x3, _x4) {
          return _build.apply(this, arguments);
        }

        return build;
      }()
    }, {
      key: "buildRequestUrl",
      value: function buildRequestUrl(path, params) {
        return "".concat(this.baseUrl).concat(path, "?").concat(lib.stringify(params));
      }
    }, {
      key: "buildData",
      value: function () {
        var _buildData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(params) {
          var requestToken;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(this.auth.type === "session")) {
                    _context2.next = 8;
                    break;
                  }

                  _context2.next = 3;
                  return this.getRequestToken();

                case 3:
                  requestToken = _context2.sent;

                  if (!(params instanceof browser$1)) {
                    _context2.next = 7;
                    break;
                  }

                  params.append("__REQUEST_TOKEN__", requestToken);
                  return _context2.abrupt("return", params);

                case 7:
                  return _context2.abrupt("return", _objectSpread2({
                    __REQUEST_TOKEN__: requestToken
                  }, params));

                case 8:
                  return _context2.abrupt("return", params);

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function buildData(_x5) {
          return _buildData.apply(this, arguments);
        }

        return buildData;
      }()
    }, {
      key: "buildHeaders",
      value: function buildHeaders(params) {
        var basicAuth = params.basicAuth,
            userAgent = params.userAgent;
        var basicAuthHeaders = basicAuth ? {
          Authorization: "Basic ".concat(gBase64.encode("".concat(basicAuth.username, ":").concat(basicAuth.password)))
        } : {};
        var platformDepsHeaders = platformDeps.buildHeaders({
          userAgent: userAgent
        });

        var commonHeaders = _objectSpread2(_objectSpread2({}, platformDepsHeaders), basicAuthHeaders);

        switch (this.auth.type) {
          case "password":
            {
              return _objectSpread2(_objectSpread2({}, commonHeaders), {}, {
                "X-Cybozu-Authorization": gBase64.encode("".concat(this.auth.username, ":").concat(this.auth.password))
              });
            }

          case "apiToken":
            {
              var apiToken = this.auth.apiToken;

              if (Array.isArray(apiToken)) {
                return _objectSpread2(_objectSpread2({}, commonHeaders), {}, {
                  "X-Cybozu-API-Token": apiToken.join(",")
                });
              }

              return _objectSpread2(_objectSpread2({}, commonHeaders), {}, {
                "X-Cybozu-API-Token": apiToken
              });
            }

          case "oAuthToken":
            {
              return _objectSpread2(_objectSpread2({}, commonHeaders), {}, {
                Authorization: "Bearer ".concat(this.auth.oAuthToken)
              });
            }

          default:
            {
              return _objectSpread2(_objectSpread2({}, commonHeaders), {}, {
                "X-Requested-With": "XMLHttpRequest"
              });
            }
        }
      }
    }, {
      key: "getRequestToken",
      value: function () {
        var _getRequestToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!(this.requestToken === null)) {
                    _context3.next = 4;
                    break;
                  }

                  _context3.next = 3;
                  return platformDeps.getRequestToken();

                case 3:
                  this.requestToken = _context3.sent;

                case 4:
                  return _context3.abrupt("return", this.requestToken);

                case 5:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function getRequestToken() {
          return _getRequestToken.apply(this, arguments);
        }

        return getRequestToken;
      }()
    }]);

    return KintoneRequestConfigBuilder;
  }();

  var uncurryThis$1 = functionUncurryThis;
  var redefine$1 = redefine$6.exports;
  var DatePrototype = Date.prototype;
  var INVALID_DATE = 'Invalid Date';
  var TO_STRING$1 = 'toString';
  var un$DateToString = uncurryThis$1(DatePrototype[TO_STRING$1]);
  var getTime = uncurryThis$1(DatePrototype.getTime); // `Date.prototype.toString` method
  // https://tc39.es/ecma262/#sec-date.prototype.tostring

  if (String(new Date(NaN)) != INVALID_DATE) {
    redefine$1(DatePrototype, TO_STRING$1, function toString() {
      var value = getTime(this); // eslint-disable-next-line no-self-compare -- NaN check

      return value === value ? un$DateToString(this) : INVALID_DATE;
    });
  }

  var uncurryThis = functionUncurryThis;
  var PROPER_FUNCTION_NAME = functionName.PROPER;
  var redefine = redefine$6.exports;
  var anObject = anObject$9;
  var isPrototypeOf = objectIsPrototypeOf;
  var $toString = toString$6;
  var fails = fails$j;
  var regExpFlags = regexpFlags$1;
  var TO_STRING = 'toString';
  var RegExpPrototype = RegExp.prototype;
  var n$ToString = RegExpPrototype[TO_STRING];
  var getFlags = uncurryThis(regExpFlags);
  var NOT_GENERIC = fails(function () {
    return n$ToString.call({
      source: 'a',
      flags: 'b'
    }) != '/a/b';
  }); // FF44- RegExp#toString has a wrong name

  var INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING; // `RegExp.prototype.toString` method
  // https://tc39.es/ecma262/#sec-regexp.prototype.tostring

  if (NOT_GENERIC || INCORRECT_NAME) {
    redefine(RegExp.prototype, TO_STRING, function toString() {
      var R = anObject(this);
      var p = $toString(R.source);
      var rf = R.flags;
      var f = $toString(rf === undefined && isPrototypeOf(RegExpPrototype, R) && !('flags' in RegExpPrototype) ? getFlags(R) : rf);
      return '/' + p + '/' + f;
    }, {
      unsafe: true
    });
  }

  var KintoneAbortSearchError = /*#__PURE__*/function (_Error) {
    _inherits(KintoneAbortSearchError, _Error);

    var _super = _createSuper(KintoneAbortSearchError);

    function KintoneAbortSearchError(message) {
      var _this;

      _classCallCheck(this, KintoneAbortSearchError);

      _this = _super.call(this, message);
      _this.name = "KintoneAbortSearchError";
      _this.message = message; // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
      // Set the prototype explicitly.

      Object.setPrototypeOf(_assertThisInitialized(_this), KintoneAbortSearchError.prototype);
      return _this;
    }

    return _createClass(KintoneAbortSearchError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  var KintoneRestAPIError = /*#__PURE__*/function (_Error) {
    _inherits(KintoneRestAPIError, _Error);

    var _super = _createSuper(KintoneRestAPIError);

    function KintoneRestAPIError(error) {
      var _this;

      _classCallCheck(this, KintoneRestAPIError);

      var _KintoneRestAPIError$ = KintoneRestAPIError.buildErrorResponseDateWithIndex(error),
          data = _KintoneRestAPIError$.data,
          bulkRequestIndex = _KintoneRestAPIError$.bulkRequestIndex;

      _this = _super.call(this, data.message);
      _this.name = "KintoneRestAPIError";
      _this.id = data.id;
      _this.code = data.code;
      _this.errors = data.errors;
      _this.status = error.status;
      _this.bulkRequestIndex = bulkRequestIndex;
      _this.headers = error.headers;
      _this.message = "[".concat(error.status, "] [").concat(_this.code, "] ").concat(_this.message, " (").concat(_this.id, ")"); // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
      // Maintains proper stack trace for where our error was thrown (only available on V8)

      if (Error.captureStackTrace) {
        Error.captureStackTrace(_assertThisInitialized(_this), KintoneRestAPIError);
      } // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
      // Set the prototype explicitly.


      Object.setPrototypeOf(_assertThisInitialized(_this), KintoneRestAPIError.prototype);
      return _this;
    }

    _createClass(KintoneRestAPIError, null, [{
      key: "findErrorResponseDataWithIndex",
      value: function findErrorResponseDataWithIndex(results) {
        for (var i = 0; i < results.length; i++) {
          if (Object.keys(results[i]).length !== 0) {
            var data = results[i];
            return {
              data: data,
              bulkRequestIndex: i
            };
          }
        }

        throw Error("Missing response data in `results`. This error is likely caused by a bug in Kintone REST API Client. Please file an issue.");
      }
    }, {
      key: "buildErrorResponseDateWithIndex",
      value: function buildErrorResponseDateWithIndex(error) {
        if ("results" in error.data) {
          return KintoneRestAPIError.findErrorResponseDataWithIndex(error.data.results);
        }

        return {
          data: error.data
        };
      }
    }]);

    return KintoneRestAPIError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  var _excluded = ["data"];
  var KintoneResponseHandler = /*#__PURE__*/function () {
    function KintoneResponseHandler(_ref) {
      var enableAbortSearchError = _ref.enableAbortSearchError;

      _classCallCheck(this, KintoneResponseHandler);

      this.enableAbortSearchError = enableAbortSearchError;
    }

    _createClass(KintoneResponseHandler, [{
      key: "handle",
      value: function handle(response) {
        var _this = this;

        return response.then(function (res) {
          return _this.handleSuccessResponse(res);
        }, function (error) {
          return _this.handleErrorResponse(error);
        });
      }
    }, {
      key: "handleSuccessResponse",
      value: function handleSuccessResponse(response) {
        if (this.enableAbortSearchError && /Filter aborted because of too many search results/.test(response.headers["x-cybozu-warning"])) {
          throw new KintoneAbortSearchError(response.headers["x-cybozu-warning"]);
        }

        return response.data;
      }
    }, {
      key: "handleErrorResponse",
      value: function handleErrorResponse(error) {
        if (!error.response) {
          // FIXME: find a better way to handle this error
          if (/mac verify failure/.test(error.toString())) {
            throw new Error("invalid clientCertAuth setting");
          }

          throw error;
        }

        var errorResponse = error.response;

        var data = errorResponse.data,
            rest = _objectWithoutProperties(errorResponse, _excluded);

        if (typeof data === "string") {
          throw new Error("".concat(rest.status, ": ").concat(rest.statusText));
        }

        throw new KintoneRestAPIError(_objectSpread2({
          data: data
        }, rest));
      }
    }]);

    return KintoneResponseHandler;
  }();

  var buildDiscriminatedAuth = function buildDiscriminatedAuth(auth) {
    if ("username" in auth) {
      return _objectSpread2({
        type: "password"
      }, auth);
    }

    if ("apiToken" in auth) {
      return _objectSpread2({
        type: "apiToken"
      }, auth);
    }

    if ("oAuthToken" in auth) {
      return _objectSpread2({
        type: "oAuthToken"
      }, auth);
    }

    try {
      return platformDeps.getDefaultAuth();
    } catch (e) {
      if (e instanceof UnsupportedPlatformError) {
        throw new Error("session authentication is not supported in ".concat(e.platform, " environment."));
      }

      throw e;
    }
  };

  var KintoneRestAPIClient = /*#__PURE__*/function () {
    function KintoneRestAPIClient() {
      var _options$auth, _options$featureFlags, _options$featureFlags2;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, KintoneRestAPIClient);

      validateOptions(options);
      this.baseUrl = platformDeps.buildBaseUrl(options.baseUrl);
      var auth = buildDiscriminatedAuth((_options$auth = options.auth) !== null && _options$auth !== void 0 ? _options$auth : {});
      var requestConfigBuilder = new KintoneRequestConfigBuilder(_objectSpread2(_objectSpread2({}, options), {}, {
        baseUrl: this.baseUrl,
        auth: auth
      }));
      var responseHandler = new KintoneResponseHandler({
        enableAbortSearchError: (_options$featureFlags = (_options$featureFlags2 = options.featureFlags) === null || _options$featureFlags2 === void 0 ? void 0 : _options$featureFlags2.enableAbortSearchError) !== null && _options$featureFlags !== void 0 ? _options$featureFlags : false
      });
      var httpClient = new AxiosClient({
        responseHandler: responseHandler,
        requestConfigBuilder: requestConfigBuilder
      });
      var guestSpaceId = options.guestSpaceId;
      this.bulkRequest_ = new BulkRequestClient(httpClient, guestSpaceId);
      this.record = new RecordClient(httpClient, this.bulkRequest_, guestSpaceId);
      this.app = new AppClient(httpClient, guestSpaceId);
      this.file = new FileClient(httpClient, guestSpaceId);
    }

    _createClass(KintoneRestAPIClient, [{
      key: "getBaseUrl",
      value: function getBaseUrl() {
        return this.baseUrl;
      }
    }, {
      key: "bulkRequest",
      value: function bulkRequest(params) {
        return this.bulkRequest_.send(params);
      }
    }], [{
      key: "version",
      get: function get() {
        return platformDeps.getVersion();
      }
    }]);

    return KintoneRestAPIClient;
  }();

  var validateOptions = function validateOptions(options) {
    validateGuestSpaceId(options.guestSpaceId);
  };

  var validateGuestSpaceId = function validateGuestSpaceId(guestSpaceId) {
    if (guestSpaceId === "" || guestSpaceId === null) {
      throw new Error("invalid guestSpaceId: got [".concat(guestSpaceId, "]"));
    }
  };

  injectPlatformDeps(browserDeps);

  exports.KintoneAbortSearchError = KintoneAbortSearchError;
  exports.KintoneAllRecordsError = KintoneAllRecordsError;
  exports.KintoneRestAPIClient = KintoneRestAPIClient;
  exports.KintoneRestAPIError = KintoneRestAPIError;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2ludG9uZVJlc3RBUElDbGllbnQuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9wbGF0Zm9ybS9pbmRleC50cyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LW1ldGhvZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uL3NyYy9wbGF0Zm9ybS9VbnN1cHBvcnRlZFBsYXRmb3JtRXJyb3IudHMiLCIuLi9zcmMvcGxhdGZvcm0vYnJvd3Nlci50cyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCIuLi9zcmMvdXJsLnRzIiwiLi4vc3JjL2NsaWVudC9CdWxrUmVxdWVzdENsaWVudC50cyIsIi4uL3NyYy9jbGllbnQvQXBwQ2xpZW50LnRzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3doaXRlc3BhY2VzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmV2ZXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1yZWR1Y2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCIuLi9zcmMvZXJyb3IvS2ludG9uZUFsbFJlY29yZHNFcnJvci50cyIsIi4uL3NyYy9jbGllbnQvUmVjb3JkQ2xpZW50LnRzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvYnJvd3Nlci5qcyIsIi4uL3NyYy9jbGllbnQvRmlsZUNsaWVudC50cyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWdsb2JhbHMvc3JjL2dsb2JhbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzLWVzNi9icm93c2VyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCIuLi9zcmMvaHR0cC9BeGlvc0NsaWVudC50cyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9nZXQtaW50cmluc2ljL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL25vZGVfbW9kdWxlcy9nZXQtaW50cmluc2ljL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2NhbGxCb3VuZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zaWRlLWNoYW5uZWwvbm9kZV9tb2R1bGVzL29iamVjdC1pbnNwZWN0L2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pzLWJhc2U2NC9iYXNlNjQubWpzIiwiLi4vc3JjL0tpbnRvbmVSZXF1ZXN0Q29uZmlnQnVpbGRlci50cyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiLCIuLi9zcmMvZXJyb3IvS2ludG9uZUFib3J0U2VhcmNoRXJyb3IudHMiLCIuLi9zcmMvZXJyb3IvS2ludG9uZVJlc3RBUElFcnJvci50cyIsIi4uL3NyYy9LaW50b25lUmVzcG9uc2VIYW5kbGVyLnRzIiwiLi4vc3JjL0tpbnRvbmVSZXN0QVBJQ2xpZW50LnRzIiwiLi4vc3JjL2luZGV4LmJyb3dzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlzY3JpbWluYXRlZEF1dGggfSBmcm9tIFwiLi4vdHlwZXMvYXV0aFwiO1xudHlwZSBQbGF0Zm9ybURlcHMgPSB7XG4gIHJlYWRGaWxlRnJvbVBhdGg6IChcbiAgICBmaWxlUGF0aDogc3RyaW5nXG4gICkgPT4gUHJvbWlzZTx7IG5hbWU6IHN0cmluZzsgZGF0YTogdW5rbm93biB9PjtcbiAgZ2V0UmVxdWVzdFRva2VuOiAoKSA9PiBQcm9taXNlPHN0cmluZz47XG4gIGdldERlZmF1bHRBdXRoOiAoKSA9PiBEaXNjcmltaW5hdGVkQXV0aDtcbiAgYnVpbGRQbGF0Zm9ybURlcGVuZGVudENvbmZpZzogKHBhcmFtczogb2JqZWN0KSA9PiBvYmplY3Q7XG4gIGJ1aWxkSGVhZGVyczogKHBhcmFtczogeyB1c2VyQWdlbnQ/OiBzdHJpbmcgfSkgPT4gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgYnVpbGRGb3JtRGF0YVZhbHVlOiAoZGF0YTogdW5rbm93bikgPT4gdW5rbm93bjtcbiAgYnVpbGRCYXNlVXJsOiAoYmFzZVVybD86IHN0cmluZykgPT4gc3RyaW5nO1xuICBnZXRWZXJzaW9uOiAoKSA9PiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgcGxhdGZvcm1EZXBzOiBQbGF0Zm9ybURlcHMgPSB7XG4gIHJlYWRGaWxlRnJvbVBhdGg6ICgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gIH0sXG4gIGdldFJlcXVlc3RUb2tlbjogKCkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfSxcbiAgZ2V0RGVmYXVsdEF1dGg6ICgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gIH0sXG4gIGJ1aWxkUGxhdGZvcm1EZXBlbmRlbnRDb25maWc6ICgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gIH0sXG4gIGJ1aWxkSGVhZGVyczogKCkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfSxcbiAgYnVpbGRGb3JtRGF0YVZhbHVlOiAoKSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpO1xuICB9LFxuICBidWlsZEJhc2VVcmw6ICgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gIH0sXG4gIGdldFZlcnNpb246ICgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgaW5qZWN0UGxhdGZvcm1EZXBzID0gKGRlcHM6IFBhcnRpYWw8UGxhdGZvcm1EZXBzPikgPT4ge1xuICBpZiAoZGVwcy5yZWFkRmlsZUZyb21QYXRoKSB7XG4gICAgcGxhdGZvcm1EZXBzLnJlYWRGaWxlRnJvbVBhdGggPSBkZXBzLnJlYWRGaWxlRnJvbVBhdGg7XG4gIH1cbiAgaWYgKGRlcHMuZ2V0UmVxdWVzdFRva2VuKSB7XG4gICAgcGxhdGZvcm1EZXBzLmdldFJlcXVlc3RUb2tlbiA9IGRlcHMuZ2V0UmVxdWVzdFRva2VuO1xuICB9XG4gIGlmIChkZXBzLmdldERlZmF1bHRBdXRoKSB7XG4gICAgcGxhdGZvcm1EZXBzLmdldERlZmF1bHRBdXRoID0gZGVwcy5nZXREZWZhdWx0QXV0aDtcbiAgfVxuICBpZiAoZGVwcy5idWlsZFBsYXRmb3JtRGVwZW5kZW50Q29uZmlnKSB7XG4gICAgcGxhdGZvcm1EZXBzLmJ1aWxkUGxhdGZvcm1EZXBlbmRlbnRDb25maWcgPVxuICAgICAgZGVwcy5idWlsZFBsYXRmb3JtRGVwZW5kZW50Q29uZmlnO1xuICB9XG4gIGlmIChkZXBzLmJ1aWxkSGVhZGVycykge1xuICAgIHBsYXRmb3JtRGVwcy5idWlsZEhlYWRlcnMgPSBkZXBzLmJ1aWxkSGVhZGVycztcbiAgfVxuICBpZiAoZGVwcy5idWlsZEZvcm1EYXRhVmFsdWUpIHtcbiAgICBwbGF0Zm9ybURlcHMuYnVpbGRGb3JtRGF0YVZhbHVlID0gZGVwcy5idWlsZEZvcm1EYXRhVmFsdWU7XG4gIH1cbiAgaWYgKGRlcHMuYnVpbGRCYXNlVXJsKSB7XG4gICAgcGxhdGZvcm1EZXBzLmJ1aWxkQmFzZVVybCA9IGRlcHMuYnVpbGRCYXNlVXJsO1xuICB9XG4gIGlmIChkZXBzLmdldFZlcnNpb24pIHtcbiAgICBwbGF0Zm9ybURlcHMuZ2V0VmVyc2lvbiA9IGRlcHMuZ2V0VmVyc2lvbjtcbiAgfVxufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoY2FsbCkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGNhbGwsIGFyZ3VtZW50cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBiaW5kID0gRnVuY3Rpb25Qcm90b3R5cGUuYmluZDtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpcyA9IE5BVElWRV9CSU5EICYmIGJpbmQuYmluZChjYWxsLCBjYWxsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgdW5jdXJyeVRoaXMoZm4pO1xufSA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoe30udG9TdHJpbmcpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gc3RyaW5nU2xpY2UodG9TdHJpbmcoaXQpLCA4LCAtMSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsIi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1c1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xufVxuXG4vLyBCcm93c2VyRlMgTm9kZUpTIGBwcm9jZXNzYCBwb2x5ZmlsbCBpbmNvcnJlY3RseSBzZXQgYC52OGAgdG8gYDAuMGBcbi8vIHNvIGNoZWNrIGB1c2VyQWdlbnRgIGV2ZW4gaWYgYC52OGAgZXhpc3RzLCBidXQgMFxuaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9ICttYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsIE9iamVjdChpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCJ2YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcblxuLy8gYEdldE1ldGhvZGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoViwgUCkge1xuICB2YXIgZnVuYyA9IFZbUF07XG4gIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhQ2FsbGFibGUoZnVuYyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKGlzQ2FsbGFibGUoZm4gPSBpbnB1dC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHByZWYgIT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIxLjEnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMiBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjIxLjEvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyh7fS5oYXNPd25Qcm9wZXJ0eSk7XG5cbi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5KHRvT2JqZWN0KGl0KSwga2V5KTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgc3ltYm9sRm9yID0gU3ltYm9sICYmIFN5bWJvbFsnZm9yJ107XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzT3duKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gJ1N5bWJvbC4nICsgbmFtZTtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKSkge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIH0gZWxzZSBpZiAoVVNFX1NZTUJPTF9BU19VSUQgJiYgc3ltYm9sRm9yKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBzeW1ib2xGb3IoZGVzY3JpcHRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGV4b3RpY1RvUHJpbSA9IGdldE1ldGhvZChpbnB1dCwgVE9fUFJJTUlUSVZFKTtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKGV4b3RpY1RvUHJpbSkge1xuICAgIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnZGVmYXVsdCc7XG4gICAgcmVzdWx0ID0gY2FsbChleG90aWNUb1ByaW0sIGlucHV0LCBwcmVmKTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG4gIH1cbiAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdudW1iZXInO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgcHJlZik7XG59O1xuIiwidmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xuXG4vLyBgVG9Qcm9wZXJ0eUtleWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ3N0cmluZycpO1xuICByZXR1cm4gaXNTeW1ib2woa2V5KSA/IGtleSA6IGtleSArICcnO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rcyB0byBJRTggZm9yIGl0cyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBWOCB+IENocm9tZSAzNi1cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMzMzRcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywge1xuICAgIHZhbHVlOiA0MixcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSkucHJvdG90eXBlICE9IDQyO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcihTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnO1xudmFyIENPTkZJR1VSQUJMRSA9ICdjb25maWd1cmFibGUnO1xudmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJztcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKHR5cGVvZiBPID09PSAnZnVuY3Rpb24nICYmIFAgPT09ICdwcm90b3R5cGUnICYmICd2YWx1ZScgaW4gQXR0cmlidXRlcyAmJiBXUklUQUJMRSBpbiBBdHRyaWJ1dGVzICYmICFBdHRyaWJ1dGVzW1dSSVRBQkxFXSkge1xuICAgIHZhciBjdXJyZW50ID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50W1dSSVRBQkxFXSkge1xuICAgICAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gICAgICBBdHRyaWJ1dGVzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IENPTkZJR1VSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tDT05GSUdVUkFCTEVdIDogY3VycmVudFtDT05GSUdVUkFCTEVdLFxuICAgICAgICBlbnVtZXJhYmxlOiBFTlVNRVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0VOVU1FUkFCTEVdIDogY3VycmVudFtFTlVNRVJBQkxFXSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xufSA6ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQ2FsbGFibGUoV2Vha01hcCkgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHVuY3VycnlUaGlzKHN0b3JlLmdldCk7XG4gIHZhciB3bWhhcyA9IHVuY3VycnlUaGlzKHN0b3JlLmhhcyk7XG4gIHZhciB3bXNldCA9IHVuY3VycnlUaGlzKHN0b3JlLnNldCk7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAod21oYXMoc3RvcmUsIGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24oaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgRVhJU1RTID0gaGFzT3duKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpO1xuLy8gYWRkaXRpb25hbCBwcm90ZWN0aW9uIGZyb20gbWluaWZpZWQgLyBtYW5nbGVkIC8gZHJvcHBlZCBmdW5jdGlvbiBuYW1lc1xudmFyIFBST1BFUiA9IEVYSVNUUyAmJiAoZnVuY3Rpb24gc29tZXRoaW5nKCkgeyAvKiBlbXB0eSAqLyB9KS5uYW1lID09PSAnc29tZXRoaW5nJztcbnZhciBDT05GSUdVUkFCTEUgPSBFWElTVFMgJiYgKCFERVNDUklQVE9SUyB8fCAoREVTQ1JJUFRPUlMgJiYgZ2V0RGVzY3JpcHRvcihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKS5jb25maWd1cmFibGUpKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVYSVNUUzogRVhJU1RTLFxuICBQUk9QRVI6IFBST1BFUixcbiAgQ09ORklHVVJBQkxFOiBDT05GSUdVUkFCTEVcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgbmFtZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5hbWUgOiBrZXk7XG4gIHZhciBzdGF0ZTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSB7XG4gICAgaWYgKFN0cmluZyhuYW1lKS5zbGljZSgwLCA3KSA9PT0gJ1N5bWJvbCgnKSB7XG4gICAgICBuYW1lID0gJ1snICsgU3RyaW5nKG5hbWUpLnJlcGxhY2UoL15TeW1ib2xcXCgoW14pXSopXFwpLywgJyQxJykgKyAnXSc7XG4gICAgfVxuICAgIGlmICghaGFzT3duKHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSAmJiB2YWx1ZS5uYW1lICE9PSBuYW1lKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIG5hbWUpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gICAgfVxuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJPckluZmluaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2Vyb3JpbmZpbml0eVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIG51bWJlciA9ICthcmd1bWVudDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBzYWZlXG4gIHJldHVybiBudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09IDAgPyAwIDogKG51bWJlciA+IDAgPyBmbG9vciA6IGNlaWwpKG51bWJlcik7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzT3duKGhpZGRlbktleXMsIGtleSkgJiYgaGFzT3duKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24oTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaChyZXN1bHQsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChrZXlzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgZXhjZXB0aW9ucykge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkgJiYgIShleGNlcHRpb25zICYmIGhhc093bihleGNlcHRpb25zLCBrZXkpKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH1cbiAgfVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiAgb3B0aW9ucy5uYW1lICAgICAgICAtIHRoZSAubmFtZSBvZiB0aGUgZnVuY3Rpb24gaWYgaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGtleVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWlzYXJyYXkgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJndW1lbnQpID09ICdBcnJheSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgZW1wdHkgPSBbXTtcbnZhciBjb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIGNvbnN0cnVjdG9yUmVnRXhwID0gL15cXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY29uc3RydWN0b3JSZWdFeHAuZXhlYyk7XG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKG5vb3ApO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0cnVjdChub29wLCBlbXB0eSwgYXJndW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lc1xuICAgIC8vIChmb3IgZXhhbXBsZSwgYERPTVF1YWRgIGFuZCBzaW1pbGFyIGluIEZGNDEtKVxuICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyhjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5pc0NvbnN0cnVjdG9yTGVnYWN5LnNoYW0gPSB0cnVlO1xuXG4vLyBgSXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsZWQ7XG4gIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlOyB9KVxuICAgIHx8IGNhbGxlZDtcbn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGEgcGFydCBvZiBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKGlzQ29uc3RydWN0b3IoQykgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KGFyZykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShFKTtcbiAgICAgICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG4gPj0gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZVTkNUSU9OX05BTUVfRVhJU1RTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5FWElTVFM7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmcpO1xudmFyIG5hbWVSRSA9IC9mdW5jdGlvblxcYig/Olxcc3xcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcL1xcL1teXFxuXFxyXSpbXFxuXFxyXSspKihbXlxccygvXSopLztcbnZhciByZWdFeHBFeGVjID0gdW5jdXJyeVRoaXMobmFtZVJFLmV4ZWMpO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIUZVTkNUSU9OX05BTUVfRVhJU1RTKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEV4ZWMobmFtZVJFLCBmdW5jdGlvblRvU3RyaW5nKHRoaXMpKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpcyhPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQpO1xuICAgIHNldHRlcih0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2V0UHJvdG90eXBlT2Y6IHNldFByb3RvdHlwZU9mXG59KTtcbiIsInR5cGUgUGxhdGZvcm0gPSBcIkJyb3dzZXJcIiB8IFwiTm9kZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRQbGF0Zm9ybUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgcGxhdGZvcm06IFBsYXRmb3JtO1xuXG4gIGNvbnN0cnVjdG9yKHBsYXRmb3JtOiBQbGF0Zm9ybSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBgVGhpcyBmdW5jdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluICR7cGxhdGZvcm19IGVudmlyb25tZW50YDtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0N1c3RvbV9FcnJvcl9UeXBlc1xuICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duIChvbmx5IGF2YWlsYWJsZSBvbiBWOClcbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFVuc3VwcG9ydGVkUGxhdGZvcm1FcnJvcik7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gXCJVbnN1cHBvcnRlZFBsYXRmb3JtRXJyb3JcIjtcbiAgICB0aGlzLnBsYXRmb3JtID0gcGxhdGZvcm07XG5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvd2lraS9CcmVha2luZy1DaGFuZ2VzI2V4dGVuZGluZy1idWlsdC1pbnMtbGlrZS1lcnJvci1hcnJheS1hbmQtbWFwLW1heS1uby1sb25nZXItd29ya1xuICAgIC8vIFNldCB0aGUgcHJvdG90eXBlIGV4cGxpY2l0bHkuXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFVuc3VwcG9ydGVkUGxhdGZvcm1FcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBVbnN1cHBvcnRlZFBsYXRmb3JtRXJyb3IgfSBmcm9tIFwiLi9VbnN1cHBvcnRlZFBsYXRmb3JtRXJyb3JcIjtcbmltcG9ydCB7IERpc2NyaW1pbmF0ZWRBdXRoIH0gZnJvbSBcIi4uL3R5cGVzL2F1dGhcIjtcblxuZXhwb3J0IGNvbnN0IHJlYWRGaWxlRnJvbVBhdGggPSAoZmlsZVBhdGg6IHN0cmluZykgPT4ge1xuICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRQbGF0Zm9ybUVycm9yKFwiQnJvd3NlclwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRSZXF1ZXN0VG9rZW4gPSBhc3luYyAoKSA9PiB7XG4gIGlmIChcbiAgICB0eXBlb2Yga2ludG9uZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgIGtpbnRvbmUgIT09IG51bGwgJiZcbiAgICB0eXBlb2Yga2ludG9uZS5nZXRSZXF1ZXN0VG9rZW4gPT09IFwiZnVuY3Rpb25cIlxuICApIHtcbiAgICByZXR1cm4ga2ludG9uZS5nZXRSZXF1ZXN0VG9rZW4oKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgZ2Fyb29uID09PSBcIm9iamVjdFwiICYmXG4gICAgZ2Fyb29uICE9PSBudWxsICYmXG4gICAgdHlwZW9mIGdhcm9vbi5jb25uZWN0Py5raW50b25lPy5nZXRSZXF1ZXN0VG9rZW4gPT09IFwiZnVuY3Rpb25cIlxuICApIHtcbiAgICByZXR1cm4gZ2Fyb29uLmNvbm5lY3Qua2ludG9uZS5nZXRSZXF1ZXN0VG9rZW4oKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihcInNlc3Npb24gYXV0aGVudGljYXRpb24gbXVzdCBzcGVjaWZ5IGEgcmVxdWVzdCB0b2tlblwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0QXV0aCA9ICgpOiBEaXNjcmltaW5hdGVkQXV0aCA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJzZXNzaW9uXCIsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgYnVpbGRQbGF0Zm9ybURlcGVuZGVudENvbmZpZyA9ICgpID0+IHtcbiAgcmV0dXJuIHt9O1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkSGVhZGVycyA9ICgpID0+IHtcbiAgcmV0dXJuIHt9O1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkRm9ybURhdGFWYWx1ZSA9IChkYXRhOiB1bmtub3duKSA9PiB7XG4gIHJldHVybiBuZXcgQmxvYihbZGF0YV0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkQmFzZVVybCA9IChiYXNlVXJsPzogc3RyaW5nKSA9PiB7XG4gIGlmIChiYXNlVXJsKSB7XG4gICAgcmV0dXJuIGJhc2VVcmw7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICBjb25zdCB7IGhvc3QsIHByb3RvY29sIH0gPSBsb2NhdGlvbiE7XG5cbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtob3N0fWA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VmVyc2lvbiA9ICgpID0+IHtcbiAgcmV0dXJuIFBBQ0tBR0VfVkVSU0lPTjtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgYmluZCA9IHVuY3VycnlUaGlzKHVuY3VycnlUaGlzLmJpbmQpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0KSB7XG4gIGFDYWxsYWJsZShmbik7XG4gIHJldHVybiB0aGF0ID09PSB1bmRlZmluZWQgPyBmbiA6IE5BVElWRV9CSU5EID8gYmluZChmbiwgdGhhdCkgOiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJleHBvcnQgY29uc3QgYnVpbGRQYXRoID0gKHBhcmFtczoge1xuICBlbmRwb2ludE5hbWU6IHN0cmluZztcbiAgZ3Vlc3RTcGFjZUlkPzogbnVtYmVyIHwgc3RyaW5nO1xuICBwcmV2aWV3PzogYm9vbGVhbjtcbn0pID0+IHtcbiAgY29uc3QgeyBlbmRwb2ludE5hbWUsIGd1ZXN0U3BhY2VJZCwgcHJldmlldyB9ID0gcGFyYW1zO1xuICBjb25zdCBndWVzdFBhdGggPSBndWVzdFNwYWNlSWQgIT09IHVuZGVmaW5lZCA/IGAvZ3Vlc3QvJHtndWVzdFNwYWNlSWR9YCA6IFwiXCI7XG4gIGNvbnN0IHByZXZpZXdQYXRoID0gcHJldmlldyA/IFwiL3ByZXZpZXdcIiA6IFwiXCI7XG4gIHJldHVybiBgL2ske2d1ZXN0UGF0aH0vdjEke3ByZXZpZXdQYXRofS8ke2VuZHBvaW50TmFtZX0uanNvbmA7XG59O1xuIiwiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCIuLi9odHRwXCI7XG5pbXBvcnQgeyBidWlsZFBhdGggfSBmcm9tIFwiLi4vdXJsXCI7XG5cbmV4cG9ydCB0eXBlIEVuZHBvaW50TmFtZSA9XG4gIHwgXCJyZWNvcmRcIlxuICB8IFwicmVjb3Jkc1wiXG4gIHwgXCJyZWNvcmQvc3RhdHVzXCJcbiAgfCBcInJlY29yZHMvc3RhdHVzXCJcbiAgfCBcInJlY29yZC9hc3NpZ25lZXNcIjtcblxuZXhwb3J0IGNsYXNzIEJ1bGtSZXF1ZXN0Q2xpZW50IHtcbiAgcHJpdmF0ZSBjbGllbnQ6IEh0dHBDbGllbnQ7XG4gIHByaXZhdGUgZ3Vlc3RTcGFjZUlkPzogbnVtYmVyIHwgc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgUkVRVUVTVFNfTEVOR1RIX0xJTUlUOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoY2xpZW50OiBIdHRwQ2xpZW50LCBndWVzdFNwYWNlSWQ/OiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmd1ZXN0U3BhY2VJZCA9IGd1ZXN0U3BhY2VJZDtcbiAgICB0aGlzLlJFUVVFU1RTX0xFTkdUSF9MSU1JVCA9IDIwO1xuICB9XG5cbiAgcHVibGljIHNlbmQocGFyYW1zOiB7XG4gICAgcmVxdWVzdHM6IEFycmF5PFxuICAgICAgfCB7XG4gICAgICAgICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgICAgICAgYXBpOiBzdHJpbmc7XG4gICAgICAgICAgcGF5bG9hZDogb2JqZWN0O1xuICAgICAgICB9XG4gICAgICB8IHtcbiAgICAgICAgICBtZXRob2Q6IHN0cmluZztcbiAgICAgICAgICBlbmRwb2ludE5hbWU6IEVuZHBvaW50TmFtZTtcbiAgICAgICAgICBwYXlsb2FkOiBvYmplY3Q7XG4gICAgICAgIH1cbiAgICA+O1xuICB9KTogUHJvbWlzZTx7IHJlc3VsdHM6IEFycmF5PHsgW0s6IHN0cmluZ106IGFueSB9PiB9PiB7XG4gICAgY29uc3QgeyByZXF1ZXN0czogcmVxdWVzdHNQYXJhbSB9ID0gcGFyYW1zO1xuXG4gICAgY29uc3QgcmVxdWVzdHMgPSByZXF1ZXN0c1BhcmFtLm1hcCgocmVxdWVzdCkgPT4ge1xuICAgICAgaWYgKFwiZW5kcG9pbnROYW1lXCIgaW4gcmVxdWVzdCkge1xuICAgICAgICBjb25zdCB7IGVuZHBvaW50TmFtZSwgLi4ucmVzdCB9ID0gcmVxdWVzdDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhcGk6IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7IGVuZHBvaW50TmFtZSB9KSxcbiAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfSk7XG5cbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJidWxrUmVxdWVzdFwiLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KHBhdGgsIHsgcmVxdWVzdHMgfSk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQocGFyYW1zOiB7IGVuZHBvaW50TmFtZTogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4gYnVpbGRQYXRoKHtcbiAgICAgIC4uLnBhcmFtcyxcbiAgICAgIGd1ZXN0U3BhY2VJZDogdGhpcy5ndWVzdFNwYWNlSWQsXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiLi4vaHR0cFwiO1xuaW1wb3J0IHsgYnVpbGRQYXRoIH0gZnJvbSBcIi4uL3VybFwiO1xuaW1wb3J0IHtcbiAgQXBwSUQsXG4gIFJlY29yZElELFxuICBSZXZpc2lvbixcbiAgUHJvcGVydGllcyxcbiAgTGFuZyxcbiAgTGF5b3V0LFxuICBWaWV3Rm9yUmVzcG9uc2UsXG4gIFZpZXdGb3JQYXJhbWV0ZXIsXG4gIEFwcCxcbiAgU3RhdGVGb3JSZXNwb25zZSxcbiAgU3RhdGVGb3JQYXJhbWV0ZXIsXG4gIEFjdGlvbkZvclJlc3BvbnNlLFxuICBBY3Rpb25Gb3JQYXJhbWV0ZXIsXG4gIERlcGxveVN0YXR1cyxcbiAgRmllbGRSaWdodEZvclJlc3BvbnNlLFxuICBGaWVsZFJpZ2h0Rm9yUGFyYW1ldGVyLFxuICBBcHBSaWdodEVudGl0eUZvclJlc3BvbnNlLFxuICBBcHBSaWdodEVudGl0eUZvclBhcmFtZXRlcixcbiAgRXZhbHVhdGVkUmVjb3JkUmlnaHQsXG4gIFJlY29yZFJpZ2h0Rm9yUmVzcG9uc2UsXG4gIFJlY29yZFJpZ2h0Rm9yUGFyYW1ldGVyLFxuICBBcHBDdXN0b21pemVTY29wZSxcbiAgQXBwQ3VzdG9taXplRm9yUmVzcG9uc2UsXG4gIEFwcEN1c3RvbWl6ZUZvclBhcmFtZXRlcixcbiAgR2VuZXJhbE5vdGlmaWNhdGlvbkZvclBhcmFtZXRlcixcbiAgR2VuZXJhbE5vdGlmaWNhdGlvbkZvclJlc3BvbnNlLFxuICBQZXJSZWNvcmROb3RpZmljYXRpb25Gb3JQYXJhbWV0ZXIsXG4gIFBlclJlY29yZE5vdGlmaWNhdGlvbkZvclJlc3BvbnNlLFxuICBSZW1pbmRlck5vdGlmaWNhdGlvbkZvclBhcmFtZXRlcixcbiAgUmVtaW5kZXJOb3RpZmljYXRpb25Gb3JSZXNwb25zZSxcbiAgUmVwb3J0Rm9yUGFyYW1ldGVyLFxuICBSZXBvcnRGb3JSZXNwb25zZSxcbiAgQXBwQWN0aW9uc0ZvclBhcmFtZXRlcixcbiAgQXBwQWN0aW9uc0ZvclJlc3BvbnNlLFxufSBmcm9tIFwiLi90eXBlc1wiO1xudHlwZSBSb3dMYXlvdXRGb3JQYXJhbWV0ZXIgPSB7XG4gIHR5cGU6IFwiUk9XXCI7XG4gIGZpZWxkczogQXJyYXk8eyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0+O1xufTtcbnR5cGUgU3VidGFibGVMYXlvdXRGb3JQYXJhbWV0ZXIgPSB7XG4gIHR5cGU6IFwiU1VCVEFCTEVcIjtcbiAgY29kZTogc3RyaW5nO1xuICBmaWVsZHM6IEFycmF5PHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9Pjtcbn07XG50eXBlIEdyb3VwTGF5b3V0Rm9yUGFyYW1ldGVyID0ge1xuICB0eXBlOiBcIkdST1VQXCI7XG4gIGNvZGU6IHN0cmluZztcbiAgbGF5b3V0OiBSb3dMYXlvdXRGb3JQYXJhbWV0ZXJbXTtcbn07XG50eXBlIExheW91dEZvclBhcmFtZXRlciA9IEFycmF5PFxuICBSb3dMYXlvdXRGb3JQYXJhbWV0ZXIgfCBTdWJ0YWJsZUxheW91dEZvclBhcmFtZXRlciB8IEdyb3VwTGF5b3V0Rm9yUGFyYW1ldGVyXG4+O1xudHlwZSBOZXN0ZWRQYXJ0aWFsPFQ+ID0gVCBleHRlbmRzIG9iamVjdFxuICA/IHtcbiAgICAgIFtLIGluIGtleW9mIFRdPzogTmVzdGVkUGFydGlhbDxUW0tdPjtcbiAgICB9XG4gIDogVDtcblxudHlwZSBQcm9wZXJ0aWVzRm9yUGFyYW1ldGVyID0gTmVzdGVkUGFydGlhbDxQcm9wZXJ0aWVzPjtcblxuZXhwb3J0IGNsYXNzIEFwcENsaWVudCB7XG4gIHByaXZhdGUgY2xpZW50OiBIdHRwQ2xpZW50O1xuICBwcml2YXRlIGd1ZXN0U3BhY2VJZD86IG51bWJlciB8IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihjbGllbnQ6IEh0dHBDbGllbnQsIGd1ZXN0U3BhY2VJZD86IG51bWJlciB8IHN0cmluZykge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuZ3Vlc3RTcGFjZUlkID0gZ3Vlc3RTcGFjZUlkO1xuICB9XG5cbiAgcHVibGljIGdldEZvcm1GaWVsZHM8VCBleHRlbmRzIFByb3BlcnRpZXM+KHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgbGFuZz86IExhbmc7XG4gICAgcHJldmlldz86IGJvb2xlYW47XG4gIH0pOiBQcm9taXNlPHsgcHJvcGVydGllczogVDsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgeyBwcmV2aWV3LCAuLi5yZXN0IH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL2Zvcm0vZmllbGRzXCIsXG4gICAgICBwcmV2aWV3LFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQocGF0aCwgeyAuLi5yZXN0IH0pO1xuICB9XG5cbiAgcHVibGljIGFkZEZvcm1GaWVsZHMocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBwcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzRm9yUGFyYW1ldGVyO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL2Zvcm0vZmllbGRzXCIsXG4gICAgICBwcmV2aWV3OiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlRm9ybUZpZWxkcyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHByb3BlcnRpZXM6IFByb3BlcnRpZXNGb3JQYXJhbWV0ZXI7XG4gICAgcmV2aXNpb24/OiBSZXZpc2lvbjtcbiAgfSk6IFByb21pc2U8eyByZXZpc2lvbjogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJhcHAvZm9ybS9maWVsZHNcIixcbiAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZUZvcm1GaWVsZHMocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBmaWVsZHM6IHN0cmluZ1tdO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJhcHAvZm9ybS9maWVsZHNcIixcbiAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmRlbGV0ZShwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGdldEZvcm1MYXlvdXQ8VCBleHRlbmRzIExheW91dD4ocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBwcmV2aWV3PzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8eyBsYXlvdXQ6IFQ7IHJldmlzaW9uOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHsgcHJldmlldywgLi4ucmVzdCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcC9mb3JtL2xheW91dFwiLFxuICAgICAgcHJldmlldyxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KHBhdGgsIHsgLi4ucmVzdCB9KTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVGb3JtTGF5b3V0KHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgbGF5b3V0OiBMYXlvdXRGb3JQYXJhbWV0ZXI7XG4gICAgcmV2aXNpb24/OiBSZXZpc2lvbjtcbiAgfSk6IFByb21pc2U8eyByZXZpc2lvbjogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJhcHAvZm9ybS9sYXlvdXRcIixcbiAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGdldFZpZXdzKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgbGFuZz86IExhbmc7XG4gICAgcHJldmlldz86IGJvb2xlYW47XG4gIH0pOiBQcm9taXNlPHtcbiAgICB2aWV3czogeyBbdmlld05hbWU6IHN0cmluZ106IFZpZXdGb3JSZXNwb25zZSB9O1xuICAgIHJldmlzaW9uOiBzdHJpbmc7XG4gIH0+IHtcbiAgICBjb25zdCB7IHByZXZpZXcsIC4uLnJlc3QgfSA9IHBhcmFtcztcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJhcHAvdmlld3NcIixcbiAgICAgIHByZXZpZXcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCByZXN0KTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVWaWV3cyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHZpZXdzOiB7IFt2aWV3TmFtZTogc3RyaW5nXTogVmlld0ZvclBhcmFtZXRlciB9O1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHtcbiAgICB2aWV3czogeyBbdmlld05hbWU6IHN0cmluZ106IHsgaWQ6IHN0cmluZyB9IH07XG4gICAgcmV2aXNpb246IHN0cmluZztcbiAgfT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcC92aWV3c1wiLFxuICAgICAgcHJldmlldzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXBwKHBhcmFtczogeyBpZDogQXBwSUQgfSk6IFByb21pc2U8QXBwPiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGdldEFwcHMocGFyYW1zOiB7XG4gICAgaWRzPzogQXBwSURbXSB8IG51bGw7XG4gICAgY29kZXM/OiBzdHJpbmdbXSB8IG51bGw7XG4gICAgbmFtZT86IHN0cmluZyB8IG51bGw7XG4gICAgc3BhY2VJZHM/OiBBcnJheTxzdHJpbmcgfCBudW1iZXI+IHwgbnVsbDtcbiAgICBsaW1pdD86IHN0cmluZyB8IG51bWJlcjtcbiAgICBvZmZzZXQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIH0pOiBQcm9taXNlPHsgYXBwczogQXBwW10gfT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcHNcIixcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYWRkQXBwKHBhcmFtczoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzcGFjZT86IHN0cmluZyB8IG51bWJlcjtcbiAgfSk6IFByb21pc2U8eyBhcHA6IHN0cmluZzsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgeyBuYW1lLCBzcGFjZSB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcFwiLFxuICAgICAgcHJldmlldzogdHJ1ZSxcbiAgICB9KTtcbiAgICBpZiAoc3BhY2UpIHtcbiAgICAgIC8vIE5PVEU6IEFsdGhvdWdoIGB0aHJlYWRgIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpbiBSRVNUIEFQSSxcbiAgICAgIC8vIHRoZXJlIGFyZSBubyB2aXN1YWwgcmVwcmVzZW50YXRpb25zIG9mIGFwcHMgYmVpbmcgcmVsYXRlZCB0byB0aHJlYWRzLlxuICAgICAgLy8gTW9yZW92ZXIsIHRoZXJlIGlzIGN1cnJlbnRseSBubyBoZWxwZnVsIHJlYXNvbiB0byBjcmVhdGUgYXBwcyBpbiB0aHJlYWRzIG90aGVyIHRoYW4gdGhlIGRlZmF1bHQgdGhyZWFkLFxuICAgICAgLy8gc28gdGhlIEFQSSBDbGllbnQgc2V0cyB0aGUgZGVmYXVsdCB0aHJlYWQgaWQgaGVyZS5cbiAgICAgIGNvbnN0IHNwYWNlUGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICAgIGVuZHBvaW50TmFtZTogXCJzcGFjZVwiLFxuICAgICAgfSk7XG4gICAgICBjb25zdCB7IGRlZmF1bHRUaHJlYWQgfSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChzcGFjZVBhdGgsIHtcbiAgICAgICAgaWQ6IHNwYWNlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdChwYXRoLCB7IC4uLnBhcmFtcywgdGhyZWFkOiBkZWZhdWx0VGhyZWFkIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdChwYXRoLCB7IG5hbWUgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXBwU2V0dGluZ3MocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBsYW5nPzogTGFuZztcbiAgICBwcmV2aWV3PzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8e1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGljb246XG4gICAgICB8IHtcbiAgICAgICAgICB0eXBlOiBcIkZJTEVcIjtcbiAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICBjb250ZW50VHlwZTogc3RyaW5nO1xuICAgICAgICAgICAgZmlsZUtleTogc3RyaW5nO1xuICAgICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgc2l6ZTogc3RyaW5nO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIHwgeyB0eXBlOiBcIlBSRVNFVFwiOyBrZXk6IHN0cmluZyB9O1xuICAgIHRoZW1lOlxuICAgICAgfCBcIldISVRFXCJcbiAgICAgIHwgXCJDTElQQk9BUkRcIlxuICAgICAgfCBcIkJJTkRFUlwiXG4gICAgICB8IFwiUEVOQ0lMXCJcbiAgICAgIHwgXCJDTElQU1wiXG4gICAgICB8IFwiUkVEXCJcbiAgICAgIHwgXCJCTFVFXCJcbiAgICAgIHwgXCJHUkVFTlwiXG4gICAgICB8IFwiWUVMTE9XXCJcbiAgICAgIHwgXCJCTEFDS1wiO1xuICAgIHJldmlzaW9uOiBzdHJpbmc7XG4gIH0+IHtcbiAgICBjb25zdCB7IHByZXZpZXcsIC4uLnJlc3QgfSA9IHBhcmFtcztcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJhcHAvc2V0dGluZ3NcIixcbiAgICAgIHByZXZpZXcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCByZXN0KTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVBcHBTZXR0aW5ncyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgaWNvbj86XG4gICAgICB8IHtcbiAgICAgICAgICB0eXBlOiBcIkZJTEVcIjtcbiAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICBmaWxlS2V5OiBzdHJpbmc7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfCB7IHR5cGU6IFwiUFJFU0VUXCI7IGtleTogc3RyaW5nIH07XG4gICAgdGhlbWU/OlxuICAgICAgfCBcIldISVRFXCJcbiAgICAgIHwgXCJDTElQQk9BUkRcIlxuICAgICAgfCBcIkJJTkRFUlwiXG4gICAgICB8IFwiUEVOQ0lMXCJcbiAgICAgIHwgXCJDTElQU1wiXG4gICAgICB8IFwiUkVEXCJcbiAgICAgIHwgXCJCTFVFXCJcbiAgICAgIHwgXCJHUkVFTlwiXG4gICAgICB8IFwiWUVMTE9XXCJcbiAgICAgIHwgXCJCTEFDS1wiO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL3NldHRpbmdzXCIsXG4gICAgICBwcmV2aWV3OiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wdXQocGF0aCwgcGFyYW1zKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQcm9jZXNzTWFuYWdlbWVudChwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIGxhbmc/OiBMYW5nO1xuICAgIHByZXZpZXc/OiBib29sZWFuO1xuICB9KTogUHJvbWlzZTx7XG4gICAgZW5hYmxlOiBib29sZWFuO1xuICAgIHN0YXRlczoge1xuICAgICAgW3N0YXR1c05hbWU6IHN0cmluZ106IFN0YXRlRm9yUmVzcG9uc2U7XG4gICAgfTtcbiAgICBhY3Rpb25zOiBBY3Rpb25Gb3JSZXNwb25zZVtdO1xuICAgIHJldmlzaW9uOiBzdHJpbmc7XG4gIH0+IHtcbiAgICBjb25zdCB7IHByZXZpZXcsIC4uLnJlc3QgfSA9IHBhcmFtcztcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJhcHAvc3RhdHVzXCIsXG4gICAgICBwcmV2aWV3LFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQocGF0aCwgcmVzdCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlUHJvY2Vzc01hbmFnZW1lbnQocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBlbmFibGU/OiBib29sZWFuO1xuICAgIHN0YXRlcz86IHsgW3N0YXR1c05hbWU6IHN0cmluZ106IFN0YXRlRm9yUGFyYW1ldGVyIH07XG4gICAgYWN0aW9ucz86IEFjdGlvbkZvclBhcmFtZXRlcltdO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL3N0YXR1c1wiLFxuICAgICAgcHJldmlldzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGVwbG95U3RhdHVzKHBhcmFtczoge1xuICAgIGFwcHM6IEFwcElEW107XG4gIH0pOiBQcm9taXNlPHsgYXBwczogQXJyYXk8eyBhcHA6IHN0cmluZzsgc3RhdHVzOiBEZXBsb3lTdGF0dXMgfT4gfT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcC9kZXBsb3lcIixcbiAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGRlcGxveUFwcChwYXJhbXM6IHtcbiAgICBhcHBzOiBBcnJheTx7IGFwcDogQXBwSUQ7IHJldmlzaW9uPzogUmV2aXNpb24gfT47XG4gICAgcmV2ZXJ0PzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8e30+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJhcHAvZGVwbG95XCIsXG4gICAgICBwcmV2aWV3OiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RmllbGRBY2wocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBwcmV2aWV3PzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8eyByaWdodHM6IEZpZWxkUmlnaHRGb3JSZXNwb25zZVtdOyByZXZpc2lvbjogc3RyaW5nIH0+IHtcbiAgICBjb25zdCB7IHByZXZpZXcsIC4uLnJlc3QgfSA9IHBhcmFtcztcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJmaWVsZC9hY2xcIixcbiAgICAgIHByZXZpZXcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCB7IC4uLnJlc3QgfSk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlRmllbGRBY2wocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICByaWdodHM6IEZpZWxkUmlnaHRGb3JQYXJhbWV0ZXJbXTtcbiAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICB9KTogUHJvbWlzZTx7IHJldmlzaW9uOiBzdHJpbmcgfT4ge1xuICAgIC8vIE5PVEU6IFdoZW4gZXhlY3V0aW5nIHRoaXMgQVBJIHdpdGhvdXQgYHByZXZpZXdgLFxuICAgIC8vIGFsbCBwcmUtbGl2ZSBhcHAncyBzZXR0aW5ncyB3aWxsIGJlIGRlcGxveWVkIHRvIGxpdmUgYXBwLlxuICAgIC8vIFRoaXMgYmVoYXZpb3IgbWF5IG5vdCBiZSB3aGF0IHRoZSB1c2VycyBleHBlY3RlZCxcbiAgICAvLyBzbyB3ZSBkaXNhYmxlIGl0IHRlbXBvcmFyaWx5LlxuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImZpZWxkL2FjbFwiLFxuICAgICAgcHJldmlldzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXBwQWNsKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgcHJldmlldz86IGJvb2xlYW47XG4gIH0pOiBQcm9taXNlPHsgcmlnaHRzOiBBcHBSaWdodEVudGl0eUZvclJlc3BvbnNlW107IHJldmlzaW9uOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHsgcHJldmlldywgLi4ucmVzdCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcC9hY2xcIixcbiAgICAgIHByZXZpZXcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCB7IC4uLnJlc3QgfSk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlQXBwQWNsKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgcmlnaHRzOiBBcHBSaWdodEVudGl0eUZvclBhcmFtZXRlcltdO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgLy8gTk9URTogV2hlbiBleGVjdXRpbmcgdGhpcyBBUEkgd2l0aG91dCBgcHJldmlld2AsXG4gICAgLy8gYWxsIHByZS1saXZlIGFwcCdzIHNldHRpbmdzIHdpbGwgYmUgZGVwbG95ZWQgdG8gbGl2ZSBhcHAuXG4gICAgLy8gVGhpcyBiZWhhdmlvciBtYXkgbm90IGJlIHdoYXQgdGhlIHVzZXJzIGV4cGVjdGVkLFxuICAgIC8vIHNvIHdlIGRpc2FibGUgaXQgdGVtcG9yYXJpbHkuXG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL2FjbFwiLFxuICAgICAgcHJldmlldzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZXZhbHVhdGVSZWNvcmRzQWNsKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgaWRzOiBSZWNvcmRJRFtdO1xuICB9KTogUHJvbWlzZTx7IHJpZ2h0czogRXZhbHVhdGVkUmVjb3JkUmlnaHRbXSB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwicmVjb3Jkcy9hY2wvZXZhbHVhdGVcIixcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVjb3JkQWNsKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgbGFuZz86IExhbmc7XG4gICAgcHJldmlldz86IGJvb2xlYW47XG4gIH0pOiBQcm9taXNlPHsgcmlnaHRzOiBSZWNvcmRSaWdodEZvclJlc3BvbnNlW107IHJldmlzaW9uOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHsgcHJldmlldywgLi4ucmVzdCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZC9hY2xcIixcbiAgICAgIHByZXZpZXcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCB7IC4uLnJlc3QgfSk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlUmVjb3JkQWNsKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgcmlnaHRzOiBSZWNvcmRSaWdodEZvclBhcmFtZXRlcltdO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgLy8gTk9URTogV2hlbiBleGVjdXRpbmcgdGhpcyBBUEkgd2l0aG91dCBgcHJldmlld2AsXG4gICAgLy8gYWxsIHByZS1saXZlIGFwcCdzIHNldHRpbmdzIHdpbGwgYmUgZGVwbG95ZWQgdG8gbGl2ZSBhcHAuXG4gICAgLy8gVGhpcyBiZWhhdmlvciBtYXkgbm90IGJlIHdoYXQgdGhlIHVzZXJzIGV4cGVjdGVkLFxuICAgIC8vIHNvIHdlIGRpc2FibGUgaXQgdGVtcG9yYXJpbHkuXG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwicmVjb3JkL2FjbFwiLFxuICAgICAgcHJldmlldzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXBwQ3VzdG9taXplKHBhcmFtczogeyBhcHA6IEFwcElEOyBwcmV2aWV3PzogYm9vbGVhbiB9KTogUHJvbWlzZTx7XG4gICAgc2NvcGU6IEFwcEN1c3RvbWl6ZVNjb3BlO1xuICAgIGRlc2t0b3A6IEFwcEN1c3RvbWl6ZUZvclJlc3BvbnNlO1xuICAgIG1vYmlsZTogQXBwQ3VzdG9taXplRm9yUmVzcG9uc2U7XG4gICAgcmV2aXNpb246IHN0cmluZztcbiAgfT4ge1xuICAgIGNvbnN0IHsgcHJldmlldywgLi4ucmVzdCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcC9jdXN0b21pemVcIixcbiAgICAgIHByZXZpZXcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCB7IC4uLnJlc3QgfSk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlQXBwQ3VzdG9taXplKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgc2NvcGU/OiBBcHBDdXN0b21pemVTY29wZTtcbiAgICBkZXNrdG9wPzogQXBwQ3VzdG9taXplRm9yUGFyYW1ldGVyO1xuICAgIG1vYmlsZT86IEFwcEN1c3RvbWl6ZUZvclBhcmFtZXRlcjtcbiAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICB9KTogUHJvbWlzZTx7IHJldmlzaW9uOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcC9jdXN0b21pemVcIixcbiAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGdldEdlbmVyYWxOb3RpZmljYXRpb25zKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgcHJldmlldz86IGJvb2xlYW47XG4gIH0pOiBQcm9taXNlPHtcbiAgICBub3RpZmljYXRpb25zOiBHZW5lcmFsTm90aWZpY2F0aW9uRm9yUmVzcG9uc2VbXTtcbiAgICBub3RpZnlUb0NvbW1lbnRlcjogYm9vbGVhbjtcbiAgICByZXZpc2lvbjogc3RyaW5nO1xuICB9PiB7XG4gICAgY29uc3QgeyBwcmV2aWV3LCAuLi5yZXN0IH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL25vdGlmaWNhdGlvbnMvZ2VuZXJhbFwiLFxuICAgICAgcHJldmlldyxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KHBhdGgsIHsgLi4ucmVzdCB9KTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVHZW5lcmFsTm90aWZpY2F0aW9ucyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIG5vdGlmaWNhdGlvbnM/OiBHZW5lcmFsTm90aWZpY2F0aW9uRm9yUGFyYW1ldGVyW107XG4gICAgbm90aWZ5VG9Db21tZW50ZXI/OiBib29sZWFuO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL25vdGlmaWNhdGlvbnMvZ2VuZXJhbFwiLFxuICAgICAgcHJldmlldzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGVyUmVjb3JkTm90aWZpY2F0aW9ucyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIGxhbmc/OiBMYW5nO1xuICAgIHByZXZpZXc/OiBib29sZWFuO1xuICB9KTogUHJvbWlzZTx7XG4gICAgbm90aWZpY2F0aW9uczogUGVyUmVjb3JkTm90aWZpY2F0aW9uRm9yUmVzcG9uc2VbXTtcbiAgICByZXZpc2lvbjogc3RyaW5nO1xuICB9PiB7XG4gICAgY29uc3QgeyBwcmV2aWV3LCAuLi5yZXN0IH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL25vdGlmaWNhdGlvbnMvcGVyUmVjb3JkXCIsXG4gICAgICBwcmV2aWV3LFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQocGF0aCwgcmVzdCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlUGVyUmVjb3JkTm90aWZpY2F0aW9ucyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIG5vdGlmaWNhdGlvbnM6IFBlclJlY29yZE5vdGlmaWNhdGlvbkZvclBhcmFtZXRlcltdO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL25vdGlmaWNhdGlvbnMvcGVyUmVjb3JkXCIsXG4gICAgICBwcmV2aWV3OiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wdXQocGF0aCwgcGFyYW1zKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZW1pbmRlck5vdGlmaWNhdGlvbnMocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBsYW5nPzogTGFuZztcbiAgICBwcmV2aWV3PzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8e1xuICAgIG5vdGlmaWNhdGlvbnM6IFJlbWluZGVyTm90aWZpY2F0aW9uRm9yUmVzcG9uc2VbXTtcbiAgICB0aW1lem9uZTogc3RyaW5nO1xuICAgIHJldmlzaW9uOiBzdHJpbmc7XG4gIH0+IHtcbiAgICBjb25zdCB7IHByZXZpZXcsIC4uLnJlc3QgfSA9IHBhcmFtcztcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJhcHAvbm90aWZpY2F0aW9ucy9yZW1pbmRlclwiLFxuICAgICAgcHJldmlldyxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KHBhdGgsIHJlc3QpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVJlbWluZGVyTm90aWZpY2F0aW9ucyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIG5vdGlmaWNhdGlvbnM/OiBSZW1pbmRlck5vdGlmaWNhdGlvbkZvclBhcmFtZXRlcltdO1xuICAgIHRpbWV6b25lPzogc3RyaW5nO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL25vdGlmaWNhdGlvbnMvcmVtaW5kZXJcIixcbiAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGdldFJlcG9ydHMocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBsYW5nPzogTGFuZztcbiAgICBwcmV2aWV3PzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8e1xuICAgIHJlcG9ydHM6IHsgW3JlcG9ydE5hbWU6IHN0cmluZ106IFJlcG9ydEZvclJlc3BvbnNlIH07XG4gICAgcmV2aXNpb246IHN0cmluZztcbiAgfT4ge1xuICAgIGNvbnN0IHsgcHJldmlldywgLi4ucmVzdCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImFwcC9yZXBvcnRzXCIsXG4gICAgICBwcmV2aWV3LFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQocGF0aCwgcmVzdCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlUmVwb3J0cyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHJlcG9ydHM6IFJlcG9ydEZvclBhcmFtZXRlcjtcbiAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICB9KTogUHJvbWlzZTx7XG4gICAgcmV2aXNpb246IHN0cmluZztcbiAgICByZXBvcnRzOiB7IFtyZXBvcnROYW1lOiBzdHJpbmddOiB7IGlkOiBzdHJpbmcgfSB9O1xuICB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL3JlcG9ydHNcIixcbiAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGdldEFwcEFjdGlvbnMocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBsYW5nPzogTGFuZztcbiAgICBwcmV2aWV3PzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8e1xuICAgIGFjdGlvbnM6IEFwcEFjdGlvbnNGb3JSZXNwb25zZTtcbiAgICByZXZpc2lvbjogc3RyaW5nO1xuICB9PiB7XG4gICAgY29uc3QgeyBwcmV2aWV3LCAuLi5yZXN0IH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL2FjdGlvbnNcIixcbiAgICAgIHByZXZpZXcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCByZXN0KTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVBcHBBY3Rpb25zKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgYWN0aW9uczogQXBwQWN0aW9uc0ZvclBhcmFtZXRlcjtcbiAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICB9KTogUHJvbWlzZTx7XG4gICAgcmV2aXNpb246IHN0cmluZztcbiAgICBhY3Rpb25zOiB7IFthY3Rpb25OYW1lOiBzdHJpbmddOiB7IGlkOiBzdHJpbmcgfSB9O1xuICB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiYXBwL2FjdGlvbnNcIixcbiAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHBhcmFtczoge1xuICAgIGVuZHBvaW50TmFtZTogc3RyaW5nO1xuICAgIHByZXZpZXc/OiBib29sZWFuO1xuICB9KSB7XG4gICAgcmV0dXJuIGJ1aWxkUGF0aCh7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBndWVzdFNwYWNlSWQ6IHRoaXMuZ3Vlc3RTcGFjZUlkLFxuICAgIH0pO1xuICB9XG59XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHNhZmVcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgJGFzc2lnbih7IGI6IDEgfSwgJGFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3ltYm9sIC0tIHNhZmVcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gYWxwaGFiZXQ7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xuICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChvYmplY3RLZXlzKFMpLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoUykpIDogb2JqZWN0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgY2FsbChwcm9wZXJ0eUlzRW51bWVyYWJsZSwgUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduIH0sIHtcbiAgYXNzaWduOiBhc3NpZ25cbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcbiAgcmV0dXJuIFN0cmluZyhhcmd1bWVudCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG4vLyBVQyBCcm93c2VyIGJ1Z1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzEwMDhcbnZhciBNSVNTRURfU1RJQ0tZID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhJFJlZ0V4cCgnYScsICd5Jykuc3RpY2t5O1xufSk7XG5cbnZhciBCUk9LRU5fQ0FSRVQgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9ICRSZWdFeHAoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCUk9LRU5fQ0FSRVQ6IEJST0tFTl9DQVJFVCxcbiAgTUlTU0VEX1NUSUNLWTogTUlTU0VEX1NUSUNLWSxcbiAgVU5TVVBQT1JURURfWTogVU5TVVBQT1JURURfWVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyAmJiAhVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsIi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSwgV1NIICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ3MnKSAtPiAvLi9zIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJy4nLCAncycpO1xuICByZXR1cm4gIShyZS5kb3RBbGwgJiYgcmUuZXhlYygnXFxuJykgJiYgcmUuZmxhZ3MgPT09ICdzJyk7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcoPzxhPmIpJywgJ2cnKSAtPiAvKD88YT5iKS9nIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJyg/PGE+YiknLCAnZycpO1xuICByZXR1cm4gcmUuZXhlYygnYicpLmdyb3Vwcy5hICE9PSAnYicgfHxcbiAgICAnYicucmVwbGFjZShyZSwgJyQ8YT5jJykgIT09ICdiYyc7XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1lbXB0eS1jYXB0dXJpbmctZ3JvdXAsIHJlZ2V4cC9uby1lbXB0eS1ncm91cCwgcmVnZXhwL25vLWxhenktZW5kcyAtLSB0ZXN0aW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tdXNlbGVzcy1xdWFudGlmaWVyIC0tIHRlc3RpbmcgKi9cbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBuYXRpdmVSZXBsYWNlID0gc2hhcmVkKCduYXRpdmUtc3RyaW5nLXJlcGxhY2UnLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgaW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgY2FsbChuYXRpdmVFeGVjLCByZTEsICdhJyk7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWSB8fCBVTlNVUFBPUlRFRF9ET1RfQUxMIHx8IFVOU1VQUE9SVEVEX05DRztcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHJpbmcpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocmUpO1xuICAgIHZhciBzdHIgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgIHZhciByYXcgPSBzdGF0ZS5yYXc7XG4gICAgdmFyIHJlc3VsdCwgcmVDb3B5LCBsYXN0SW5kZXgsIG1hdGNoLCBpLCBvYmplY3QsIGdyb3VwO1xuXG4gICAgaWYgKHJhdykge1xuICAgICAgcmF3Lmxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgIHJlc3VsdCA9IGNhbGwocGF0Y2hlZEV4ZWMsIHJhdywgc3RyKTtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJhdy5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBncm91cHMgPSBzdGF0ZS5ncm91cHM7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IGNhbGwocmVnZXhwRmxhZ3MsIHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gcmVwbGFjZShmbGFncywgJ3knLCAnJyk7XG4gICAgICBpZiAoaW5kZXhPZihmbGFncywgJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gc3RyaW5nU2xpY2Uoc3RyLCByZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgY2hhckF0KHN0ciwgcmUubGFzdEluZGV4IC0gMSkgIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IGNhbGwobmF0aXZlRXhlYywgc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gc3RyaW5nU2xpY2UobWF0Y2guaW5wdXQsIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaFswXSA9IHN0cmluZ1NsaWNlKG1hdGNoWzBdLCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIGNhbGwobmF0aXZlUmVwbGFjZSwgbWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kID0gdW5jdXJyeVRoaXMoLy4vW1NZTUJPTF0pO1xuICAgIHZhciBtZXRob2RzID0gZXhlYyhTWU1CT0wsICcnW0tFWV0sIGZ1bmN0aW9uIChuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKG5hdGl2ZU1ldGhvZCk7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgbWV0aG9kc1swXSk7XG4gICAgcmVkZWZpbmUoUmVnRXhwUHJvdG90eXBlLCBTWU1CT0wsIG1ldGhvZHNbMV0pO1xuICB9XG5cbiAgaWYgKFNIQU0pIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlck9ySW5maW5pdHkocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gY2hhckF0KFMsIHBvc2l0aW9uKVxuICAgICAgICAgIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gc3RyaW5nU2xpY2UoUywgcG9zaXRpb24sIHBvc2l0aW9uICsgMilcbiAgICAgICAgICA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gY2hhckF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAoaXNDYWxsYWJsZShleGVjKSkge1xuICAgIHZhciByZXN1bHQgPSBjYWxsKGV4ZWMsIFIsIFMpO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwpIGFuT2JqZWN0KHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSA9PT0gJ1JlZ0V4cCcpIHJldHVybiBjYWxsKHJlZ2V4cEV4ZWMsIFIsIFMpO1xuICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdtYXRjaCcsIGZ1bmN0aW9uIChNQVRDSCwgbmF0aXZlTWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBtYXRjaGVyID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChyZWdleHAsIE1BVENIKTtcbiAgICAgIHJldHVybiBtYXRjaGVyID8gY2FsbChtYXRjaGVyLCByZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXSh0b1N0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWF0Y2gsIHJ4LCBTKTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuXG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgaXNDYWxsYWJsZShOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxuLy8gYHRoaXNOdW1iZXJWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRoaXNudW1iZXJ2YWx1ZVxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgbHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG5cbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciBOYXRpdmVOdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBOdW1iZXJQcm90b3R5cGUgPSBOYXRpdmVOdW1iZXIucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgYXJyYXlTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG5cbi8vIGBUb051bWVyaWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWVyaWNcbnZhciB0b051bWVyaWMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByaW1WYWx1ZSA9IHRvUHJpbWl0aXZlKHZhbHVlLCAnbnVtYmVyJyk7XG4gIHJldHVybiB0eXBlb2YgcHJpbVZhbHVlID09ICdiaWdpbnQnID8gcHJpbVZhbHVlIDogdG9OdW1iZXIocHJpbVZhbHVlKTtcbn07XG5cbi8vIGBUb051bWJlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbnVtYmVyXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdudW1iZXInKTtcbiAgdmFyIGZpcnN0LCB0aGlyZCwgcmFkaXgsIG1heENvZGUsIGRpZ2l0cywgbGVuZ3RoLCBpbmRleCwgY29kZTtcbiAgaWYgKGlzU3ltYm9sKGl0KSkgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IHRyaW0oaXQpO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChpdCwgMCk7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gY2hhckNvZGVBdChpdCwgMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChjaGFyQ29kZUF0KGl0LCAxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZGlnaXRzID0gYXJyYXlTbGljZShpdCwgMik7XG4gICAgICBsZW5ndGggPSBkaWdpdHMubGVuZ3RoO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvZGUgPSBjaGFyQ29kZUF0KGRpZ2l0cywgaW5kZXgpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuLy8gYE51bWJlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLWNvbnN0cnVjdG9yXG5pZiAoaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpKSB7XG4gIHZhciBOdW1iZXJXcmFwcGVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiBOYXRpdmVOdW1iZXIodG9OdW1lcmljKHZhbHVlKSk7XG4gICAgdmFyIGR1bW15ID0gdGhpcztcbiAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICByZXR1cm4gaXNQcm90b3R5cGVPZihOdW1iZXJQcm90b3R5cGUsIGR1bW15KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IHRoaXNOdW1iZXJWYWx1ZShkdW1teSk7IH0pXG4gICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKE9iamVjdChuKSwgZHVtbXksIE51bWJlcldyYXBwZXIpIDogbjtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IERFU0NSSVBUT1JTID8gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVOdW1iZXIpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVMyMDE1IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVMyMDE1IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04sTUFYX1NBRkVfSU5URUdFUixNSU5fU0FGRV9JTlRFR0VSLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLHBhcnNlRmxvYXQscGFyc2VJbnQsJyArXG4gICAgLy8gRVNOZXh0XG4gICAgJ2Zyb21TdHJpbmcscmFuZ2UnXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzT3duKE5hdGl2ZU51bWJlciwga2V5ID0ga2V5c1tqXSkgJiYgIWhhc093bihOdW1iZXJXcmFwcGVyLCBrZXkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShOdW1iZXJXcmFwcGVyLCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihOYXRpdmVOdW1iZXIsIGtleSkpO1xuICAgIH1cbiAgfVxuICBOdW1iZXJXcmFwcGVyLnByb3RvdHlwZSA9IE51bWJlclByb3RvdHlwZTtcbiAgTnVtYmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTnVtYmVyV3JhcHBlcjtcbiAgcmVkZWZpbmUoZ2xvYmFsLCBOVU1CRVIsIE51bWJlcldyYXBwZXIpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyICRJbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHVuJEluZGV4T2YgPSB1bmN1cnJ5VGhpcyhbXS5pbmRleE9mKTtcblxudmFyIE5FR0FUSVZFX1pFUk8gPSAhIXVuJEluZGV4T2YgJiYgMSAvIHVuJEluZGV4T2YoWzFdLCAxLCAtMCkgPCAwO1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdpbmRleE9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHZhciBmcm9tSW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyB1biRJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkgfHwgMFxuICAgICAgOiAkSW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5ldmVyeTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdldmVyeScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbi8vIGBBcnJheS5pc0FycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuaXNhcnJheVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzQXJyYXk6IGlzQXJyYXlcbn0pO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHVuJFNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKGlzQ29uc3RydWN0b3IoQ29uc3RydWN0b3IpICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuJFNsaWNlKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICBsZWZ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzb2YoZ2xvYmFsLnByb2Nlc3MpID09ICdwcm9jZXNzJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2UnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgbGVuZ3RoLCBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdChpdCkpO1xuICB9XG59KTtcbiIsImltcG9ydCB7IEtpbnRvbmVSZXN0QVBJRXJyb3IgfSBmcm9tIFwiLi9LaW50b25lUmVzdEFQSUVycm9yXCI7XG5cbmV4cG9ydCBjbGFzcyBLaW50b25lQWxsUmVjb3Jkc0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwcm9jZXNzZWRSZWNvcmRzUmVzdWx0OiBhbnk7XG4gIHVucHJvY2Vzc2VkUmVjb3JkczogYW55W107XG4gIGVycm9yOiBLaW50b25lUmVzdEFQSUVycm9yO1xuICBlcnJvckluZGV4PzogbnVtYmVyO1xuXG4gIHByaXZhdGUgc3RhdGljIHBhcnNlRXJyb3JJbmRleChlcnJvcnM6IHsgW2s6IHN0cmluZ106IGFueSB9KSB7XG4gICAgY29uc3QgZmlyc3RFcnJvcktleSA9IE9iamVjdC5rZXlzKGVycm9ycylbMF07XG4gICAgY29uc3QgcmVzdWx0ID0gZmlyc3RFcnJvcktleS5tYXRjaCgvcmVjb3Jkc1xcWyhcXGQrKVxcXS8pO1xuICAgIHJldHVybiByZXN1bHQgPyBOdW1iZXIocmVzdWx0WzFdKSA6IG51bGw7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBleHRyYWN0RXJyb3JJbmRleChcbiAgICBudW1PZlByb2Nlc3NlZFJlY29yZHM6IG51bWJlcixcbiAgICBlcnJvcjogS2ludG9uZVJlc3RBUElFcnJvcixcbiAgICBjaHVua0xlbmd0aDogbnVtYmVyXG4gICkge1xuICAgIGlmIChlcnJvci5idWxrUmVxdWVzdEluZGV4ICE9PSB1bmRlZmluZWQgJiYgZXJyb3IuZXJyb3JzKSB7XG4gICAgICBjb25zdCBlcnJvclBhcnNlUmVzdWx0ID0gS2ludG9uZUFsbFJlY29yZHNFcnJvci5wYXJzZUVycm9ySW5kZXgoXG4gICAgICAgIGVycm9yLmVycm9yc1xuICAgICAgKTtcbiAgICAgIGlmIChlcnJvclBhcnNlUmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgbnVtT2ZQcm9jZXNzZWRSZWNvcmRzICtcbiAgICAgICAgICBlcnJvci5idWxrUmVxdWVzdEluZGV4ICogY2h1bmtMZW5ndGggK1xuICAgICAgICAgIGVycm9yUGFyc2VSZXN1bHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGJ1aWxkRXJyb3JNZXNzYWdlKFxuICAgIG51bU9mUHJvY2Vzc2VkUmVjb3JkczogbnVtYmVyLFxuICAgIG51bU9mQWxsUmVjb3JkczogbnVtYmVyLFxuICAgIGVycm9ySW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZFxuICApIHtcbiAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG4gICAgaWYgKGVycm9ySW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgbWVzc2FnZSA9IGBBbiBlcnJvciBvY2N1cnJlZCBhdCByZWNvcmRzWyR7ZXJyb3JJbmRleH1dLiBgO1xuICAgIH1cbiAgICBtZXNzYWdlICs9IGAke251bU9mUHJvY2Vzc2VkUmVjb3Jkc30vJHtudW1PZkFsbFJlY29yZHN9IHJlY29yZHMgYXJlIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHlgO1xuXG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm9jZXNzZWRSZWNvcmRzUmVzdWx0OiBhbnksXG4gICAgdW5wcm9jZXNzZWRSZWNvcmRzOiBhbnlbXSxcbiAgICBudW1PZkFsbFJlY29yZHM6IG51bWJlcixcbiAgICBlcnJvcjogS2ludG9uZVJlc3RBUElFcnJvcixcbiAgICBjaHVua0xlbmd0aDogbnVtYmVyXG4gICkge1xuICAgIGNvbnN0IG51bU9mUHJvY2Vzc2VkUmVjb3JkcyA9IG51bU9mQWxsUmVjb3JkcyAtIHVucHJvY2Vzc2VkUmVjb3Jkcy5sZW5ndGg7XG5cbiAgICBjb25zdCBlcnJvckluZGV4ID0gS2ludG9uZUFsbFJlY29yZHNFcnJvci5leHRyYWN0RXJyb3JJbmRleChcbiAgICAgIG51bU9mUHJvY2Vzc2VkUmVjb3JkcyxcbiAgICAgIGVycm9yLFxuICAgICAgY2h1bmtMZW5ndGhcbiAgICApO1xuXG4gICAgY29uc3QgbWVzc2FnZSA9IEtpbnRvbmVBbGxSZWNvcmRzRXJyb3IuYnVpbGRFcnJvck1lc3NhZ2UoXG4gICAgICBudW1PZlByb2Nlc3NlZFJlY29yZHMsXG4gICAgICBudW1PZkFsbFJlY29yZHMsXG4gICAgICBlcnJvckluZGV4XG4gICAgKTtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIHRoaXMubmFtZSA9IFwiS2ludG9uZUFsbFJlY29yZHNFcnJvclwiO1xuICAgIHRoaXMucHJvY2Vzc2VkUmVjb3Jkc1Jlc3VsdCA9IHByb2Nlc3NlZFJlY29yZHNSZXN1bHQ7XG4gICAgdGhpcy51bnByb2Nlc3NlZFJlY29yZHMgPSB1bnByb2Nlc3NlZFJlY29yZHM7XG4gICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgIHRoaXMuZXJyb3JJbmRleCA9IGVycm9ySW5kZXg7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC93aWtpL0JyZWFraW5nLUNoYW5nZXMjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXG4gICAgLy8gU2V0IHRoZSBwcm90b3R5cGUgZXhwbGljaXRseS5cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgS2ludG9uZUFsbFJlY29yZHNFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBidWlsZFBhdGggfSBmcm9tIFwiLi8uLi91cmxcIjtcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiLi8uLi9odHRwL1wiO1xuaW1wb3J0IHsgQnVsa1JlcXVlc3RDbGllbnQgfSBmcm9tIFwiLi9CdWxrUmVxdWVzdENsaWVudFwiO1xuaW1wb3J0IHsgS2ludG9uZUFsbFJlY29yZHNFcnJvciB9IGZyb20gXCIuLi9lcnJvci9LaW50b25lQWxsUmVjb3Jkc0Vycm9yXCI7XG5pbXBvcnQge1xuICBBcHBJRCxcbiAgUmVjb3JkSUQsXG4gIFJldmlzaW9uLFxuICBSZWNvcmQsXG4gIFVwZGF0ZUtleSxcbiAgQ29tbWVudElELFxuICBDb21tZW50LFxuICBNZW50aW9uLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuXG5jb25zdCBBRERfUkVDT1JEU19MSU1JVCA9IDEwMDtcbmNvbnN0IFVQREFURV9SRUNPUkRTX0xJTUlUID0gMTAwO1xuY29uc3QgREVMRVRFX1JFQ09SRFNfTElNSVQgPSAxMDA7XG5cbnR5cGUgUmVjb3JkRm9yUGFyYW1ldGVyID0ge1xuICBbZmllbGRDb2RlOiBzdHJpbmddOiB7XG4gICAgdmFsdWU6IHVua25vd247XG4gIH07XG59O1xuXG5leHBvcnQgY2xhc3MgUmVjb3JkQ2xpZW50IHtcbiAgcHJpdmF0ZSBjbGllbnQ6IEh0dHBDbGllbnQ7XG4gIHByaXZhdGUgYnVsa1JlcXVlc3RDbGllbnQ6IEJ1bGtSZXF1ZXN0Q2xpZW50O1xuICBwcml2YXRlIGd1ZXN0U3BhY2VJZD86IG51bWJlciB8IHN0cmluZztcbiAgcHJpdmF0ZSBkaWRXYXJuTWF4aW11bU9mZnNldFZhbHVlOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNsaWVudDogSHR0cENsaWVudCxcbiAgICBidWxrUmVxdWVzdENsaWVudDogQnVsa1JlcXVlc3RDbGllbnQsXG4gICAgZ3Vlc3RTcGFjZUlkPzogbnVtYmVyIHwgc3RyaW5nXG4gICkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuYnVsa1JlcXVlc3RDbGllbnQgPSBidWxrUmVxdWVzdENsaWVudDtcbiAgICB0aGlzLmd1ZXN0U3BhY2VJZCA9IGd1ZXN0U3BhY2VJZDtcbiAgICB0aGlzLmRpZFdhcm5NYXhpbXVtT2Zmc2V0VmFsdWUgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZWNvcmQ8VCBleHRlbmRzIFJlY29yZD4ocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBpZDogUmVjb3JkSUQ7XG4gIH0pOiBQcm9taXNlPHsgcmVjb3JkOiBUIH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJyZWNvcmRcIixcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgYWRkUmVjb3JkKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgcmVjb3JkPzogUmVjb3JkRm9yUGFyYW1ldGVyO1xuICB9KTogUHJvbWlzZTx7IGlkOiBzdHJpbmc7IHJldmlzaW9uOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZFwiLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlUmVjb3JkKFxuICAgIHBhcmFtczpcbiAgICAgIHwge1xuICAgICAgICAgIGFwcDogQXBwSUQ7XG4gICAgICAgICAgaWQ6IFJlY29yZElEO1xuICAgICAgICAgIHJlY29yZD86IFJlY29yZEZvclBhcmFtZXRlcjtcbiAgICAgICAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICAgICAgICB9XG4gICAgICB8IHtcbiAgICAgICAgICBhcHA6IEFwcElEO1xuICAgICAgICAgIHVwZGF0ZUtleTogVXBkYXRlS2V5O1xuICAgICAgICAgIHJlY29yZD86IFJlY29yZEZvclBhcmFtZXRlcjtcbiAgICAgICAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICAgICAgICB9XG4gICk6IFByb21pc2U8eyByZXZpc2lvbjogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJyZWNvcmRcIixcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBzZXJ0UmVjb3JkKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgdXBkYXRlS2V5OiBVcGRhdGVLZXk7XG4gICAgcmVjb3JkPzogUmVjb3JkRm9yUGFyYW1ldGVyO1xuICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gIH0pOiBQcm9taXNlPHsgaWQ6IHN0cmluZzsgcmV2aXNpb246IHN0cmluZyB9PiB7XG4gICAgY29uc3QgeyBhcHAsIHVwZGF0ZUtleSwgcmVjb3JkIH0gPSBwYXJhbXM7XG4gICAgLy8gaWYgdGhlIGNsaWVudCBjYW4ndCBnZXQgYSByZWNvcmQgbWF0Y2hlcyBgdXBkYXRlS2V5YCwgdXNlIGBhZGRSZWNvcmRgXG4gICAgY29uc3QgeyByZWNvcmRzIH0gPSBhd2FpdCB0aGlzLmdldFJlY29yZHMoe1xuICAgICAgYXBwLFxuICAgICAgcXVlcnk6IGAke3VwZGF0ZUtleS5maWVsZH0gPSBcIiR7dXBkYXRlS2V5LnZhbHVlfVwiYCxcbiAgICB9KTtcbiAgICBpZiAocmVjb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAocmVjb3Jkc1swXS4kaWQudHlwZSA9PT0gXCJfX0lEX19cIikge1xuICAgICAgICBjb25zdCB7IHJldmlzaW9uIH0gPSBhd2FpdCB0aGlzLnVwZGF0ZVJlY29yZChwYXJhbXMpO1xuICAgICAgICByZXR1cm4geyBpZDogcmVjb3Jkc1swXS4kaWQudmFsdWUsIHJldmlzaW9uIH07XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTWlzc2luZyBgJGlkYCBpbiBgZ2V0UmVjb3Jkc2AgcmVzcG9uc2UuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBLaW50b25lIFJFU1QgQVBJIENsaWVudC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFkZFJlY29yZCh7XG4gICAgICBhcHAsXG4gICAgICByZWNvcmQ6IE9iamVjdC5hc3NpZ24oe30sIHJlY29yZCwge1xuICAgICAgICBbdXBkYXRlS2V5LmZpZWxkXTogeyB2YWx1ZTogdXBkYXRlS2V5LnZhbHVlIH0sXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFRPRE86IGByZWNvcmRzYCB0eXBlIGluIHJldHVybiB0eXBlIHNob3VsZCBiZSBmaWx0ZXJlZCBieSBgZmllbGRzYC5cbiAgcHVibGljIGFzeW5jIGdldFJlY29yZHM8VCBleHRlbmRzIFJlY29yZD4ocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBmaWVsZHM/OiBzdHJpbmdbXTtcbiAgICBxdWVyeT86IHN0cmluZztcbiAgICB0b3RhbENvdW50PzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8eyByZWNvcmRzOiBUW107IHRvdGFsQ291bnQ6IHN0cmluZyB8IG51bGwgfT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZHNcIixcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldDx7XG4gICAgICByZWNvcmRzOiBUW107XG4gICAgICB0b3RhbENvdW50OiBzdHJpbmcgfCBudWxsO1xuICAgIH0+KHBhdGgsIHBhcmFtcyk7XG4gICAgdGhpcy53YXJuTWF4aW11bU9mZnNldFZhbHVlSWZOZWVkZWQocGFyYW1zLnF1ZXJ5KTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICBwcml2YXRlIHdhcm5NYXhpbXVtT2Zmc2V0VmFsdWVJZk5lZWRlZChxdWVyeT86IHN0cmluZykge1xuICAgIGlmIChxdWVyeSkge1xuICAgICAgY29uc3QgcmVnZXhwID0gL29mZnNldFxccysoXFxkKykvaTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHF1ZXJ5Lm1hdGNoKHJlZ2V4cCk7XG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLmRpZFdhcm5NYXhpbXVtT2Zmc2V0VmFsdWUgJiZcbiAgICAgICAgcmVzdWx0ICYmXG4gICAgICAgIE51bWJlcihyZXN1bHRbMV0pID4gMTAwMDBcbiAgICAgICkge1xuICAgICAgICB0aGlzLmRpZFdhcm5NYXhpbXVtT2Zmc2V0VmFsdWUgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJXYXJuaW5nOiBUaGUgbWF4aW11bSBvZmZzZXQgdmFsdWUgd2lsbCBiZSBsaW1pdGVkIHRvIDEwLDAwMCBpbiB0aGUgZnV0dXJlLiBQbGVhc2UgdXNlIGBjcmVhdGVDdXJzb3IoKWAgYW5kIGBnZXRSZWNvcmRzQnlDdXJzb3IoKWAgaW5zdGVhZC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhZGRSZWNvcmRzKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgcmVjb3JkczogUmVjb3JkRm9yUGFyYW1ldGVyW107XG4gIH0pOiBQcm9taXNlPHtcbiAgICBpZHM6IHN0cmluZ1tdO1xuICAgIHJldmlzaW9uczogc3RyaW5nW107XG4gICAgcmVjb3JkczogQXJyYXk8eyBpZDogc3RyaW5nOyByZXZpc2lvbjogc3RyaW5nIH0+O1xuICB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwicmVjb3Jkc1wiLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgaWRzLCByZXZpc2lvbnMgfSA9IGF3YWl0IHRoaXMuY2xpZW50LnBvc3Q8e1xuICAgICAgaWRzOiBzdHJpbmdbXTtcbiAgICAgIHJldmlzaW9uczogc3RyaW5nW107XG4gICAgfT4ocGF0aCwgcGFyYW1zKTtcbiAgICByZXR1cm4ge1xuICAgICAgaWRzLFxuICAgICAgcmV2aXNpb25zLFxuICAgICAgcmVjb3JkczogaWRzLm1hcCgoaWQsIGkpID0+ICh7IGlkLCByZXZpc2lvbjogcmV2aXNpb25zW2ldIH0pKSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVJlY29yZHMocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICByZWNvcmRzOiBBcnJheTxcbiAgICAgIHwgeyBpZDogUmVjb3JkSUQ7IHJlY29yZD86IFJlY29yZEZvclBhcmFtZXRlcjsgcmV2aXNpb24/OiBSZXZpc2lvbiB9XG4gICAgICB8IHtcbiAgICAgICAgICB1cGRhdGVLZXk6IFVwZGF0ZUtleTtcbiAgICAgICAgICByZWNvcmQ/OiBSZWNvcmRGb3JQYXJhbWV0ZXI7XG4gICAgICAgICAgcmV2aXNpb24/OiBSZXZpc2lvbjtcbiAgICAgICAgfVxuICAgID47XG4gIH0pOiBQcm9taXNlPHsgcmVjb3JkczogQXJyYXk8eyBpZDogc3RyaW5nOyByZXZpc2lvbjogc3RyaW5nIH0+IH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJyZWNvcmRzXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZVJlY29yZHMocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBpZHM6IFJlY29yZElEW107XG4gICAgcmV2aXNpb25zPzogUmV2aXNpb25bXTtcbiAgfSk6IFByb21pc2U8e30+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJyZWNvcmRzXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmRlbGV0ZShwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZUN1cnNvcihwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIGZpZWxkcz86IHN0cmluZ1tdO1xuICAgIHF1ZXJ5Pzogc3RyaW5nO1xuICAgIHNpemU/OiBudW1iZXIgfCBzdHJpbmc7XG4gIH0pOiBQcm9taXNlPHsgaWQ6IHN0cmluZzsgdG90YWxDb3VudDogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJyZWNvcmRzL2N1cnNvclwiLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVjb3Jkc0J5Q3Vyc29yPFQgZXh0ZW5kcyBSZWNvcmQ+KHBhcmFtczoge1xuICAgIGlkOiBzdHJpbmc7XG4gIH0pOiBQcm9taXNlPHtcbiAgICByZWNvcmRzOiBUW107XG4gICAgbmV4dDogYm9vbGVhbjtcbiAgfT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZHMvY3Vyc29yXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZUN1cnNvcihwYXJhbXM6IHsgaWQ6IHN0cmluZyB9KTogUHJvbWlzZTx7fT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZHMvY3Vyc29yXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmRlbGV0ZShwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEFsbFJlY29yZHM8VCBleHRlbmRzIFJlY29yZD4ocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICBmaWVsZHM/OiBzdHJpbmdbXTtcbiAgICBjb25kaXRpb24/OiBzdHJpbmc7XG4gICAgb3JkZXJCeT86IHN0cmluZztcbiAgICB3aXRoQ3Vyc29yPzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8VFtdPiB7XG4gICAgY29uc3QgeyBjb25kaXRpb24sIG9yZGVyQnksIHdpdGhDdXJzb3IgPSB0cnVlLCAuLi5yZXN0IH0gPSBwYXJhbXM7XG4gICAgaWYgKCFvcmRlckJ5KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBbGxSZWNvcmRzV2l0aElkKHsgLi4ucmVzdCwgY29uZGl0aW9uIH0pO1xuICAgIH1cbiAgICBpZiAod2l0aEN1cnNvcikge1xuICAgICAgY29uc3QgY29uZGl0aW9uUXVlcnkgPSBjb25kaXRpb24gPyBgJHtjb25kaXRpb259IGAgOiBcIlwiO1xuICAgICAgY29uc3QgcXVlcnkgPSBgJHtjb25kaXRpb25RdWVyeX0ke29yZGVyQnkgPyBgb3JkZXIgYnkgJHtvcmRlckJ5fWAgOiBcIlwifWA7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBbGxSZWNvcmRzV2l0aEN1cnNvcih7IC4uLnJlc3QsIHF1ZXJ5IH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRBbGxSZWNvcmRzV2l0aE9mZnNldCh7IC4uLnJlc3QsIG9yZGVyQnksIGNvbmRpdGlvbiB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRBbGxSZWNvcmRzV2l0aElkPFQgZXh0ZW5kcyBSZWNvcmQ+KHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgZmllbGRzPzogc3RyaW5nW107XG4gICAgY29uZGl0aW9uPzogc3RyaW5nO1xuICB9KTogUHJvbWlzZTxUW10+IHtcbiAgICBjb25zdCB7IGZpZWxkczogb3JpZ2luYWxGaWVsZHMsIC4uLnJlc3QgfSA9IHBhcmFtcztcbiAgICBsZXQgZmllbGRzID0gb3JpZ2luYWxGaWVsZHM7XG4gICAgLy8gQXBwZW5kICRpZCBpZiAkaWQgZG9lc24ndCBleGlzdCBpbiBmaWVsZHNcbiAgICBpZiAoZmllbGRzICYmIGZpZWxkcy5sZW5ndGggPiAwICYmIGZpZWxkcy5pbmRleE9mKFwiJGlkXCIpID09PSAtMSkge1xuICAgICAgZmllbGRzID0gWy4uLmZpZWxkcywgXCIkaWRcIl07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldEFsbFJlY29yZHNSZWN1cnNpdmVXaXRoSWQoeyAuLi5yZXN0LCBmaWVsZHMgfSwgXCIwXCIsIFtdKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0QWxsUmVjb3Jkc1JlY3Vyc2l2ZVdpdGhJZDxUIGV4dGVuZHMgUmVjb3JkPihcbiAgICBwYXJhbXM6IHtcbiAgICAgIGFwcDogQXBwSUQ7XG4gICAgICBmaWVsZHM/OiBzdHJpbmdbXTtcbiAgICAgIGNvbmRpdGlvbj86IHN0cmluZztcbiAgICB9LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcmVjb3JkczogVFtdXG4gICk6IFByb21pc2U8VFtdPiB7XG4gICAgY29uc3QgR0VUX1JFQ09SRFNfTElNSVQgPSA1MDA7XG5cbiAgICBjb25zdCB7IGNvbmRpdGlvbiwgLi4ucmVzdCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGNvbmRpdGlvblF1ZXJ5ID0gY29uZGl0aW9uID8gYCgke2NvbmRpdGlvbn0pIGFuZCBgIDogXCJcIjtcbiAgICBjb25zdCBxdWVyeSA9IGAke2NvbmRpdGlvblF1ZXJ5fSRpZCA+ICR7aWR9IG9yZGVyIGJ5ICRpZCBhc2MgbGltaXQgJHtHRVRfUkVDT1JEU19MSU1JVH1gO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0UmVjb3JkczxUPih7IC4uLnJlc3QsIHF1ZXJ5IH0pO1xuICAgIGNvbnN0IGFsbFJlY29yZHMgPSByZWNvcmRzLmNvbmNhdChyZXN1bHQucmVjb3Jkcyk7XG4gICAgaWYgKHJlc3VsdC5yZWNvcmRzLmxlbmd0aCA8IEdFVF9SRUNPUkRTX0xJTUlUKSB7XG4gICAgICByZXR1cm4gYWxsUmVjb3JkcztcbiAgICB9XG4gICAgY29uc3QgbGFzdFJlY29yZCA9IHJlc3VsdC5yZWNvcmRzW3Jlc3VsdC5yZWNvcmRzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0UmVjb3JkLiRpZC50eXBlID09PSBcIl9fSURfX1wiKSB7XG4gICAgICBjb25zdCBsYXN0SWQgPSBsYXN0UmVjb3JkLiRpZC52YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzLmdldEFsbFJlY29yZHNSZWN1cnNpdmVXaXRoSWQocGFyYW1zLCBsYXN0SWQsIGFsbFJlY29yZHMpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIk1pc3NpbmcgYCRpZGAgaW4gYGdldFJlY29yZHNgIHJlc3BvbnNlLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gS2ludG9uZSBSRVNUIEFQSSBDbGllbnQuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRBbGxSZWNvcmRzV2l0aE9mZnNldDxUIGV4dGVuZHMgUmVjb3JkPihwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIGZpZWxkcz86IHN0cmluZ1tdO1xuICAgIGNvbmRpdGlvbj86IHN0cmluZztcbiAgICBvcmRlckJ5Pzogc3RyaW5nO1xuICB9KTogUHJvbWlzZTxUW10+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRBbGxSZWNvcmRzUmVjdXJzaXZlV2l0aE9mZnNldChwYXJhbXMsIDAsIFtdKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0QWxsUmVjb3Jkc1JlY3Vyc2l2ZVdpdGhPZmZzZXQ8VCBleHRlbmRzIFJlY29yZD4oXG4gICAgcGFyYW1zOiB7XG4gICAgICBhcHA6IEFwcElEO1xuICAgICAgZmllbGRzPzogc3RyaW5nW107XG4gICAgICBjb25kaXRpb24/OiBzdHJpbmc7XG4gICAgICBvcmRlckJ5Pzogc3RyaW5nO1xuICAgIH0sXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgcmVjb3JkczogVFtdXG4gICk6IFByb21pc2U8VFtdPiB7XG4gICAgY29uc3QgR0VUX1JFQ09SRFNfTElNSVQgPSA1MDA7XG5cbiAgICBjb25zdCB7IGNvbmRpdGlvbiwgb3JkZXJCeSwgLi4ucmVzdCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGNvbmRpdGlvblF1ZXJ5ID0gY29uZGl0aW9uID8gYCR7Y29uZGl0aW9ufSBgIDogXCJcIjtcbiAgICBjb25zdCBxdWVyeSA9IGAke2NvbmRpdGlvblF1ZXJ5fSR7XG4gICAgICBvcmRlckJ5ID8gYG9yZGVyIGJ5ICR7b3JkZXJCeX0gYCA6IFwiXCJcbiAgICB9bGltaXQgJHtHRVRfUkVDT1JEU19MSU1JVH0gb2Zmc2V0ICR7b2Zmc2V0fWA7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRSZWNvcmRzPFQ+KHsgLi4ucmVzdCwgcXVlcnkgfSk7XG4gICAgY29uc3QgYWxsUmVjb3JkcyA9IHJlY29yZHMuY29uY2F0KHJlc3VsdC5yZWNvcmRzKTtcbiAgICBpZiAocmVzdWx0LnJlY29yZHMubGVuZ3RoIDwgR0VUX1JFQ09SRFNfTElNSVQpIHtcbiAgICAgIHJldHVybiBhbGxSZWNvcmRzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldEFsbFJlY29yZHNSZWN1cnNpdmVXaXRoT2Zmc2V0KFxuICAgICAgcGFyYW1zLFxuICAgICAgb2Zmc2V0ICsgR0VUX1JFQ09SRFNfTElNSVQsXG4gICAgICBhbGxSZWNvcmRzXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRBbGxSZWNvcmRzV2l0aEN1cnNvcjxUIGV4dGVuZHMgUmVjb3JkPihwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIGZpZWxkcz86IHN0cmluZ1tdO1xuICAgIHF1ZXJ5Pzogc3RyaW5nO1xuICB9KTogUHJvbWlzZTxUW10+IHtcbiAgICBjb25zdCB7IGlkIH0gPSBhd2FpdCB0aGlzLmNyZWF0ZUN1cnNvcihwYXJhbXMpO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRBbGxSZWNvcmRzUmVjdXJzaXZlQnlDdXJzb3I8VD4oaWQsIFtdKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYXdhaXQgdGhpcy5kZWxldGVDdXJzb3IoeyBpZCB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0QWxsUmVjb3Jkc1JlY3Vyc2l2ZUJ5Q3Vyc29yPFQgZXh0ZW5kcyBSZWNvcmQ+KFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcmVjb3JkczogVFtdXG4gICk6IFByb21pc2U8VFtdPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRSZWNvcmRzQnlDdXJzb3I8VD4oeyBpZCB9KTtcbiAgICBjb25zdCBhbGxSZWNvcmRzID0gcmVjb3Jkcy5jb25jYXQocmVzdWx0LnJlY29yZHMpO1xuICAgIGlmIChyZXN1bHQubmV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsUmVjb3Jkc1JlY3Vyc2l2ZUJ5Q3Vyc29yKGlkLCBhbGxSZWNvcmRzKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbFJlY29yZHM7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYWRkQWxsUmVjb3JkcyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHJlY29yZHM6IFJlY29yZEZvclBhcmFtZXRlcltdO1xuICB9KTogUHJvbWlzZTx7IHJlY29yZHM6IEFycmF5PHsgaWQ6IHN0cmluZzsgcmV2aXNpb246IHN0cmluZyB9PiB9PiB7XG4gICAgaWYgKFxuICAgICAgIXBhcmFtcy5yZWNvcmRzLmV2ZXJ5KFxuICAgICAgICAocmVjb3JkKSA9PiAhQXJyYXkuaXNBcnJheShyZWNvcmQpICYmIHJlY29yZCBpbnN0YW5jZW9mIE9iamVjdFxuICAgICAgKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidGhlIGByZWNvcmRzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBhcnJheSBvZiBvYmplY3QuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hZGRBbGxSZWNvcmRzUmVjdXJzaXZlKHBhcmFtcywgcGFyYW1zLnJlY29yZHMubGVuZ3RoLCBbXSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFkZEFsbFJlY29yZHNSZWN1cnNpdmUoXG4gICAgcGFyYW1zOiB7IGFwcDogQXBwSUQ7IHJlY29yZHM6IFJlY29yZEZvclBhcmFtZXRlcltdIH0sXG4gICAgbnVtT2ZBbGxSZWNvcmRzOiBudW1iZXIsXG4gICAgcmVzdWx0czogQXJyYXk8eyBpZDogc3RyaW5nOyByZXZpc2lvbjogc3RyaW5nIH0+XG4gICk6IFByb21pc2U8eyByZWNvcmRzOiBBcnJheTx7IGlkOiBzdHJpbmc7IHJldmlzaW9uOiBzdHJpbmcgfT4gfT4ge1xuICAgIGNvbnN0IENIVU5LX0xFTkdUSCA9XG4gICAgICB0aGlzLmJ1bGtSZXF1ZXN0Q2xpZW50LlJFUVVFU1RTX0xFTkdUSF9MSU1JVCAqIEFERF9SRUNPUkRTX0xJTUlUO1xuICAgIGNvbnN0IHsgYXBwLCByZWNvcmRzIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVjb3Jkc0NodW5rID0gcmVjb3Jkcy5zbGljZSgwLCBDSFVOS19MRU5HVEgpO1xuICAgIGlmIChyZWNvcmRzQ2h1bmsubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4geyByZWNvcmRzOiByZXN1bHRzIH07XG4gICAgfVxuICAgIGxldCBuZXdSZXN1bHRzO1xuICAgIHRyeSB7XG4gICAgICBuZXdSZXN1bHRzID0gYXdhaXQgdGhpcy5hZGRBbGxSZWNvcmRzV2l0aEJ1bGtSZXF1ZXN0KHtcbiAgICAgICAgYXBwLFxuICAgICAgICByZWNvcmRzOiByZWNvcmRzQ2h1bmssXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIHRocm93IG5ldyBLaW50b25lQWxsUmVjb3Jkc0Vycm9yKFxuICAgICAgICB7IHJlY29yZHM6IHJlc3VsdHMgfSxcbiAgICAgICAgcmVjb3JkcyxcbiAgICAgICAgbnVtT2ZBbGxSZWNvcmRzLFxuICAgICAgICBlLFxuICAgICAgICBBRERfUkVDT1JEU19MSU1JVFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYWRkQWxsUmVjb3Jkc1JlY3Vyc2l2ZShcbiAgICAgIHtcbiAgICAgICAgYXBwLFxuICAgICAgICByZWNvcmRzOiByZWNvcmRzLnNsaWNlKENIVU5LX0xFTkdUSCksXG4gICAgICB9LFxuICAgICAgbnVtT2ZBbGxSZWNvcmRzLFxuICAgICAgcmVzdWx0cy5jb25jYXQobmV3UmVzdWx0cylcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhZGRBbGxSZWNvcmRzV2l0aEJ1bGtSZXF1ZXN0KHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgcmVjb3JkczogUmVjb3JkRm9yUGFyYW1ldGVyW107XG4gIH0pOiBQcm9taXNlPFxuICAgIEFycmF5PHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgICByZXZpc2lvbjogc3RyaW5nO1xuICAgIH0+XG4gID4ge1xuICAgIGNvbnN0IHNlcGFyYXRlZFJlY29yZHMgPSB0aGlzLnNlcGFyYXRlQXJyYXlSZWN1cnNpdmUoXG4gICAgICBBRERfUkVDT1JEU19MSU1JVCxcbiAgICAgIFtdLFxuICAgICAgcGFyYW1zLnJlY29yZHNcbiAgICApO1xuICAgIGNvbnN0IHJlcXVlc3RzID0gc2VwYXJhdGVkUmVjb3Jkcy5tYXAoKHJlY29yZHMpID0+ICh7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZHNcIiBhcyBjb25zdCxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgYXBwOiBwYXJhbXMuYXBwLFxuICAgICAgICByZWNvcmRzLFxuICAgICAgfSxcbiAgICB9KSk7XG4gICAgY29uc3QgcmVzdWx0cyA9IChhd2FpdCB0aGlzLmJ1bGtSZXF1ZXN0Q2xpZW50LnNlbmQoeyByZXF1ZXN0cyB9KSlcbiAgICAgIC5yZXN1bHRzIGFzIEFycmF5PHsgaWRzOiBzdHJpbmdbXTsgcmV2aXNpb25zOiBzdHJpbmdbXSB9PjtcbiAgICByZXR1cm4gcmVzdWx0c1xuICAgICAgLm1hcCgocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaWRzLCByZXZpc2lvbnMgfSA9IHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIGlkcy5tYXAoKGlkLCBpKSA9PiAoeyBpZCwgcmV2aXNpb246IHJldmlzaW9uc1tpXSB9KSk7XG4gICAgICB9KVxuICAgICAgLnJlZHVjZSgoYWNjLCByZWNvcmRzKSA9PiB7XG4gICAgICAgIHJldHVybiBhY2MuY29uY2F0KHJlY29yZHMpO1xuICAgICAgfSwgW10pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZUFsbFJlY29yZHMocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICByZWNvcmRzOiBBcnJheTxcbiAgICAgIHwgeyBpZDogUmVjb3JkSUQ7IHJlY29yZD86IFJlY29yZEZvclBhcmFtZXRlcjsgcmV2aXNpb24/OiBSZXZpc2lvbiB9XG4gICAgICB8IHtcbiAgICAgICAgICB1cGRhdGVLZXk6IFVwZGF0ZUtleTtcbiAgICAgICAgICByZWNvcmQ/OiBSZWNvcmRGb3JQYXJhbWV0ZXI7XG4gICAgICAgICAgcmV2aXNpb24/OiBSZXZpc2lvbjtcbiAgICAgICAgfVxuICAgID47XG4gIH0pOiBQcm9taXNlPHsgcmVjb3JkczogQXJyYXk8eyBpZDogc3RyaW5nOyByZXZpc2lvbjogc3RyaW5nIH0+IH0+IHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVBbGxSZWNvcmRzUmVjdXJzaXZlKHBhcmFtcywgcGFyYW1zLnJlY29yZHMubGVuZ3RoLCBbXSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHVwZGF0ZUFsbFJlY29yZHNSZWN1cnNpdmUoXG4gICAgcGFyYW1zOiB7XG4gICAgICBhcHA6IEFwcElEO1xuICAgICAgcmVjb3JkczogQXJyYXk8XG4gICAgICAgIHwgeyBpZDogUmVjb3JkSUQ7IHJlY29yZD86IFJlY29yZEZvclBhcmFtZXRlcjsgcmV2aXNpb24/OiBSZXZpc2lvbiB9XG4gICAgICAgIHwge1xuICAgICAgICAgICAgdXBkYXRlS2V5OiBVcGRhdGVLZXk7XG4gICAgICAgICAgICByZWNvcmQ/OiBSZWNvcmRGb3JQYXJhbWV0ZXI7XG4gICAgICAgICAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICAgICAgICAgIH1cbiAgICAgID47XG4gICAgfSxcbiAgICBudW1PZkFsbFJlY29yZHM6IG51bWJlcixcbiAgICByZXN1bHRzOiBBcnJheTx7IGlkOiBzdHJpbmc7IHJldmlzaW9uOiBzdHJpbmcgfT5cbiAgKTogUHJvbWlzZTx7IHJlY29yZHM6IEFycmF5PHsgaWQ6IHN0cmluZzsgcmV2aXNpb246IHN0cmluZyB9PiB9PiB7XG4gICAgY29uc3QgQ0hVTktfTEVOR1RIID1cbiAgICAgIHRoaXMuYnVsa1JlcXVlc3RDbGllbnQuUkVRVUVTVFNfTEVOR1RIX0xJTUlUICogVVBEQVRFX1JFQ09SRFNfTElNSVQ7XG4gICAgY29uc3QgeyBhcHAsIHJlY29yZHMgfSA9IHBhcmFtcztcbiAgICBjb25zdCByZWNvcmRzQ2h1bmsgPSByZWNvcmRzLnNsaWNlKDAsIENIVU5LX0xFTkdUSCk7XG4gICAgaWYgKHJlY29yZHNDaHVuay5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7IHJlY29yZHM6IHJlc3VsdHMgfTtcbiAgICB9XG4gICAgbGV0IG5ld1Jlc3VsdHM7XG4gICAgdHJ5IHtcbiAgICAgIG5ld1Jlc3VsdHMgPSBhd2FpdCB0aGlzLnVwZGF0ZUFsbFJlY29yZHNXaXRoQnVsa1JlcXVlc3Qoe1xuICAgICAgICBhcHAsXG4gICAgICAgIHJlY29yZHM6IHJlY29yZHNDaHVuayxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgdGhyb3cgbmV3IEtpbnRvbmVBbGxSZWNvcmRzRXJyb3IoXG4gICAgICAgIHsgcmVjb3JkczogcmVzdWx0cyB9LFxuICAgICAgICByZWNvcmRzLFxuICAgICAgICBudW1PZkFsbFJlY29yZHMsXG4gICAgICAgIGUsXG4gICAgICAgIFVQREFURV9SRUNPUkRTX0xJTUlUXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51cGRhdGVBbGxSZWNvcmRzUmVjdXJzaXZlKFxuICAgICAge1xuICAgICAgICBhcHAsXG4gICAgICAgIHJlY29yZHM6IHJlY29yZHMuc2xpY2UoQ0hVTktfTEVOR1RIKSxcbiAgICAgIH0sXG4gICAgICBudW1PZkFsbFJlY29yZHMsXG4gICAgICByZXN1bHRzLmNvbmNhdChuZXdSZXN1bHRzKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHVwZGF0ZUFsbFJlY29yZHNXaXRoQnVsa1JlcXVlc3QocGFyYW1zOiB7XG4gICAgYXBwOiBBcHBJRDtcbiAgICByZWNvcmRzOiBBcnJheTxcbiAgICAgIHwgeyBpZDogUmVjb3JkSUQ7IHJlY29yZD86IFJlY29yZEZvclBhcmFtZXRlcjsgcmV2aXNpb24/OiBSZXZpc2lvbiB9XG4gICAgICB8IHtcbiAgICAgICAgICB1cGRhdGVLZXk6IFVwZGF0ZUtleTtcbiAgICAgICAgICByZWNvcmQ/OiBSZWNvcmRGb3JQYXJhbWV0ZXI7XG4gICAgICAgICAgcmV2aXNpb24/OiBSZXZpc2lvbjtcbiAgICAgICAgfVxuICAgID47XG4gIH0pOiBQcm9taXNlPEFycmF5PHsgaWQ6IHN0cmluZzsgcmV2aXNpb246IHN0cmluZyB9Pj4ge1xuICAgIGNvbnN0IHNlcGFyYXRlZFJlY29yZHMgPSB0aGlzLnNlcGFyYXRlQXJyYXlSZWN1cnNpdmUoXG4gICAgICBVUERBVEVfUkVDT1JEU19MSU1JVCxcbiAgICAgIFtdLFxuICAgICAgcGFyYW1zLnJlY29yZHNcbiAgICApO1xuICAgIGNvbnN0IHJlcXVlc3RzID0gc2VwYXJhdGVkUmVjb3Jkcy5tYXAoKHJlY29yZHMpID0+ICh7XG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBlbmRwb2ludE5hbWU6IFwicmVjb3Jkc1wiIGFzIGNvbnN0LFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBhcHA6IHBhcmFtcy5hcHAsXG4gICAgICAgIHJlY29yZHMsXG4gICAgICB9LFxuICAgIH0pKTtcbiAgICBjb25zdCByZXN1bHRzID0gKGF3YWl0IHRoaXMuYnVsa1JlcXVlc3RDbGllbnQuc2VuZCh7IHJlcXVlc3RzIH0pKVxuICAgICAgLnJlc3VsdHMgYXMgQXJyYXk8eyByZWNvcmRzOiBBcnJheTx7IGlkOiBzdHJpbmc7IHJldmlzaW9uOiBzdHJpbmcgfT4gfT47XG4gICAgcmV0dXJuIHJlc3VsdHNcbiAgICAgIC5tYXAoKHJlc3VsdCkgPT4gcmVzdWx0LnJlY29yZHMpXG4gICAgICAucmVkdWNlKChhY2MsIHJlY29yZHMpID0+IHtcbiAgICAgICAgcmV0dXJuIGFjYy5jb25jYXQocmVjb3Jkcyk7XG4gICAgICB9LCBbXSk7XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlQWxsUmVjb3JkcyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHJlY29yZHM6IEFycmF5PHtcbiAgICAgIGlkOiBSZWNvcmRJRDtcbiAgICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gICAgfT47XG4gIH0pOiBQcm9taXNlPHt9PiB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZXRlQWxsUmVjb3Jkc1JlY3Vyc2l2ZShwYXJhbXMsIHBhcmFtcy5yZWNvcmRzLmxlbmd0aCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGRlbGV0ZUFsbFJlY29yZHNSZWN1cnNpdmUoXG4gICAgcGFyYW1zOiB7XG4gICAgICBhcHA6IEFwcElEO1xuICAgICAgcmVjb3JkczogQXJyYXk8e1xuICAgICAgICBpZDogUmVjb3JkSUQ7XG4gICAgICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gICAgICB9PjtcbiAgICB9LFxuICAgIG51bU9mQWxsUmVjb3JkczogbnVtYmVyXG4gICk6IFByb21pc2U8e30+IHtcbiAgICBjb25zdCBDSFVOS19MRU5HVEggPVxuICAgICAgdGhpcy5idWxrUmVxdWVzdENsaWVudC5SRVFVRVNUU19MRU5HVEhfTElNSVQgKiBERUxFVEVfUkVDT1JEU19MSU1JVDtcbiAgICBjb25zdCB7IGFwcCwgcmVjb3JkcyB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlY29yZHNDaHVuayA9IHJlY29yZHMuc2xpY2UoMCwgQ0hVTktfTEVOR1RIKTtcbiAgICBpZiAocmVjb3Jkc0NodW5rLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5kZWxldGVBbGxSZWNvcmRzV2l0aEJ1bGtSZXF1ZXN0KHtcbiAgICAgICAgYXBwLFxuICAgICAgICByZWNvcmRzOiByZWNvcmRzQ2h1bmssXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIHRocm93IG5ldyBLaW50b25lQWxsUmVjb3Jkc0Vycm9yKFxuICAgICAgICB7fSxcbiAgICAgICAgcmVjb3JkcyxcbiAgICAgICAgbnVtT2ZBbGxSZWNvcmRzLFxuICAgICAgICBlLFxuICAgICAgICBERUxFVEVfUkVDT1JEU19MSU1JVFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGVsZXRlQWxsUmVjb3Jkc1JlY3Vyc2l2ZShcbiAgICAgIHtcbiAgICAgICAgYXBwLFxuICAgICAgICByZWNvcmRzOiByZWNvcmRzLnNsaWNlKENIVU5LX0xFTkdUSCksXG4gICAgICB9LFxuICAgICAgbnVtT2ZBbGxSZWNvcmRzXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZGVsZXRlQWxsUmVjb3Jkc1dpdGhCdWxrUmVxdWVzdChwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHJlY29yZHM6IEFycmF5PHtcbiAgICAgIGlkOiBSZWNvcmRJRDtcbiAgICAgIHJldmlzaW9uPzogUmV2aXNpb247XG4gICAgfT47XG4gIH0pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzZXBhcmF0ZWRSZWNvcmRzID0gdGhpcy5zZXBhcmF0ZUFycmF5UmVjdXJzaXZlKFxuICAgICAgREVMRVRFX1JFQ09SRFNfTElNSVQsXG4gICAgICBbXSxcbiAgICAgIHBhcmFtcy5yZWNvcmRzXG4gICAgKTtcbiAgICBjb25zdCByZXF1ZXN0cyA9IHNlcGFyYXRlZFJlY29yZHMubWFwKChyZWNvcmRzKSA9PiAoe1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZHNcIiBhcyBjb25zdCxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgYXBwOiBwYXJhbXMuYXBwLFxuICAgICAgICBpZHM6IHJlY29yZHMubWFwKChyZWNvcmQpID0+IHJlY29yZC5pZCksXG4gICAgICAgIHJldmlzaW9uczogcmVjb3Jkcy5tYXAoKHJlY29yZCkgPT4gcmVjb3JkLnJldmlzaW9uKSxcbiAgICAgIH0sXG4gICAgfSkpO1xuICAgIGF3YWl0IHRoaXMuYnVsa1JlcXVlc3RDbGllbnQuc2VuZCh7IHJlcXVlc3RzIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXBhcmF0ZUFycmF5UmVjdXJzaXZlPFQ+KFxuICAgIHNpemU6IG51bWJlcixcbiAgICBzZXBhcmF0ZWQ6IFRbXVtdLFxuICAgIGFycmF5OiBUW11cbiAgKTogVFtdW10ge1xuICAgIGNvbnN0IGNodW5rID0gYXJyYXkuc2xpY2UoMCwgc2l6ZSk7XG4gICAgaWYgKGNodW5rLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRlZDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2VwYXJhdGVBcnJheVJlY3Vyc2l2ZShcbiAgICAgIHNpemUsXG4gICAgICBbLi4uc2VwYXJhdGVkLCBjaHVua10sXG4gICAgICBhcnJheS5zbGljZShzaXplKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYWRkUmVjb3JkQ29tbWVudChwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHJlY29yZDogUmVjb3JkSUQ7XG4gICAgY29tbWVudDoge1xuICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgbWVudGlvbnM/OiBNZW50aW9uW107XG4gICAgfTtcbiAgfSk6IFByb21pc2U8eyBpZDogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJyZWNvcmQvY29tbWVudFwiLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlUmVjb3JkQ29tbWVudChwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHJlY29yZDogUmVjb3JkSUQ7XG4gICAgY29tbWVudDogQ29tbWVudElEO1xuICB9KTogUHJvbWlzZTx7fT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZC9jb21tZW50XCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmRlbGV0ZShwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGdldFJlY29yZENvbW1lbnRzKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgcmVjb3JkOiBSZWNvcmRJRDtcbiAgICBvcmRlcj86IFwiYXNjXCIgfCBcImRlc2NcIjtcbiAgICBvZmZzZXQ/OiBudW1iZXI7XG4gICAgbGltaXQ/OiBudW1iZXI7XG4gIH0pOiBQcm9taXNlPHsgY29tbWVudHM6IENvbW1lbnRbXTsgb2xkZXI6IGJvb2xlYW47IG5ld2VyOiBib29sZWFuIH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJyZWNvcmQvY29tbWVudHNcIixcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlUmVjb3JkQXNzaWduZWVzKHBhcmFtczoge1xuICAgIGFwcDogQXBwSUQ7XG4gICAgaWQ6IFJlY29yZElEO1xuICAgIGFzc2lnbmVlczogc3RyaW5nW107XG4gICAgcmV2aXNpb24/OiBSZXZpc2lvbjtcbiAgfSk6IFByb21pc2U8eyByZXZpc2lvbjogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHtcbiAgICAgIGVuZHBvaW50TmFtZTogXCJyZWNvcmQvYXNzaWduZWVzXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnB1dChwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVJlY29yZFN0YXR1cyhwYXJhbXM6IHtcbiAgICBhY3Rpb246IHN0cmluZztcbiAgICBhcHA6IEFwcElEO1xuICAgIGFzc2lnbmVlPzogc3RyaW5nO1xuICAgIGlkOiBSZWNvcmRJRDtcbiAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICB9KTogUHJvbWlzZTx7IHJldmlzaW9uOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcInJlY29yZC9zdGF0dXNcIixcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlUmVjb3Jkc1N0YXR1cyhwYXJhbXM6IHtcbiAgICBhcHA6IEFwcElEO1xuICAgIHJlY29yZHM6IEFycmF5PHtcbiAgICAgIGFjdGlvbjogc3RyaW5nO1xuICAgICAgYXNzaWduZWU/OiBzdHJpbmc7XG4gICAgICBpZDogUmVjb3JkSUQ7XG4gICAgICByZXZpc2lvbj86IFJldmlzaW9uO1xuICAgIH0+O1xuICB9KTogUHJvbWlzZTx7IHJlY29yZHM6IEFycmF5PHsgaWQ6IHN0cmluZzsgcmV2aXNpb246IHN0cmluZyB9PiB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwicmVjb3Jkcy9zdGF0dXNcIixcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucHV0KHBhdGgsIHBhcmFtcyk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQocGFyYW1zOiB7IGVuZHBvaW50TmFtZTogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4gYnVpbGRQYXRoKHtcbiAgICAgIC4uLnBhcmFtcyxcbiAgICAgIGd1ZXN0U3BhY2VJZDogdGhpcy5ndWVzdFNwYWNlSWQsXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyA/IHNlbGYuRm9ybURhdGEgOiB3aW5kb3cuRm9ybURhdGE7XG4iLCJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIi4uL2h0dHBcIjtcbmltcG9ydCB7IGJ1aWxkUGF0aCB9IGZyb20gXCIuLi91cmxcIjtcbmltcG9ydCBGb3JtRGF0YSBmcm9tIFwiZm9ybS1kYXRhXCI7XG5pbXBvcnQgeyBwbGF0Zm9ybURlcHMgfSBmcm9tIFwiLi4vcGxhdGZvcm1cIjtcbmltcG9ydCB7IFVuc3VwcG9ydGVkUGxhdGZvcm1FcnJvciB9IGZyb20gXCIuLi9wbGF0Zm9ybS9VbnN1cHBvcnRlZFBsYXRmb3JtRXJyb3JcIjtcblxuZXhwb3J0IGNsYXNzIEZpbGVDbGllbnQge1xuICBwcml2YXRlIGNsaWVudDogSHR0cENsaWVudDtcbiAgcHJpdmF0ZSBndWVzdFNwYWNlSWQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY2xpZW50OiBIdHRwQ2xpZW50LCBndWVzdFNwYWNlSWQ/OiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmd1ZXN0U3BhY2VJZCA9IGd1ZXN0U3BhY2VJZDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGxvYWRGaWxlKHBhcmFtczoge1xuICAgIGZpbGU6IHsgbmFtZTogc3RyaW5nOyBkYXRhOiB1bmtub3duIH0gfCB7IHBhdGg6IHN0cmluZyB9O1xuICB9KTogUHJvbWlzZTx7IGZpbGVLZXk6IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoV2l0aEd1ZXN0U3BhY2VJZCh7XG4gICAgICBlbmRwb2ludE5hbWU6IFwiZmlsZVwiLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBpZiAoXCJwYXRoXCIgaW4gcGFyYW1zLmZpbGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgZGF0YSB9ID0gYXdhaXQgcGxhdGZvcm1EZXBzLnJlYWRGaWxlRnJvbVBhdGgoXG4gICAgICAgICAgcGFyYW1zLmZpbGUucGF0aFxuICAgICAgICApO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJmaWxlXCIsIGRhdGEsIG5hbWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFVuc3VwcG9ydGVkUGxhdGZvcm1FcnJvcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGB1cGxvYWRGaWxlIGRvZXNuJ3QgYWxsb3cgdG8gYWNjZXB0IGEgZmlsZSBwYXRoIGluICR7ZS5wbGF0Zm9ybX0gZW52aXJvbm1lbnQuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IG5hbWUsIGRhdGEgfSA9IHBhcmFtcy5maWxlO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKFwiZmlsZVwiLCBwbGF0Zm9ybURlcHMuYnVpbGRGb3JtRGF0YVZhbHVlKGRhdGEpLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3REYXRhKHBhdGgsIGZvcm1EYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyBkb3dubG9hZEZpbGUocGFyYW1zOiB7IGZpbGVLZXk6IHN0cmluZyB9KTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmJ1aWxkUGF0aFdpdGhHdWVzdFNwYWNlSWQoe1xuICAgICAgZW5kcG9pbnROYW1lOiBcImZpbGVcIixcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YShwYXRoLCBwYXJhbXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkKHBhcmFtczogeyBlbmRwb2ludE5hbWU6IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIGJ1aWxkUGF0aCh7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBndWVzdFNwYWNlSWQ6IHRoaXMuZ3Vlc3RTcGFjZUlkLFxuICAgIH0pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGb3JtRGF0YV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgVVJMU2VhcmNoUGFyYW1zXSc7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsImV4cG9ydCBkZWZhdWx0ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6XG4gICAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG4vLyBiYXNlZCBvZmYgaHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanNcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG52YXIgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbmlmICh0eXBlb2YgZ2xvYmFsLnNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbn1cbmlmICh0eXBlb2YgZ2xvYmFsLmNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbn1cblxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHRUaWNrKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59XG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xuZXhwb3J0IHZhciB0aXRsZSA9ICdicm93c2VyJztcbmV4cG9ydCB2YXIgcGxhdGZvcm0gPSAnYnJvd3Nlcic7XG5leHBvcnQgdmFyIGJyb3dzZXIgPSB0cnVlO1xuZXhwb3J0IHZhciBlbnYgPSB7fTtcbmV4cG9ydCB2YXIgYXJndiA9IFtdO1xuZXhwb3J0IHZhciB2ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5leHBvcnQgdmFyIHZlcnNpb25zID0ge307XG5leHBvcnQgdmFyIHJlbGVhc2UgPSB7fTtcbmV4cG9ydCB2YXIgY29uZmlnID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5leHBvcnQgdmFyIG9uID0gbm9vcDtcbmV4cG9ydCB2YXIgYWRkTGlzdGVuZXIgPSBub29wO1xuZXhwb3J0IHZhciBvbmNlID0gbm9vcDtcbmV4cG9ydCB2YXIgb2ZmID0gbm9vcDtcbmV4cG9ydCB2YXIgcmVtb3ZlTGlzdGVuZXIgPSBub29wO1xuZXhwb3J0IHZhciByZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xuZXhwb3J0IHZhciBlbWl0ID0gbm9vcDtcblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRpbmcobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN3ZCAoKSB7IHJldHVybiAnLycgfVxuZXhwb3J0IGZ1bmN0aW9uIGNoZGlyIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1bWFzaygpIHsgcmV0dXJuIDA7IH1cblxuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20va3VtYXZpcy9icm93c2VyLXByb2Nlc3MtaHJ0aW1lL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG52YXIgcGVyZm9ybWFuY2UgPSBnbG9iYWwucGVyZm9ybWFuY2UgfHwge31cbnZhciBwZXJmb3JtYW5jZU5vdyA9XG4gIHBlcmZvcm1hbmNlLm5vdyAgICAgICAgfHxcbiAgcGVyZm9ybWFuY2UubW96Tm93ICAgICB8fFxuICBwZXJmb3JtYW5jZS5tc05vdyAgICAgIHx8XG4gIHBlcmZvcm1hbmNlLm9Ob3cgICAgICAgfHxcbiAgcGVyZm9ybWFuY2Uud2Via2l0Tm93ICB8fFxuICBmdW5jdGlvbigpeyByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSB9XG5cbi8vIGdlbmVyYXRlIHRpbWVzdGFtcCBvciBkZWx0YVxuLy8gc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19wcm9jZXNzX2hydGltZVxuZXhwb3J0IGZ1bmN0aW9uIGhydGltZShwcmV2aW91c1RpbWVzdGFtcCl7XG4gIHZhciBjbG9ja3RpbWUgPSBwZXJmb3JtYW5jZU5vdy5jYWxsKHBlcmZvcm1hbmNlKSoxZS0zXG4gIHZhciBzZWNvbmRzID0gTWF0aC5mbG9vcihjbG9ja3RpbWUpXG4gIHZhciBuYW5vc2Vjb25kcyA9IE1hdGguZmxvb3IoKGNsb2NrdGltZSUxKSoxZTkpXG4gIGlmIChwcmV2aW91c1RpbWVzdGFtcCkge1xuICAgIHNlY29uZHMgPSBzZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMF1cbiAgICBuYW5vc2Vjb25kcyA9IG5hbm9zZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMV1cbiAgICBpZiAobmFub3NlY29uZHM8MCkge1xuICAgICAgc2Vjb25kcy0tXG4gICAgICBuYW5vc2Vjb25kcyArPSAxZTlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtzZWNvbmRzLG5hbm9zZWNvbmRzXVxufVxuXG52YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbmV4cG9ydCBmdW5jdGlvbiB1cHRpbWUoKSB7XG4gIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCk7XG4gIHZhciBkaWYgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTtcbiAgcmV0dXJuIGRpZiAvIDEwMDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmV4dFRpY2s6IG5leHRUaWNrLFxuICB0aXRsZTogdGl0bGUsXG4gIGJyb3dzZXI6IGJyb3dzZXIsXG4gIGVudjogZW52LFxuICBhcmd2OiBhcmd2LFxuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICB2ZXJzaW9uczogdmVyc2lvbnMsXG4gIG9uOiBvbixcbiAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLFxuICBvbmNlOiBvbmNlLFxuICBvZmY6IG9mZixcbiAgcmVtb3ZlTGlzdGVuZXI6IHJlbW92ZUxpc3RlbmVyLFxuICByZW1vdmVBbGxMaXN0ZW5lcnM6IHJlbW92ZUFsbExpc3RlbmVycyxcbiAgZW1pdDogZW1pdCxcbiAgYmluZGluZzogYmluZGluZyxcbiAgY3dkOiBjd2QsXG4gIGNoZGlyOiBjaGRpcixcbiAgdW1hc2s6IHVtYXNrLFxuICBocnRpbWU6IGhydGltZSxcbiAgcGxhdGZvcm06IHBsYXRmb3JtLFxuICByZWxlYXNlOiByZWxlYXNlLFxuICBjb25maWc6IGNvbmZpZyxcbiAgdXB0aW1lOiB1cHRpbWVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgdmFyIG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi90cmFuc2l0aW9uYWwnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdhZGFwdGVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VUeXBlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkNvb2tpZU5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmSGVhZGVyTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uVXBsb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvbkRvd25sb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdkZWNvbXByZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Q29udGVudExlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heEJvZHlMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjI2LjFcIlxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSkpO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJpbXBvcnQgQXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge1xuICBIdHRwQ2xpZW50LFxuICBSZXF1ZXN0Q29uZmlnQnVpbGRlcixcbiAgUmVxdWVzdENvbmZpZyxcbiAgUmVzcG9uc2VIYW5kbGVyLFxufSBmcm9tIFwiLi9IdHRwQ2xpZW50SW50ZXJmYWNlXCI7XG5pbXBvcnQgRm9ybURhdGEgZnJvbSBcImZvcm0tZGF0YVwiO1xuXG5leHBvcnQgY2xhc3MgQXhpb3NDbGllbnQgaW1wbGVtZW50cyBIdHRwQ2xpZW50IHtcbiAgcHJpdmF0ZSByZXNwb25zZUhhbmRsZXI6IFJlc3BvbnNlSGFuZGxlcjtcbiAgcHJpdmF0ZSByZXF1ZXN0Q29uZmlnQnVpbGRlcjogUmVxdWVzdENvbmZpZ0J1aWxkZXI7XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIHJlc3BvbnNlSGFuZGxlcixcbiAgICByZXF1ZXN0Q29uZmlnQnVpbGRlcixcbiAgfToge1xuICAgIHJlc3BvbnNlSGFuZGxlcjogUmVzcG9uc2VIYW5kbGVyO1xuICAgIHJlcXVlc3RDb25maWdCdWlsZGVyOiBSZXF1ZXN0Q29uZmlnQnVpbGRlcjtcbiAgfSkge1xuICAgIHRoaXMucmVzcG9uc2VIYW5kbGVyID0gcmVzcG9uc2VIYW5kbGVyO1xuICAgIHRoaXMucmVxdWVzdENvbmZpZ0J1aWxkZXIgPSByZXF1ZXN0Q29uZmlnQnVpbGRlcjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXQ8VCBleHRlbmRzIG9iamVjdD4ocGF0aDogc3RyaW5nLCBwYXJhbXM6IGFueSkge1xuICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSBhd2FpdCB0aGlzLnJlcXVlc3RDb25maWdCdWlsZGVyLmJ1aWxkKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHBhdGgsXG4gICAgICBwYXJhbXNcbiAgICApO1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXF1ZXN0Q29uZmlnKSkgYXMgUHJvbWlzZTxUPjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXREYXRhKHBhdGg6IHN0cmluZywgcGFyYW1zOiBhbnkpIHtcbiAgICBjb25zdCByZXF1ZXN0Q29uZmlnID0gYXdhaXQgdGhpcy5yZXF1ZXN0Q29uZmlnQnVpbGRlci5idWlsZChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICBwYXRoLFxuICAgICAgcGFyYW1zLFxuICAgICAge1xuICAgICAgICByZXNwb25zZVR5cGU6IFwiYXJyYXlidWZmZXJcIixcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXF1ZXN0Q29uZmlnKSkgYXMgUHJvbWlzZTxBcnJheUJ1ZmZlcj47XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcG9zdDxUIGV4dGVuZHMgb2JqZWN0PihwYXRoOiBzdHJpbmcsIHBhcmFtczogYW55KSB7XG4gICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IGF3YWl0IHRoaXMucmVxdWVzdENvbmZpZ0J1aWxkZXIuYnVpbGQoXG4gICAgICBcInBvc3RcIixcbiAgICAgIHBhdGgsXG4gICAgICBwYXJhbXNcbiAgICApO1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXF1ZXN0Q29uZmlnKSkgYXMgUHJvbWlzZTxUPjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwb3N0RGF0YTxUIGV4dGVuZHMgb2JqZWN0PihwYXRoOiBzdHJpbmcsIGZvcm1EYXRhOiBGb3JtRGF0YSkge1xuICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSBhd2FpdCB0aGlzLnJlcXVlc3RDb25maWdCdWlsZGVyLmJ1aWxkKFxuICAgICAgXCJwb3N0XCIsXG4gICAgICBwYXRoLFxuICAgICAgZm9ybURhdGFcbiAgICApO1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXF1ZXN0Q29uZmlnKSkgYXMgUHJvbWlzZTxUPjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwdXQ8VCBleHRlbmRzIG9iamVjdD4ocGF0aDogc3RyaW5nLCBwYXJhbXM6IGFueSkge1xuICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSBhd2FpdCB0aGlzLnJlcXVlc3RDb25maWdCdWlsZGVyLmJ1aWxkKFxuICAgICAgXCJwdXRcIixcbiAgICAgIHBhdGgsXG4gICAgICBwYXJhbXNcbiAgICApO1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXF1ZXN0Q29uZmlnKSkgYXMgUHJvbWlzZTxUPjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWxldGU8VCBleHRlbmRzIG9iamVjdD4ocGF0aDogc3RyaW5nLCBwYXJhbXM6IGFueSkge1xuICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSBhd2FpdCB0aGlzLnJlcXVlc3RDb25maWdCdWlsZGVyLmJ1aWxkKFxuICAgICAgXCJkZWxldGVcIixcbiAgICAgIHBhdGgsXG4gICAgICBwYXJhbXNcbiAgICApO1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXF1ZXN0Q29uZmlnKSkgYXMgUHJvbWlzZTxUPjtcbiAgfVxuXG4gIHByaXZhdGUgc2VuZFJlcXVlc3QocmVxdWVzdENvbmZpZzogUmVxdWVzdENvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlc3BvbnNlSGFuZGxlci5oYW5kbGUoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgQXhpb3Moe1xuICAgICAgICAuLi5yZXF1ZXN0Q29uZmlnLFxuXG4gICAgICAgIG1heEJvZHlMZW5ndGg6IEluZmluaXR5LFxuICAgICAgICBtYXhDb250ZW50TGVuZ3RoOiBJbmZpbml0eSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgdW4kSm9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9IE9iamVjdDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnam9pbicsICcsJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBFUzNfU1RSSU5HUyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIHVuJEpvaW4odG9JbmRleGVkT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IE1hdGgubWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3MucHVzaCgnJCcgKyBpKTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRTeW50YXhFcnJvciA9IFN5bnRheEVycm9yO1xudmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxudmFyIG5lZWRzRXZhbCA9IHt9O1xuXG52YXIgVHlwZWRBcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0JyVBZ2dyZWdhdGVFcnJvciUnOiB0eXBlb2YgQWdncmVnYXRlRXJyb3IgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQWdncmVnYXRlRXJyb3IsXG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Z1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBuZWVkc0V2YWwsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJpZ0ludCUnOiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludCxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6IEVycm9yLFxuXHQnJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCclRXZhbEVycm9yJSc6IEV2YWxFcnJvcixcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogJFN5bnRheEVycm9yLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVVJJRXJyb3IlJzogVVJJRXJyb3IsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtSZWYlJzogdHlwZW9mIFdlYWtSZWYgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1JlZixcblx0JyVXZWFrU2V0JSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXRcbn07XG5cbnZhciBkb0V2YWwgPSBmdW5jdGlvbiBkb0V2YWwobmFtZSkge1xuXHR2YXIgdmFsdWU7XG5cdGlmIChuYW1lID09PSAnJUFzeW5jRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yJScpIHtcblx0XHR2YXIgZm4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpO1xuXHRcdGlmIChmbikge1xuXHRcdFx0dmFsdWUgPSBmbi5wcm90b3R5cGU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnKSB7XG5cdFx0dmFyIGdlbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yJScpO1xuXHRcdGlmIChnZW4pIHtcblx0XHRcdHZhbHVlID0gZ2V0UHJvdG8oZ2VuLnByb3RvdHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0SU5UUklOU0lDU1tuYW1lXSA9IHZhbHVlO1xuXG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBMRUdBQ1lfQUxJQVNFUyA9IHtcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXMnKTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG5cdHZhciBsYXN0ID0gJHN0clNsaWNlKHN0cmluZywgLTEpO1xuXHRpZiAoZmlyc3QgPT09ICclJyAmJiBsYXN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgJyk7XG5cdH0gZWxzZSBpZiAobGFzdCA9PT0gJyUnICYmIGZpcnN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgJyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuXHRcdFx0dmFsdWUgPSBkb0V2YWwoaW50cmluc2ljTmFtZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGlhczogYWxpYXMsXG5cdFx0XHRuYW1lOiBpbnRyaW5zaWNOYW1lLFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fTtcblx0fVxuXG5cdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXHR2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJztcblxuXHR2YXIgaW50cmluc2ljID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0dmFyIGludHJpbnNpY1JlYWxOYW1lID0gaW50cmluc2ljLm5hbWU7XG5cdHZhciB2YWx1ZSA9IGludHJpbnNpYy52YWx1ZTtcblx0dmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuXG5cdHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcblx0aWYgKGFsaWFzKSB7XG5cdFx0aW50cmluc2ljQmFzZU5hbWUgPSBhbGlhc1swXTtcblx0XHQkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDEsIGlzT3duID0gdHJ1ZTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFyIHBhcnQgPSBwYXJ0c1tpXTtcblx0XHR2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG5cdFx0dmFyIGxhc3QgPSAkc3RyU2xpY2UocGFydCwgLTEpO1xuXHRcdGlmIChcblx0XHRcdChcblx0XHRcdFx0KGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gJ2AnKVxuXHRcdFx0XHR8fCAobGFzdCA9PT0gJ1wiJyB8fCBsYXN0ID09PSBcIidcIiB8fCBsYXN0ID09PSAnYCcpXG5cdFx0XHQpXG5cdFx0XHQmJiBmaXJzdCAhPT0gbGFzdFxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigncHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3RlcycpO1xuXHRcdH1cblx0XHRpZiAocGFydCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCAhaXNPd24pIHtcblx0XHRcdHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aW50cmluc2ljQmFzZU5hbWUgKz0gJy4nICsgcGFydDtcblx0XHRpbnRyaW5zaWNSZWFsTmFtZSA9ICclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnO1xuXG5cdFx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNSZWFsTmFtZSkpIHtcblx0XHRcdHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIShwYXJ0IGluIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0aXNPd24gPSAhIWRlc2M7XG5cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbHNcblx0QWdncmVnYXRlRXJyb3IsXG5cdEF0b21pY3MsXG5cdEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuXHRTaGFyZWRBcnJheUJ1ZmZlcixcblx0V2Vha1JlZixcbiovXG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkU3ludGF4RXJyb3IgPSBTeW50YXhFcnJvcjtcbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuXHRcdHJldHVybiBGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxudmFyIGFzeW5jR2VuRnVuY3Rpb24gPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uKiAoKSB7fScpO1xudmFyIGFzeW5jR2VuRnVuY3Rpb25Qcm90b3R5cGUgPSBhc3luY0dlbkZ1bmN0aW9uID8gYXN5bmNHZW5GdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNHZW5Qcm90b3R5cGUgPSBhc3luY0dlbkZ1bmN0aW9uUHJvdG90eXBlID8gYXN5bmNHZW5GdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgOiB1bmRlZmluZWQ7XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHQnJUFnZ3JlZ2F0ZUVycm9yJSc6IHR5cGVvZiBBZ2dyZWdhdGVFcnJvciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBZ2dyZWdhdGVFcnJvcixcblx0JyVBcnJheSUnOiBBcnJheSxcblx0JyVBcnJheUJ1ZmZlciUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiAoKSB7fScpLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IGFzeW5jR2VuRnVuY3Rpb25Qcm90b3R5cGUsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBhc3luY0dlbkZ1bmN0aW9uLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogYXN5bmNHZW5Qcm90b3R5cGUgPyBnZXRQcm90byhhc3luY0dlblByb3RvdHlwZSkgOiB1bmRlZmluZWQsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJpZ0ludCUnOiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludCxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6IEVycm9yLFxuXHQnJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCclRXZhbEVycm9yJSc6IEV2YWxFcnJvcixcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdmdW5jdGlvbiogKCkge30nKSxcblx0JyVJbnQ4QXJyYXklJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXksXG5cdCclSW50MTZBcnJheSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQxNkFycmF5LFxuXHQnJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyVpc05hTiUnOiBpc05hTixcblx0JyVJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkgOiB1bmRlZmluZWQsXG5cdCclSlNPTiUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OIDogdW5kZWZpbmVkLFxuXHQnJU1hcCUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcCxcblx0JyVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiBSYW5nZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6IFJlZmVyZW5jZUVycm9yLFxuXHQnJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdlbnRyaWVzJ10sXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2ZvckVhY2gnXSxcblx0JyVBcnJheVByb3RvX2tleXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAna2V5cyddLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ3ZhbHVlcyddLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogWydBc3luY0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogWydCb29sZWFuJywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IFsnRGF0YVZpZXcnLCAncHJvdG90eXBlJ10sXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBbJ0RhdGUnLCAncHJvdG90eXBlJ10sXG5cdCclRXJyb3JQcm90b3R5cGUlJzogWydFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogWydFdmFsRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0NjRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvciUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogWydJbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ0ludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ0ludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSlNPTlBhcnNlJSc6IFsnSlNPTicsICdwYXJzZSddLFxuXHQnJUpTT05TdHJpbmdpZnklJzogWydKU09OJywgJ3N0cmluZ2lmeSddLFxuXHQnJU1hcFByb3RvdHlwZSUnOiBbJ01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogWydOdW1iZXInLCAncHJvdG90eXBlJ10sXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZSddLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd0b1N0cmluZyddLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3ZhbHVlT2YnXSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnXSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJywgJ3RoZW4nXSxcblx0JyVQcm9taXNlX2FsbCUnOiBbJ1Byb21pc2UnLCAnYWxsJ10sXG5cdCclUHJvbWlzZV9yZWplY3QlJzogWydQcm9taXNlJywgJ3JlamVjdCddLFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiBbJ1Byb21pc2UnLCAncmVzb2x2ZSddLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogWydSYW5nZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFsnUmVmZXJlbmNlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFsnUmVnRXhwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVNldFByb3RvdHlwZSUnOiBbJ1NldCcsICdwcm90b3R5cGUnXSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ1NoYXJlZEFycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBbJ1N0cmluZycsICdwcm90b3R5cGUnXSxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogWydTeW1ib2wnLCAncHJvdG90eXBlJ10sXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogWydTeW50YXhFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVHlwZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogWydUeXBlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogWydVaW50OENsYW1wZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnVWludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogWydVUklFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IFsnV2Vha01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IFsnV2Vha1NldCcsICdwcm90b3R5cGUnXVxufTtcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgJGNvbmNhdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbnZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YWxpYXM6IGFsaWFzLFxuXHRcdFx0bmFtZTogaW50cmluc2ljTmFtZSxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH07XG5cdH1cblxuXHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1wiYWxsb3dNaXNzaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCRnT1BEICYmIChpICsgMSkgPj0gcGFydHMubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBkZXNjID0gJGdPUEQodmFsdWUsIHBhcnQpO1xuXHRcdFx0XHRpc093biA9ICEhZGVzYztcblxuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZyAmJiAhKHBhcnQgaW4gdmFsdWUpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Jhc2UgaW50cmluc2ljIGZvciAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJpbmQoKSB7XG5cdHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCJ2YXIgaGFzTWFwID0gdHlwZW9mIE1hcCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXAucHJvdG90eXBlO1xudmFyIG1hcFNpemVEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBoYXNNYXAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1hcC5wcm90b3R5cGUsICdzaXplJykgOiBudWxsO1xudmFyIG1hcFNpemUgPSBoYXNNYXAgJiYgbWFwU2l6ZURlc2NyaXB0b3IgJiYgdHlwZW9mIG1hcFNpemVEZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG1hcFNpemVEZXNjcmlwdG9yLmdldCA6IG51bGw7XG52YXIgbWFwRm9yRWFjaCA9IGhhc01hcCAmJiBNYXAucHJvdG90eXBlLmZvckVhY2g7XG52YXIgaGFzU2V0ID0gdHlwZW9mIFNldCA9PT0gJ2Z1bmN0aW9uJyAmJiBTZXQucHJvdG90eXBlO1xudmFyIHNldFNpemVEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBoYXNTZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFNldC5wcm90b3R5cGUsICdzaXplJykgOiBudWxsO1xudmFyIHNldFNpemUgPSBoYXNTZXQgJiYgc2V0U2l6ZURlc2NyaXB0b3IgJiYgdHlwZW9mIHNldFNpemVEZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyA/IHNldFNpemVEZXNjcmlwdG9yLmdldCA6IG51bGw7XG52YXIgc2V0Rm9yRWFjaCA9IGhhc1NldCAmJiBTZXQucHJvdG90eXBlLmZvckVhY2g7XG52YXIgaGFzV2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIFdlYWtNYXAucHJvdG90eXBlO1xudmFyIHdlYWtNYXBIYXMgPSBoYXNXZWFrTWFwID8gV2Vha01hcC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciBoYXNXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbicgJiYgV2Vha1NldC5wcm90b3R5cGU7XG52YXIgd2Vha1NldEhhcyA9IGhhc1dlYWtTZXQgPyBXZWFrU2V0LnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGJvb2xlYW5WYWx1ZU9mID0gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZjtcbnZhciBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBtYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2g7XG52YXIgYmlnSW50VmFsdWVPZiA9IHR5cGVvZiBCaWdJbnQgPT09ICdmdW5jdGlvbicgPyBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YgOiBudWxsO1xudmFyIGdPUFMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIHN5bVRvU3RyaW5nID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyA/IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgOiBudWxsO1xudmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbnZhciBpbnNwZWN0Q3VzdG9tID0gcmVxdWlyZSgnLi91dGlsLmluc3BlY3QnKS5jdXN0b207XG52YXIgaW5zcGVjdFN5bWJvbCA9IGluc3BlY3RDdXN0b20gJiYgaXNTeW1ib2woaW5zcGVjdEN1c3RvbSkgPyBpbnNwZWN0Q3VzdG9tIDogbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNwZWN0XyhvYmosIG9wdGlvbnMsIGRlcHRoLCBzZWVuKSB7XG4gICAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpICYmIChvcHRzLnF1b3RlU3R5bGUgIT09ICdzaW5nbGUnICYmIG9wdHMucXVvdGVTdHlsZSAhPT0gJ2RvdWJsZScpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcInF1b3RlU3R5bGVcIiBtdXN0IGJlIFwic2luZ2xlXCIgb3IgXCJkb3VibGVcIicpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnbWF4U3RyaW5nTGVuZ3RoJykgJiYgKHR5cGVvZiBvcHRzLm1heFN0cmluZ0xlbmd0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0cy5tYXhTdHJpbmdMZW5ndGggPCAwICYmIG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBJbmZpbml0eVxuICAgICAgICAgICAgOiBvcHRzLm1heFN0cmluZ0xlbmd0aCAhPT0gbnVsbFxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm1heFN0cmluZ0xlbmd0aFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIEluZmluaXR5LCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgdmFyIGN1c3RvbUluc3BlY3QgPSBoYXMob3B0cywgJ2N1c3RvbUluc3BlY3QnKSA/IG9wdHMuY3VzdG9tSW5zcGVjdCA6IHRydWU7XG4gICAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0ICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiY3VzdG9tSW5zcGVjdFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBgdHJ1ZWAgb3IgYGZhbHNlYCcpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgaGFzKG9wdHMsICdpbmRlbnQnKVxuICAgICAgICAmJiBvcHRzLmluZGVudCAhPT0gbnVsbFxuICAgICAgICAmJiBvcHRzLmluZGVudCAhPT0gJ1xcdCdcbiAgICAgICAgJiYgIShwYXJzZUludChvcHRzLmluZGVudCwgMTApID09PSBvcHRzLmluZGVudCAmJiBvcHRzLmluZGVudCA+IDApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgXCJpbmRlbnRcIiBtdXN0IGJlIFwiXFxcXHRcIiwgYW4gaW50ZWdlciA+IDAsIG9yIGBudWxsYCcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgfVxuICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb2JqID8gJ3RydWUnIDogJ2ZhbHNlJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGluc3BlY3RTdHJpbmcob2JqLCBvcHRzKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChvYmogPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBJbmZpbml0eSAvIG9iaiA+IDAgPyAnMCcgOiAnLTAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTdHJpbmcob2JqKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcob2JqKSArICduJztcbiAgICB9XG5cbiAgICB2YXIgbWF4RGVwdGggPSB0eXBlb2Ygb3B0cy5kZXB0aCA9PT0gJ3VuZGVmaW5lZCcgPyA1IDogb3B0cy5kZXB0aDtcbiAgICBpZiAodHlwZW9mIGRlcHRoID09PSAndW5kZWZpbmVkJykgeyBkZXB0aCA9IDA7IH1cbiAgICBpZiAoZGVwdGggPj0gbWF4RGVwdGggJiYgbWF4RGVwdGggPiAwICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KG9iaikgPyAnW0FycmF5XScgOiAnW09iamVjdF0nO1xuICAgIH1cblxuICAgIHZhciBpbmRlbnQgPSBnZXRJbmRlbnQob3B0cywgZGVwdGgpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWVuID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWVuID0gW107XG4gICAgfSBlbHNlIGlmIChpbmRleE9mKHNlZW4sIG9iaikgPj0gMCkge1xuICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3BlY3QodmFsdWUsIGZyb20sIG5vSW5kZW50KSB7XG4gICAgICAgIGlmIChmcm9tKSB7XG4gICAgICAgICAgICBzZWVuID0gc2Vlbi5zbGljZSgpO1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub0luZGVudCkge1xuICAgICAgICAgICAgdmFyIG5ld09wdHMgPSB7XG4gICAgICAgICAgICAgICAgZGVwdGg6IG9wdHMuZGVwdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaGFzKG9wdHMsICdxdW90ZVN0eWxlJykpIHtcbiAgICAgICAgICAgICAgICBuZXdPcHRzLnF1b3RlU3R5bGUgPSBvcHRzLnF1b3RlU3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zcGVjdF8odmFsdWUsIG5ld09wdHMsIGRlcHRoICsgMSwgc2Vlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBvcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBuYW1lID0gbmFtZU9mKG9iaik7XG4gICAgICAgIHZhciBrZXlzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICByZXR1cm4gJ1tGdW5jdGlvbicgKyAobmFtZSA/ICc6ICcgKyBuYW1lIDogJyAoYW5vbnltb3VzKScpICsgJ10nICsgKGtleXMubGVuZ3RoID4gMCA/ICcgeyAnICsga2V5cy5qb2luKCcsICcpICsgJyB9JyA6ICcnKTtcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKG9iaikpIHtcbiAgICAgICAgdmFyIHN5bVN0cmluZyA9IHN5bVRvU3RyaW5nLmNhbGwob2JqKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnID8gbWFya0JveGVkKHN5bVN0cmluZykgOiBzeW1TdHJpbmc7XG4gICAgfVxuICAgIGlmIChpc0VsZW1lbnQob2JqKSkge1xuICAgICAgICB2YXIgcyA9ICc8JyArIFN0cmluZyhvYmoubm9kZU5hbWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhciBhdHRycyA9IG9iai5hdHRyaWJ1dGVzIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzICs9ICcgJyArIGF0dHJzW2ldLm5hbWUgKyAnPScgKyB3cmFwUXVvdGVzKHF1b3RlKGF0dHJzW2ldLnZhbHVlKSwgJ2RvdWJsZScsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gJz4nO1xuICAgICAgICBpZiAob2JqLmNoaWxkTm9kZXMgJiYgb2JqLmNoaWxkTm9kZXMubGVuZ3RoKSB7IHMgKz0gJy4uLic7IH1cbiAgICAgICAgcyArPSAnPC8nICsgU3RyaW5nKG9iai5ub2RlTmFtZSkudG9Mb3dlckNhc2UoKSArICc+JztcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKG9iai5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbXSc7IH1cbiAgICAgICAgdmFyIHhzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoaW5kZW50ICYmICFzaW5nbGVMaW5lVmFsdWVzKHhzKSkge1xuICAgICAgICAgICAgcmV0dXJuICdbJyArIGluZGVudGVkSm9pbih4cywgaW5kZW50KSArICddJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1sgJyArIHhzLmpvaW4oJywgJykgKyAnIF0nO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcihvYmopKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1snICsgU3RyaW5nKG9iaikgKyAnXSc7IH1cbiAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgcGFydHMuam9pbignLCAnKSArICcgfSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBjdXN0b21JbnNwZWN0KSB7XG4gICAgICAgIGlmIChpbnNwZWN0U3ltYm9sICYmIHR5cGVvZiBvYmpbaW5zcGVjdFN5bWJvbF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmpbaW5zcGVjdFN5bWJvbF0oKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqLmluc3BlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouaW5zcGVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc01hcChvYmopKSB7XG4gICAgICAgIHZhciBtYXBQYXJ0cyA9IFtdO1xuICAgICAgICBtYXBGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgbWFwUGFydHMucHVzaChpbnNwZWN0KGtleSwgb2JqLCB0cnVlKSArICcgPT4gJyArIGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignTWFwJywgbWFwU2l6ZS5jYWxsKG9iaiksIG1hcFBhcnRzLCBpbmRlbnQpO1xuICAgIH1cbiAgICBpZiAoaXNTZXQob2JqKSkge1xuICAgICAgICB2YXIgc2V0UGFydHMgPSBbXTtcbiAgICAgICAgc2V0Rm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzZXRQYXJ0cy5wdXNoKGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignU2V0Jywgc2V0U2l6ZS5jYWxsKG9iaiksIHNldFBhcnRzLCBpbmRlbnQpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtNYXAnKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha1NldChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrU2V0Jyk7XG4gICAgfVxuICAgIGlmIChpc051bWJlcihvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChOdW1iZXIob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoaXNCaWdJbnQob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoYmlnSW50VmFsdWVPZi5jYWxsKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQm9vbGVhbihvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoYm9vbGVhblZhbHVlT2YuY2FsbChvYmopKTtcbiAgICB9XG4gICAgaWYgKGlzU3RyaW5nKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KFN0cmluZyhvYmopKSk7XG4gICAgfVxuICAgIGlmICghaXNEYXRlKG9iaikgJiYgIWlzUmVnRXhwKG9iaikpIHtcbiAgICAgICAgdmFyIHlzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoeXMubGVuZ3RoID09PSAwKSB7IHJldHVybiAne30nOyB9XG4gICAgICAgIGlmIChpbmRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAneycgKyBpbmRlbnRlZEpvaW4oeXMsIGluZGVudCkgKyAnfSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICd7ICcgKyB5cy5qb2luKCcsICcpICsgJyB9JztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhvYmopO1xufTtcblxuZnVuY3Rpb24gd3JhcFF1b3RlcyhzLCBkZWZhdWx0U3R5bGUsIG9wdHMpIHtcbiAgICB2YXIgcXVvdGVDaGFyID0gKG9wdHMucXVvdGVTdHlsZSB8fCBkZWZhdWx0U3R5bGUpID09PSAnZG91YmxlJyA/ICdcIicgOiBcIidcIjtcbiAgICByZXR1cm4gcXVvdGVDaGFyICsgcyArIHF1b3RlQ2hhcjtcbn1cblxuZnVuY3Rpb24gcXVvdGUocykge1xuICAgIHJldHVybiBTdHJpbmcocykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJzsgfVxuZnVuY3Rpb24gaXNEYXRlKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgRGF0ZV0nOyB9XG5mdW5jdGlvbiBpc1JlZ0V4cChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nOyB9XG5mdW5jdGlvbiBpc0Vycm9yKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgRXJyb3JdJzsgfVxuZnVuY3Rpb24gaXNTeW1ib2wob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBTeW1ib2xdJzsgfVxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBTdHJpbmddJzsgfVxuZnVuY3Rpb24gaXNOdW1iZXIob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBOdW1iZXJdJzsgfVxuZnVuY3Rpb24gaXNCaWdJbnQob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBCaWdJbnRdJzsgfVxuZnVuY3Rpb24gaXNCb29sZWFuKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nOyB9XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5IHx8IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSBpbiB0aGlzOyB9O1xuZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn1cblxuZnVuY3Rpb24gdG9TdHIob2JqKSB7XG4gICAgcmV0dXJuIG9iamVjdFRvU3RyaW5nLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gbmFtZU9mKGYpIHtcbiAgICBpZiAoZi5uYW1lKSB7IHJldHVybiBmLm5hbWU7IH1cbiAgICB2YXIgbSA9IG1hdGNoLmNhbGwoZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGYpLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTZXQoeCkge1xuICAgIGlmICghc2V0U2l6ZSB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzZXRTaXplLmNhbGwoeCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXBTaXplLmNhbGwoeCk7XG4gICAgICAgIH0gY2F0Y2ggKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrU2V0KHgpIHtcbiAgICBpZiAoIXdlYWtTZXRIYXMgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha1NldEhhcy5jYWxsKHgsIHdlYWtTZXRIYXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2Vha01hcEhhcy5jYWxsKHgsIHdlYWtNYXBIYXMpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFdlYWtTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQoeCkge1xuICAgIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHgubm9kZU5hbWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB4LmdldEF0dHJpYnV0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaW5zcGVjdFN0cmluZyhzdHIsIG9wdHMpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA+IG9wdHMubWF4U3RyaW5nTGVuZ3RoKSB7XG4gICAgICAgIHZhciByZW1haW5pbmcgPSBzdHIubGVuZ3RoIC0gb3B0cy5tYXhTdHJpbmdMZW5ndGg7XG4gICAgICAgIHZhciB0cmFpbGVyID0gJy4uLiAnICsgcmVtYWluaW5nICsgJyBtb3JlIGNoYXJhY3RlcicgKyAocmVtYWluaW5nID4gMSA/ICdzJyA6ICcnKTtcbiAgICAgICAgcmV0dXJuIGluc3BlY3RTdHJpbmcoc3RyLnNsaWNlKDAsIG9wdHMubWF4U3RyaW5nTGVuZ3RoKSwgb3B0cykgKyB0cmFpbGVyO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIHZhciBzID0gc3RyLnJlcGxhY2UoLyhbJ1xcXFxdKS9nLCAnXFxcXCQxJykucmVwbGFjZSgvW1xceDAwLVxceDFmXS9nLCBsb3dieXRlKTtcbiAgICByZXR1cm4gd3JhcFF1b3RlcyhzLCAnc2luZ2xlJywgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGxvd2J5dGUoYykge1xuICAgIHZhciBuID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB4ID0ge1xuICAgICAgICA4OiAnYicsXG4gICAgICAgIDk6ICd0JyxcbiAgICAgICAgMTA6ICduJyxcbiAgICAgICAgMTI6ICdmJyxcbiAgICAgICAgMTM6ICdyJ1xuICAgIH1bbl07XG4gICAgaWYgKHgpIHsgcmV0dXJuICdcXFxcJyArIHg7IH1cbiAgICByZXR1cm4gJ1xcXFx4JyArIChuIDwgMHgxMCA/ICcwJyA6ICcnKSArIG4udG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG1hcmtCb3hlZChzdHIpIHtcbiAgICByZXR1cm4gJ09iamVjdCgnICsgc3RyICsgJyknO1xufVxuXG5mdW5jdGlvbiB3ZWFrQ29sbGVjdGlvbk9mKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSArICcgeyA/IH0nO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YodHlwZSwgc2l6ZSwgZW50cmllcywgaW5kZW50KSB7XG4gICAgdmFyIGpvaW5lZEVudHJpZXMgPSBpbmRlbnQgPyBpbmRlbnRlZEpvaW4oZW50cmllcywgaW5kZW50KSA6IGVudHJpZXMuam9pbignLCAnKTtcbiAgICByZXR1cm4gdHlwZSArICcgKCcgKyBzaXplICsgJykgeycgKyBqb2luZWRFbnRyaWVzICsgJ30nO1xufVxuXG5mdW5jdGlvbiBzaW5nbGVMaW5lVmFsdWVzKHhzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5kZXhPZih4c1tpXSwgJ1xcbicpID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZW50KG9wdHMsIGRlcHRoKSB7XG4gICAgdmFyIGJhc2VJbmRlbnQ7XG4gICAgaWYgKG9wdHMuaW5kZW50ID09PSAnXFx0Jykge1xuICAgICAgICBiYXNlSW5kZW50ID0gJ1xcdCc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0cy5pbmRlbnQgPT09ICdudW1iZXInICYmIG9wdHMuaW5kZW50ID4gMCkge1xuICAgICAgICBiYXNlSW5kZW50ID0gQXJyYXkob3B0cy5pbmRlbnQgKyAxKS5qb2luKCcgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2U6IGJhc2VJbmRlbnQsXG4gICAgICAgIHByZXY6IEFycmF5KGRlcHRoICsgMSkuam9pbihiYXNlSW5kZW50KVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGluZGVudGVkSm9pbih4cywgaW5kZW50KSB7XG4gICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJyc7IH1cbiAgICB2YXIgbGluZUpvaW5lciA9ICdcXG4nICsgaW5kZW50LnByZXYgKyBpbmRlbnQuYmFzZTtcbiAgICByZXR1cm4gbGluZUpvaW5lciArIHhzLmpvaW4oJywnICsgbGluZUpvaW5lcikgKyAnXFxuJyArIGluZGVudC5wcmV2O1xufVxuXG5mdW5jdGlvbiBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCkge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqKTtcbiAgICB2YXIgeHMgPSBbXTtcbiAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgeHMubGVuZ3RoID0gb2JqLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHhzW2ldID0gaGFzKG9iaiwgaSkgPyBpbnNwZWN0KG9ialtpXSwgb2JqKSA6ICcnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoIWhhcyhvYmosIGtleSkpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKGlzQXJyICYmIFN0cmluZyhOdW1iZXIoa2V5KSkgPT09IGtleSAmJiBrZXkgPCBvYmoubGVuZ3RoKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmICgoL1teXFx3JF0vKS50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgIHhzLnB1c2goaW5zcGVjdChrZXksIG9iaikgKyAnOiAnICsgaW5zcGVjdChvYmpba2V5XSwgb2JqKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4cy5wdXNoKGtleSArICc6ICcgKyBpbnNwZWN0KG9ialtrZXldLCBvYmopKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGdPUFMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIHN5bXMgPSBnT1BTKG9iaik7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ltcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltc1tqXSkpIHtcbiAgICAgICAgICAgICAgICB4cy5wdXNoKCdbJyArIGluc3BlY3Qoc3ltc1tqXSkgKyAnXTogJyArIGluc3BlY3Qob2JqW3N5bXNbal1dLCBvYmopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geHM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkV2Vha01hcCA9IEdldEludHJpbnNpYygnJVdlYWtNYXAlJywgdHJ1ZSk7XG52YXIgJE1hcCA9IEdldEludHJpbnNpYygnJU1hcCUnLCB0cnVlKTtcblxudmFyICR3ZWFrTWFwR2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcFNldCA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuc2V0JywgdHJ1ZSk7XG52YXIgJHdlYWtNYXBIYXMgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xudmFyICRtYXBHZXQgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZ2V0JywgdHJ1ZSk7XG52YXIgJG1hcFNldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkbWFwSGFzID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xuXG4vKlxuICogVGhpcyBmdW5jdGlvbiB0cmF2ZXJzZXMgdGhlIGxpc3QgcmV0dXJuaW5nIHRoZSBub2RlIGNvcnJlc3BvbmRpbmcgdG8gdGhlXG4gKiBnaXZlbiBrZXkuXG4gKlxuICogVGhhdCBub2RlIGlzIGFsc28gbW92ZWQgdG8gdGhlIGhlYWQgb2YgdGhlIGxpc3QsIHNvIHRoYXQgaWYgaXQncyBhY2Nlc3NlZFxuICogYWdhaW4gd2UgZG9uJ3QgbmVlZCB0byB0cmF2ZXJzZSB0aGUgd2hvbGUgbGlzdC4gQnkgZG9pbmcgc28sIGFsbCB0aGUgcmVjZW50bHlcbiAqIHVzZWQgbm9kZXMgY2FuIGJlIGFjY2Vzc2VkIHJlbGF0aXZlbHkgcXVpY2tseS5cbiAqL1xudmFyIGxpc3RHZXROb2RlID0gZnVuY3Rpb24gKGxpc3QsIGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdGZvciAodmFyIHByZXYgPSBsaXN0LCBjdXJyOyAoY3VyciA9IHByZXYubmV4dCkgIT09IG51bGw7IHByZXYgPSBjdXJyKSB7XG5cdFx0aWYgKGN1cnIua2V5ID09PSBrZXkpIHtcblx0XHRcdHByZXYubmV4dCA9IGN1cnIubmV4dDtcblx0XHRcdGN1cnIubmV4dCA9IGxpc3QubmV4dDtcblx0XHRcdGxpc3QubmV4dCA9IGN1cnI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRcdHJldHVybiBjdXJyO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGxpc3RHZXQgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5KSB7XG5cdHZhciBub2RlID0gbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcblx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZTtcbn07XG52YXIgbGlzdFNldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXksIHZhbHVlKSB7XG5cdHZhciBub2RlID0gbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcblx0aWYgKG5vZGUpIHtcblx0XHRub2RlLnZhbHVlID0gdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gUHJlcGVuZCB0aGUgbmV3IG5vZGUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdFxuXHRcdG9iamVjdHMubmV4dCA9IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdFx0a2V5OiBrZXksXG5cdFx0XHRuZXh0OiBvYmplY3RzLm5leHQsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9O1xuXHR9XG59O1xudmFyIGxpc3RIYXMgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5KSB7XG5cdHJldHVybiAhIWxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFNpZGVDaGFubmVsKCkge1xuXHR2YXIgJHdtO1xuXHR2YXIgJG07XG5cdHZhciAkbztcblx0dmFyIGNoYW5uZWwgPSB7XG5cdFx0YXNzZXJ0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoIWNoYW5uZWwuaGFzKGtleSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1NpZGUgY2hhbm5lbCBkb2VzIG5vdCBjb250YWluICcgKyBpbnNwZWN0KGtleSkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0OiBmdW5jdGlvbiAoa2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdGlmICgkd20pIHtcblx0XHRcdFx0XHRyZXR1cm4gJHdlYWtNYXBHZXQoJHdtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICRtYXBHZXQoJG0sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICgkbykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmVseS1pZlxuXHRcdFx0XHRcdHJldHVybiBsaXN0R2V0KCRvLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoYXM6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdGlmICgkd20pIHtcblx0XHRcdFx0XHRyZXR1cm4gJHdlYWtNYXBIYXMoJHdtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICRtYXBIYXMoJG0sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICgkbykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmVseS1pZlxuXHRcdFx0XHRcdHJldHVybiBsaXN0SGFzKCRvLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoISR3bSkge1xuXHRcdFx0XHRcdCR3bSA9IG5ldyAkV2Vha01hcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCR3ZWFrTWFwU2V0KCR3bSwga2V5LCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCEkbSkge1xuXHRcdFx0XHRcdCRtID0gbmV3ICRNYXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkbWFwU2V0KCRtLCBrZXksIHZhbHVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICghJG8pIHtcblx0XHRcdFx0XHQvKlxuXHRcdFx0XHRcdCAqIEluaXRpYWxpemUgdGhlIGxpbmtlZCBsaXN0IGFzIGFuIGVtcHR5IG5vZGUsIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZVxuXHRcdFx0XHRcdCAqIHRvIHNwZWNpYWwtY2FzZSBoYW5kbGluZyBvZiB0aGUgZmlyc3Qgbm9kZTogd2UgY2FuIGFsd2F5cyByZWZlciB0b1xuXHRcdFx0XHRcdCAqIGl0IGFzIChwcmV2aW91cyBub2RlKS5uZXh0LCBpbnN0ZWFkIG9mIHNvbWV0aGluZyBsaWtlIChsaXN0KS5oZWFkXG5cdFx0XHRcdFx0ICovXG5cdFx0XHRcdFx0JG8gPSB7IGtleToge30sIG5leHQ6IG51bGwgfTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0U2V0KCRvLCBrZXksIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBjaGFubmVsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nO1xuXG52YXIgRm9ybWF0ID0ge1xuICAgIFJGQzE3Mzg6ICdSRkMxNzM4JyxcbiAgICBSRkMzOTg2OiAnUkZDMzk4Nidcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgICdkZWZhdWx0JzogRm9ybWF0LlJGQzM5ODYsXG4gICAgZm9ybWF0dGVyczoge1xuICAgICAgICBSRkMxNzM4OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlLmNhbGwodmFsdWUsIHBlcmNlbnRUd2VudGllcywgJysnKTtcbiAgICAgICAgfSxcbiAgICAgICAgUkZDMzk4NjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgUkZDMTczODogRm9ybWF0LlJGQzE3MzgsXG4gICAgUkZDMzk4NjogRm9ybWF0LlJGQzM5ODZcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgaGV4VGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgYXJyYXkucHVzaCgnJScgKyAoKGkgPCAxNiA/ICcwJyA6ICcnKSArIGkudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59KCkpO1xuXG52YXIgY29tcGFjdFF1ZXVlID0gZnVuY3Rpb24gY29tcGFjdFF1ZXVlKHF1ZXVlKSB7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2pdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5vYmpbaXRlbS5wcm9wXSA9IGNvbXBhY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBhcnJheVRvT2JqZWN0ID0gZnVuY3Rpb24gYXJyYXlUb09iamVjdChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0gb3B0aW9ucyAmJiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIC8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogMCAqL1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMgJiYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSkgfHwgIWhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbc291cmNlXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3RhcmdldCwgc291cmNlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXQgfHwgdHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBtZXJnZVRhcmdldCA9IHRhcmdldDtcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmICFpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgbWVyZ2VUYXJnZXQgPSBhcnJheVRvT2JqZWN0KHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiBpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgIGlmIChoYXMuY2FsbCh0YXJnZXQsIGkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEl0ZW0gPSB0YXJnZXRbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEl0ZW0gJiYgdHlwZW9mIHRhcmdldEl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IG1lcmdlKHRhcmdldEl0ZW0sIGl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAoaGFzLmNhbGwoYWNjLCBrZXkpKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IG1lcmdlKGFjY1trZXldLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbWVyZ2VUYXJnZXQpO1xufTtcblxudmFyIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnblNpbmdsZVNvdXJjZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB0YXJnZXQpO1xufTtcblxudmFyIGRlY29kZSA9IGZ1bmN0aW9uIChzdHIsIGRlY29kZXIsIGNoYXJzZXQpIHtcbiAgICB2YXIgc3RyV2l0aG91dFBsdXMgPSBzdHIucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAvLyB1bmVzY2FwZSBuZXZlciB0aHJvd3MsIG5vIHRyeS4uLmNhdGNoIG5lZWRlZDpcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzLnJlcGxhY2UoLyVbMC05YS1mXXsyfS9naSwgdW5lc2NhcGUpO1xuICAgIH1cbiAgICAvLyB1dGYtOFxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyV2l0aG91dFBsdXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzO1xuICAgIH1cbn07XG5cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoc3RyLCBkZWZhdWx0RW5jb2RlciwgY2hhcnNldCwga2luZCwgZm9ybWF0KSB7XG4gICAgLy8gVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IHdyaXR0ZW4gYnkgQnJpYW4gV2hpdGUgKG1zY2RleCkgZm9yIHRoZSBpby5qcyBjb3JlIHF1ZXJ5c3RyaW5nIGxpYnJhcnkuXG4gICAgLy8gSXQgaGFzIGJlZW4gYWRhcHRlZCBoZXJlIGZvciBzdHJpY3RlciBhZGhlcmVuY2UgdG8gUkZDIDM5ODZcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHZhciBzdHJpbmcgPSBzdHI7XG4gICAgaWYgKHR5cGVvZiBzdHIgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHN0cmluZyA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzdHIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3RyaW5nID0gU3RyaW5nKHN0cik7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICByZXR1cm4gZXNjYXBlKHN0cmluZykucmVwbGFjZSgvJXVbMC05YS1mXXs0fS9naSwgZnVuY3Rpb24gKCQwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyUyNiUyMycgKyBwYXJzZUludCgkMC5zbGljZSgyKSwgMTYpICsgJyUzQic7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBvdXQgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGMgPT09IDB4MkQgLy8gLVxuICAgICAgICAgICAgfHwgYyA9PT0gMHgyRSAvLyAuXG4gICAgICAgICAgICB8fCBjID09PSAweDVGIC8vIF9cbiAgICAgICAgICAgIHx8IGMgPT09IDB4N0UgLy8gflxuICAgICAgICAgICAgfHwgKGMgPj0gMHgzMCAmJiBjIDw9IDB4MzkpIC8vIDAtOVxuICAgICAgICAgICAgfHwgKGMgPj0gMHg0MSAmJiBjIDw9IDB4NUEpIC8vIGEtelxuICAgICAgICAgICAgfHwgKGMgPj0gMHg2MSAmJiBjIDw9IDB4N0EpIC8vIEEtWlxuICAgICAgICAgICAgfHwgKGZvcm1hdCA9PT0gZm9ybWF0cy5SRkMxNzM4ICYmIChjID09PSAweDI4IHx8IGMgPT09IDB4MjkpKSAvLyAoIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvdXQgKz0gc3RyaW5nLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyBoZXhUYWJsZVtjXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4QzAgfCAoYyA+PiA2KV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4RDgwMCB8fCBjID49IDB4RTAwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4RTAgfCAoYyA+PiAxMildICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXSArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzRkYpIDw8IDEwKSB8IChzdHJpbmcuY2hhckNvZGVBdChpKSAmIDB4M0ZGKSk7XG4gICAgICAgIC8qIGVzbGludCBvcGVyYXRvci1saW5lYnJlYWs6IFsyLCBcImJlZm9yZVwiXSAqL1xuICAgICAgICBvdXQgKz0gaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiAxMikgJiAweDNGKV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbnZhciBjb21wYWN0ID0gZnVuY3Rpb24gY29tcGFjdCh2YWx1ZSkge1xuICAgIHZhciBxdWV1ZSA9IFt7IG9iajogeyBvOiB2YWx1ZSB9LCBwcm9wOiAnbycgfV07XG4gICAgdmFyIHJlZnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZVtpXTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiByZWZzLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHsgb2JqOiBvYmosIHByb3A6IGtleSB9KTtcbiAgICAgICAgICAgICAgICByZWZzLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBhY3RRdWV1ZShxdWV1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgaXNSZWdFeHAgPSBmdW5jdGlvbiBpc1JlZ0V4cChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxudmFyIGlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIShvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKTtcbn07XG5cbnZhciBjb21iaW5lID0gZnVuY3Rpb24gY29tYmluZShhLCBiKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdChhLCBiKTtcbn07XG5cbnZhciBtYXliZU1hcCA9IGZ1bmN0aW9uIG1heWJlTWFwKHZhbCwgZm4pIHtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhciBtYXBwZWQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG1hcHBlZC5wdXNoKGZuKHZhbFtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgfVxuICAgIHJldHVybiBmbih2YWwpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgYXJyYXlUb09iamVjdDogYXJyYXlUb09iamVjdCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBjb21iaW5lOiBjb21iaW5lLFxuICAgIGNvbXBhY3Q6IGNvbXBhY3QsXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICAgIGlzUmVnRXhwOiBpc1JlZ0V4cCxcbiAgICBtYXliZU1hcDogbWF5YmVNYXAsXG4gICAgbWVyZ2U6IG1lcmdlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0U2lkZUNoYW5uZWwgPSByZXF1aXJlKCdzaWRlLWNoYW5uZWwnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGFycmF5UHJlZml4R2VuZXJhdG9ycyA9IHtcbiAgICBicmFja2V0czogZnVuY3Rpb24gYnJhY2tldHMocHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnW10nO1xuICAgIH0sXG4gICAgY29tbWE6ICdjb21tYScsXG4gICAgaW5kaWNlczogZnVuY3Rpb24gaW5kaWNlcyhwcmVmaXgsIGtleSkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1snICsga2V5ICsgJ10nO1xuICAgIH0sXG4gICAgcmVwZWF0OiBmdW5jdGlvbiByZXBlYXQocHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfVxufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIHNwbGl0ID0gU3RyaW5nLnByb3RvdHlwZS5zcGxpdDtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0Rm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xudmFyIGRlZmF1bHRzID0ge1xuICAgIGFkZFF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBlbmNvZGU6IHRydWUsXG4gICAgZW5jb2RlcjogdXRpbHMuZW5jb2RlLFxuICAgIGVuY29kZVZhbHVlc09ubHk6IGZhbHNlLFxuICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICBmb3JtYXR0ZXI6IGZvcm1hdHMuZm9ybWF0dGVyc1tkZWZhdWx0Rm9ybWF0XSxcbiAgICAvLyBkZXByZWNhdGVkXG4gICAgaW5kaWNlczogZmFsc2UsXG4gICAgc2VyaWFsaXplRGF0ZTogZnVuY3Rpb24gc2VyaWFsaXplRGF0ZShkYXRlKSB7XG4gICAgICAgIHJldHVybiB0b0lTTy5jYWxsKGRhdGUpO1xuICAgIH0sXG4gICAgc2tpcE51bGxzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaXNOb25OdWxsaXNoUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNOb25OdWxsaXNoUHJpbWl0aXZlKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnc3ltYm9sJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2JpZ2ludCc7XG59O1xuXG52YXIgc2VudGluZWwgPSB7fTtcblxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICBvYmplY3QsXG4gICAgcHJlZml4LFxuICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVyLFxuICAgIGZpbHRlcixcbiAgICBzb3J0LFxuICAgIGFsbG93RG90cyxcbiAgICBzZXJpYWxpemVEYXRlLFxuICAgIGZvcm1hdCxcbiAgICBmb3JtYXR0ZXIsXG4gICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICBjaGFyc2V0LFxuICAgIHNpZGVDaGFubmVsXG4pIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuXG4gICAgdmFyIHRtcFNjID0gc2lkZUNoYW5uZWw7XG4gICAgdmFyIHN0ZXAgPSAwO1xuICAgIHZhciBmaW5kRmxhZyA9IGZhbHNlO1xuICAgIHdoaWxlICgodG1wU2MgPSB0bXBTYy5nZXQoc2VudGluZWwpKSAhPT0gdm9pZCB1bmRlZmluZWQgJiYgIWZpbmRGbGFnKSB7XG4gICAgICAgIC8vIFdoZXJlIG9iamVjdCBsYXN0IGFwcGVhcmVkIGluIHRoZSByZWYgdHJlZVxuICAgICAgICB2YXIgcG9zID0gdG1wU2MuZ2V0KG9iamVjdCk7XG4gICAgICAgIHN0ZXAgKz0gMTtcbiAgICAgICAgaWYgKHR5cGVvZiBwb3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAocG9zID09PSBzdGVwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0N5Y2xpYyBvYmplY3QgdmFsdWUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmluZEZsYWcgPSB0cnVlOyAvLyBCcmVhayB3aGlsZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG1wU2MuZ2V0KHNlbnRpbmVsKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHN0ZXAgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqID0gc2VyaWFsaXplRGF0ZShvYmopO1xuICAgIH0gZWxzZSBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgb2JqID0gdXRpbHMubWF5YmVNYXAob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHN0cmljdE51bGxIYW5kbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXIgJiYgIWVuY29kZVZhbHVlc09ubHkgPyBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScsIGZvcm1hdCkgOiBwcmVmaXg7XG4gICAgICAgIH1cblxuICAgICAgICBvYmogPSAnJztcbiAgICB9XG5cbiAgICBpZiAoaXNOb25OdWxsaXNoUHJpbWl0aXZlKG9iaikgfHwgdXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gZW5jb2RlVmFsdWVzT25seSA/IHByZWZpeCA6IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAna2V5JywgZm9ybWF0KTtcbiAgICAgICAgICAgIGlmIChnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGVuY29kZVZhbHVlc09ubHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVzQXJyYXkgPSBzcGxpdC5jYWxsKFN0cmluZyhvYmopLCAnLCcpO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNKb2luZWQgPSAnJztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlc0FycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc0pvaW5lZCArPSAoaSA9PT0gMCA/ICcnIDogJywnKSArIGZvcm1hdHRlcihlbmNvZGVyKHZhbHVlc0FycmF5W2ldLCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAndmFsdWUnLCBmb3JtYXQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIoa2V5VmFsdWUpICsgJz0nICsgdmFsdWVzSm9pbmVkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ3ZhbHVlJywgZm9ybWF0KSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbZm9ybWF0dGVyKHByZWZpeCkgKyAnPScgKyBmb3JtYXR0ZXIoU3RyaW5nKG9iaikpXTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgLy8gd2UgbmVlZCB0byBqb2luIGVsZW1lbnRzIGluXG4gICAgICAgIG9iaktleXMgPSBbeyB2YWx1ZTogb2JqLmxlbmd0aCA+IDAgPyBvYmouam9pbignLCcpIHx8IG51bGwgOiB2b2lkIHVuZGVmaW5lZCB9XTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqS2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tqXTtcbiAgICAgICAgdmFyIHZhbHVlID0gdHlwZW9mIGtleSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGtleS52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyBrZXkudmFsdWUgOiBvYmpba2V5XTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlQcmVmaXggPSBpc0FycmF5KG9iailcbiAgICAgICAgICAgID8gdHlwZW9mIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdmdW5jdGlvbicgPyBnZW5lcmF0ZUFycmF5UHJlZml4KHByZWZpeCwga2V5KSA6IHByZWZpeFxuICAgICAgICAgICAgOiBwcmVmaXggKyAoYWxsb3dEb3RzID8gJy4nICsga2V5IDogJ1snICsga2V5ICsgJ10nKTtcblxuICAgICAgICBzaWRlQ2hhbm5lbC5zZXQob2JqZWN0LCBzdGVwKTtcbiAgICAgICAgdmFyIHZhbHVlU2lkZUNoYW5uZWwgPSBnZXRTaWRlQ2hhbm5lbCgpO1xuICAgICAgICB2YWx1ZVNpZGVDaGFubmVsLnNldChzZW50aW5lbCwgc2lkZUNoYW5uZWwpO1xuICAgICAgICBwdXNoVG9BcnJheSh2YWx1ZXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAga2V5UHJlZml4LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgIGVuY29kZXIsXG4gICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgICAgIGZvcm1hdHRlcixcbiAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICBjaGFyc2V0LFxuICAgICAgICAgICAgdmFsdWVTaWRlQ2hhbm5lbFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxudmFyIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmVuY29kZXIgIT09IG51bGwgJiYgdHlwZW9mIG9wdHMuZW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuZW5jb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBjaGFyc2V0ID0gb3B0cy5jaGFyc2V0IHx8IGRlZmF1bHRzLmNoYXJzZXQ7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmNoYXJzZXQgIT09ICd1bmRlZmluZWQnICYmIG9wdHMuY2hhcnNldCAhPT0gJ3V0Zi04JyAmJiBvcHRzLmNoYXJzZXQgIT09ICdpc28tODg1OS0xJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZvcm1hdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFoYXMuY2FsbChmb3JtYXRzLmZvcm1hdHRlcnMsIG9wdHMuZm9ybWF0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1hdCA9IG9wdHMuZm9ybWF0O1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICB2YXIgZmlsdGVyID0gZGVmYXVsdHMuZmlsdGVyO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5maWx0ZXIgPT09ICdmdW5jdGlvbicgfHwgaXNBcnJheShvcHRzLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0cy5maWx0ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkUXVlcnlQcmVmaXg6IHR5cGVvZiBvcHRzLmFkZFF1ZXJ5UHJlZml4ID09PSAnYm9vbGVhbicgPyBvcHRzLmFkZFF1ZXJ5UHJlZml4IDogZGVmYXVsdHMuYWRkUXVlcnlQcmVmaXgsXG4gICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHMsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZGVsaW1pdGVyIDogb3B0cy5kZWxpbWl0ZXIsXG4gICAgICAgIGVuY29kZTogdHlwZW9mIG9wdHMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZSA6IGRlZmF1bHRzLmVuY29kZSxcbiAgICAgICAgZW5jb2RlcjogdHlwZW9mIG9wdHMuZW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZW5jb2RlciA6IGRlZmF1bHRzLmVuY29kZXIsXG4gICAgICAgIGVuY29kZVZhbHVlc09ubHk6IHR5cGVvZiBvcHRzLmVuY29kZVZhbHVlc09ubHkgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlVmFsdWVzT25seSA6IGRlZmF1bHRzLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgICAgZm9ybWF0dGVyOiBmb3JtYXR0ZXIsXG4gICAgICAgIHNlcmlhbGl6ZURhdGU6IHR5cGVvZiBvcHRzLnNlcmlhbGl6ZURhdGUgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNlcmlhbGl6ZURhdGUgOiBkZWZhdWx0cy5zZXJpYWxpemVEYXRlLFxuICAgICAgICBza2lwTnVsbHM6IHR5cGVvZiBvcHRzLnNraXBOdWxscyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5za2lwTnVsbHMgOiBkZWZhdWx0cy5za2lwTnVsbHMsXG4gICAgICAgIHNvcnQ6IHR5cGVvZiBvcHRzLnNvcnQgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNvcnQgOiBudWxsLFxuICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmdcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBvcHRzKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cyk7XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICB2YXIgZmlsdGVyO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqID0gZmlsdGVyKCcnLCBvYmopO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvcHRpb25zLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHZhciBhcnJheUZvcm1hdDtcbiAgICBpZiAob3B0cyAmJiBvcHRzLmFycmF5Rm9ybWF0IGluIGFycmF5UHJlZml4R2VuZXJhdG9ycykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdHMuYXJyYXlGb3JtYXQ7XG4gICAgfSBlbHNlIGlmIChvcHRzICYmICdpbmRpY2VzJyBpbiBvcHRzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSAnaW5kaWNlcyc7XG4gICAgfVxuXG4gICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBhcnJheVByZWZpeEdlbmVyYXRvcnNbYXJyYXlGb3JtYXRdO1xuXG4gICAgaWYgKCFvYmpLZXlzKSB7XG4gICAgICAgIG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvcnQpIHtcbiAgICAgICAgb2JqS2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG4gICAgfVxuXG4gICAgdmFyIHNpZGVDaGFubmVsID0gZ2V0U2lkZUNoYW5uZWwoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcE51bGxzLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGUgPyBvcHRpb25zLmVuY29kZXIgOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLnNvcnQsXG4gICAgICAgICAgICBvcHRpb25zLmFsbG93RG90cyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIG9wdGlvbnMuZm9ybWF0LFxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXR0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICBvcHRpb25zLmNoYXJzZXQsXG4gICAgICAgICAgICBzaWRlQ2hhbm5lbFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICB2YXIgam9pbmVkID0ga2V5cy5qb2luKG9wdGlvbnMuZGVsaW1pdGVyKTtcbiAgICB2YXIgcHJlZml4ID0gb3B0aW9ucy5hZGRRdWVyeVByZWZpeCA9PT0gdHJ1ZSA/ICc/JyA6ICcnO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpLCB0aGUgXCJudW1lcmljIGVudGl0eVwiIHJlcHJlc2VudGF0aW9uIG9mIGEgY2hlY2ttYXJrXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0ImJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lRTIlOUMlOTMmJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqb2luZWQubGVuZ3RoID4gMCA/IHByZWZpeCArIGpvaW5lZCA6ICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZSxcbiAgICBhbGxvd1NwYXJzZTogZmFsc2UsXG4gICAgYXJyYXlMaW1pdDogMjAsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGNvbW1hOiBmYWxzZSxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgaWdub3JlUXVlcnlQcmVmaXg6IGZhbHNlLFxuICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogZmFsc2UsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDAsXG4gICAgcGFyc2VBcnJheXM6IHRydWUsXG4gICAgcGxhaW5PYmplY3RzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiMoXFxkKyk7L2csIGZ1bmN0aW9uICgkMCwgbnVtYmVyU3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG51bWJlclN0ciwgMTApKTtcbiAgICB9KTtcbn07XG5cbnZhciBwYXJzZUFycmF5VmFsdWUgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNvbW1hICYmIHZhbC5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdmFsLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbn07XG5cbi8vIFRoaXMgaXMgd2hhdCBicm93c2VycyB3aWxsIHN1Ym1pdCB3aGVuIHRoZSDinJMgY2hhcmFjdGVyIG9jY3VycyBpbiBhblxuLy8gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIGJvZHkgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgcGFnZSBjb250YWluaW5nXG4vLyB0aGUgZm9ybSBpcyBpc28tODg1OS0xLCBvciB3aGVuIHRoZSBzdWJtaXR0ZWQgZm9ybSBoYXMgYW4gYWNjZXB0LWNoYXJzZXRcbi8vIGF0dHJpYnV0ZSBvZiBpc28tODg1OS0xLiBQcmVzdW1hYmx5IGFsc28gd2l0aCBvdGhlciBjaGFyc2V0cyB0aGF0IGRvIG5vdCBjb250YWluXG4vLyB0aGUg4pyTIGNoYXJhY3Rlciwgc3VjaCBhcyB1cy1hc2NpaS5cbnZhciBpc29TZW50aW5lbCA9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpXG5cbi8vIFRoZXNlIGFyZSB0aGUgcGVyY2VudC1lbmNvZGVkIHV0Zi04IG9jdGV0cyByZXByZXNlbnRpbmcgYSBjaGVja21hcmssIGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCBhY3R1YWxseSBpcyB1dGYtOCBlbmNvZGVkLlxudmFyIGNoYXJzZXRTZW50aW5lbCA9ICd1dGY4PSVFMiU5QyU5Myc7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcblxudmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgdmFyIGNsZWFuU3RyID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA/IHN0ci5yZXBsYWNlKC9eXFw/LywgJycpIDogc3RyO1xuICAgIHZhciBsaW1pdCA9IG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09IEluZmluaXR5ID8gdW5kZWZpbmVkIDogb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdDtcbiAgICB2YXIgcGFydHMgPSBjbGVhblN0ci5zcGxpdChvcHRpb25zLmRlbGltaXRlciwgbGltaXQpO1xuICAgIHZhciBza2lwSW5kZXggPSAtMTsgLy8gS2VlcCB0cmFjayBvZiB3aGVyZSB0aGUgdXRmOCBzZW50aW5lbCB3YXMgZm91bmRcbiAgICB2YXIgaTtcblxuICAgIHZhciBjaGFyc2V0ID0gb3B0aW9ucy5jaGFyc2V0O1xuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0c1tpXS5pbmRleE9mKCd1dGY4PScpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzW2ldID09PSBjaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICd1dGYtOCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXSA9PT0gaXNvU2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICdpc28tODg1OS0xJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2tpcEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpID0gcGFydHMubGVuZ3RoOyAvLyBUaGUgZXNsaW50IHNldHRpbmdzIGRvIG5vdCBhbGxvdyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSA9PT0gc2tpcEluZGV4KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgICAgIHZhciBicmFja2V0RXF1YWxzUG9zID0gcGFydC5pbmRleE9mKCddPScpO1xuICAgICAgICB2YXIgcG9zID0gYnJhY2tldEVxdWFsc1BvcyA9PT0gLTEgPyBwYXJ0LmluZGV4T2YoJz0nKSA6IGJyYWNrZXRFcXVhbHNQb3MgKyAxO1xuXG4gICAgICAgIHZhciBrZXksIHZhbDtcbiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAna2V5Jyk7XG4gICAgICAgICAgICB2YWwgPSBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA/IG51bGwgOiAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LnNsaWNlKDAsIHBvcyksIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHZhbCA9IHV0aWxzLm1heWJlTWFwKFxuICAgICAgICAgICAgICAgIHBhcnNlQXJyYXlWYWx1ZShwYXJ0LnNsaWNlKHBvcyArIDEpLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZW5jb2RlZFZhbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kZWNvZGVyKGVuY29kZWRWYWwsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICd2YWx1ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzICYmIGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgdmFsID0gaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzKHZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFydC5pbmRleE9mKCdbXT0nKSA+IC0xKSB7XG4gICAgICAgICAgICB2YWwgPSBpc0FycmF5KHZhbCkgPyBbdmFsXSA6IHZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICB2YXIgbGVhZiA9IHZhbHVlc1BhcnNlZCA/IHZhbCA6IHBhcnNlQXJyYXlWYWx1ZSh2YWwsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScgJiYgb3B0aW9ucy5wYXJzZUFycmF5cykge1xuICAgICAgICAgICAgb2JqID0gW10uY29uY2F0KGxlYWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgICAgICAgICB2YXIgY2xlYW5Sb290ID0gcm9vdC5jaGFyQXQoMCkgPT09ICdbJyAmJiByb290LmNoYXJBdChyb290Lmxlbmd0aCAtIDEpID09PSAnXScgPyByb290LnNsaWNlKDEsIC0xKSA6IHJvb3Q7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChjbGVhblJvb3QsIDEwKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5wYXJzZUFycmF5cyAmJiBjbGVhblJvb3QgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb2JqID0geyAwOiBsZWFmIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICFpc05hTihpbmRleClcbiAgICAgICAgICAgICAgICAmJiByb290ICE9PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBTdHJpbmcoaW5kZXgpID09PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgJiYgKG9wdGlvbnMucGFyc2VBcnJheXMgJiYgaW5kZXggPD0gb3B0aW9ucy5hcnJheUxpbWl0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICAgICAgb2JqW2luZGV4XSA9IGxlYWY7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNsZWFuUm9vdCAhPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgICAgICAgICBvYmpbY2xlYW5Sb290XSA9IGxlYWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZWFmID0gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiBsZWFmO1xufTtcblxudmFyIHBhcnNlS2V5cyA9IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdLZXlzKGdpdmVuS2V5LCB2YWwsIG9wdGlvbnMsIHZhbHVlc1BhcnNlZCkge1xuICAgIGlmICghZ2l2ZW5LZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRyYW5zZm9ybSBkb3Qgbm90YXRpb24gdG8gYnJhY2tldCBub3RhdGlvblxuICAgIHZhciBrZXkgPSBvcHRpb25zLmFsbG93RG90cyA/IGdpdmVuS2V5LnJlcGxhY2UoL1xcLihbXi5bXSspL2csICdbJDFdJykgOiBnaXZlbktleTtcblxuICAgIC8vIFRoZSByZWdleCBjaHVua3NcblxuICAgIHZhciBicmFja2V0cyA9IC8oXFxbW15bXFxdXSpdKS87XG4gICAgdmFyIGNoaWxkID0gLyhcXFtbXltcXF1dKl0pL2c7XG5cbiAgICAvLyBHZXQgdGhlIHBhcmVudFxuXG4gICAgdmFyIHNlZ21lbnQgPSBvcHRpb25zLmRlcHRoID4gMCAmJiBicmFja2V0cy5leGVjKGtleSk7XG4gICAgdmFyIHBhcmVudCA9IHNlZ21lbnQgPyBrZXkuc2xpY2UoMCwgc2VnbWVudC5pbmRleCkgOiBrZXk7XG5cbiAgICAvLyBTdGFzaCB0aGUgcGFyZW50IGlmIGl0IGV4aXN0c1xuXG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIC8vIElmIHdlIGFyZW4ndCB1c2luZyBwbGFpbiBvYmplY3RzLCBvcHRpb25hbGx5IHByZWZpeCBrZXlzIHRoYXQgd291bGQgb3ZlcndyaXRlIG9iamVjdCBwcm90b3R5cGUgcHJvcGVydGllc1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHBhcmVudCkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzLnB1c2gocGFyZW50KTtcbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggY2hpbGRyZW4gYXBwZW5kaW5nIHRvIHRoZSBhcnJheSB1bnRpbCB3ZSBoaXQgZGVwdGhcblxuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAob3B0aW9ucy5kZXB0aCA+IDAgJiYgKHNlZ21lbnQgPSBjaGlsZC5leGVjKGtleSkpICE9PSBudWxsICYmIGkgPCBvcHRpb25zLmRlcHRoKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzZWdtZW50WzFdLnNsaWNlKDEsIC0xKSkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlJ3MgYSByZW1haW5kZXIsIGp1c3QgYWRkIHdoYXRldmVyIGlzIGxlZnRcblxuICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIGtleXMucHVzaCgnWycgKyBrZXkuc2xpY2Uoc2VnbWVudC5pbmRleCkgKyAnXScpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZU9iamVjdChrZXlzLCB2YWwsIG9wdGlvbnMsIHZhbHVlc1BhcnNlZCk7XG59O1xuXG52YXIgbm9ybWFsaXplUGFyc2VPcHRpb25zID0gZnVuY3Rpb24gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmRlY29kZXIgIT09IG51bGwgJiYgb3B0cy5kZWNvZGVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdHMuZGVjb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEZWNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgdmFyIGNoYXJzZXQgPSB0eXBlb2Ygb3B0cy5jaGFyc2V0ID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmNoYXJzZXQgOiBvcHRzLmNoYXJzZXQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxvd0RvdHM6IHR5cGVvZiBvcHRzLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd1Byb3RvdHlwZXM6IHR5cGVvZiBvcHRzLmFsbG93UHJvdG90eXBlcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hbGxvd1Byb3RvdHlwZXMgOiBkZWZhdWx0cy5hbGxvd1Byb3RvdHlwZXMsXG4gICAgICAgIGFsbG93U3BhcnNlOiB0eXBlb2Ygb3B0cy5hbGxvd1NwYXJzZSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hbGxvd1NwYXJzZSA6IGRlZmF1bHRzLmFsbG93U3BhcnNlLFxuICAgICAgICBhcnJheUxpbWl0OiB0eXBlb2Ygb3B0cy5hcnJheUxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdHMuYXJyYXlMaW1pdCA6IGRlZmF1bHRzLmFycmF5TGltaXQsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgY29tbWE6IHR5cGVvZiBvcHRzLmNvbW1hID09PSAnYm9vbGVhbicgPyBvcHRzLmNvbW1hIDogZGVmYXVsdHMuY29tbWEsXG4gICAgICAgIGRlY29kZXI6IHR5cGVvZiBvcHRzLmRlY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRzLmRlY29kZXIgOiBkZWZhdWx0cy5kZWNvZGVyLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgdXRpbHMuaXNSZWdFeHAob3B0cy5kZWxpbWl0ZXIpID8gb3B0cy5kZWxpbWl0ZXIgOiBkZWZhdWx0cy5kZWxpbWl0ZXIsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbXBsaWNpdC1jb2VyY2lvbiwgbm8tZXh0cmEtcGFyZW5zXG4gICAgICAgIGRlcHRoOiAodHlwZW9mIG9wdHMuZGVwdGggPT09ICdudW1iZXInIHx8IG9wdHMuZGVwdGggPT09IGZhbHNlKSA/ICtvcHRzLmRlcHRoIDogZGVmYXVsdHMuZGVwdGgsXG4gICAgICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBvcHRzLmlnbm9yZVF1ZXJ5UHJlZml4ID09PSB0cnVlLFxuICAgICAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IHR5cGVvZiBvcHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgOiBkZWZhdWx0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMsXG4gICAgICAgIHBhcmFtZXRlckxpbWl0OiB0eXBlb2Ygb3B0cy5wYXJhbWV0ZXJMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLnBhcmFtZXRlckxpbWl0IDogZGVmYXVsdHMucGFyYW1ldGVyTGltaXQsXG4gICAgICAgIHBhcnNlQXJyYXlzOiBvcHRzLnBhcnNlQXJyYXlzICE9PSBmYWxzZSxcbiAgICAgICAgcGxhaW5PYmplY3RzOiB0eXBlb2Ygb3B0cy5wbGFpbk9iamVjdHMgPT09ICdib29sZWFuJyA/IG9wdHMucGxhaW5PYmplY3RzIDogZGVmYXVsdHMucGxhaW5PYmplY3RzLFxuICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmdcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBvcHRzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cyk7XG5cbiAgICBpZiAoc3RyID09PSAnJyB8fCBzdHIgPT09IG51bGwgfHwgdHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIH1cblxuICAgIHZhciB0ZW1wT2JqID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBwYXJzZVZhbHVlcyhzdHIsIG9wdGlvbnMpIDogc3RyO1xuICAgIHZhciBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUga2V5cyBhbmQgc2V0dXAgdGhlIG5ldyBvYmplY3RcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGVtcE9iaik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgbmV3T2JqID0gcGFyc2VLZXlzKGtleSwgdGVtcE9ialtrZXldLCBvcHRpb25zLCB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyk7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hbGxvd1NwYXJzZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiB1dGlscy5jb21wYWN0KG9iaik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIiwiLyoqXG4gKiAgYmFzZTY0LnRzXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1DbGF1c2UgTGljZW5zZS5cbiAqICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiAgUmVmZXJlbmNlczpcbiAqICAgIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0XG4gKlxuICogQGF1dGhvciBEYW4gS29nYWkgKGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5rb2dhaSlcbiAqL1xuY29uc3QgdmVyc2lvbiA9ICczLjcuMic7XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBsb3dlcmNhc2UgYHZlcnNpb25gLlxuICovXG5jb25zdCBWRVJTSU9OID0gdmVyc2lvbjtcbmNvbnN0IF9oYXNhdG9iID0gdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbic7XG5jb25zdCBfaGFzYnRvYSA9IHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nO1xuY29uc3QgX2hhc0J1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5jb25zdCBfVEQgPSB0eXBlb2YgVGV4dERlY29kZXIgPT09ICdmdW5jdGlvbicgPyBuZXcgVGV4dERlY29kZXIoKSA6IHVuZGVmaW5lZDtcbmNvbnN0IF9URSA9IHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBUZXh0RW5jb2RlcigpIDogdW5kZWZpbmVkO1xuY29uc3QgYjY0Y2ggPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuY29uc3QgYjY0Y2hzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYjY0Y2gpO1xuY29uc3QgYjY0dGFiID0gKChhKSA9PiB7XG4gICAgbGV0IHRhYiA9IHt9O1xuICAgIGEuZm9yRWFjaCgoYywgaSkgPT4gdGFiW2NdID0gaSk7XG4gICAgcmV0dXJuIHRhYjtcbn0pKGI2NGNocyk7XG5jb25zdCBiNjRyZSA9IC9eKD86W0EtWmEtelxcZCtcXC9dezR9KSo/KD86W0EtWmEtelxcZCtcXC9dezJ9KD86PT0pP3xbQS1aYS16XFxkK1xcL117M309Pyk/JC87XG5jb25zdCBfZnJvbUNDID0gU3RyaW5nLmZyb21DaGFyQ29kZS5iaW5kKFN0cmluZyk7XG5jb25zdCBfVThBZnJvbSA9IHR5cGVvZiBVaW50OEFycmF5LmZyb20gPT09ICdmdW5jdGlvbidcbiAgICA/IFVpbnQ4QXJyYXkuZnJvbS5iaW5kKFVpbnQ4QXJyYXkpXG4gICAgOiAoaXQsIGZuID0gKHgpID0+IHgpID0+IG5ldyBVaW50OEFycmF5KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGl0LCAwKS5tYXAoZm4pKTtcbmNvbnN0IF9ta1VyaVNhZmUgPSAoc3JjKSA9PiBzcmNcbiAgICAucmVwbGFjZSgvPS9nLCAnJykucmVwbGFjZSgvWytcXC9dL2csIChtMCkgPT4gbTAgPT0gJysnID8gJy0nIDogJ18nKTtcbmNvbnN0IF90aWR5QjY0ID0gKHMpID0+IHMucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9dL2csICcnKTtcbi8qKlxuICogcG9seWZpbGwgdmVyc2lvbiBvZiBgYnRvYWBcbiAqL1xuY29uc3QgYnRvYVBvbHlmaWxsID0gKGJpbikgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKCdwb2x5ZmlsbGVkJyk7XG4gICAgbGV0IHUzMiwgYzAsIGMxLCBjMiwgYXNjID0gJyc7XG4gICAgY29uc3QgcGFkID0gYmluLmxlbmd0aCAlIDM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOykge1xuICAgICAgICBpZiAoKGMwID0gYmluLmNoYXJDb2RlQXQoaSsrKSkgPiAyNTUgfHxcbiAgICAgICAgICAgIChjMSA9IGJpbi5jaGFyQ29kZUF0KGkrKykpID4gMjU1IHx8XG4gICAgICAgICAgICAoYzIgPSBiaW4uY2hhckNvZGVBdChpKyspKSA+IDI1NSlcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY2hhcmFjdGVyIGZvdW5kJyk7XG4gICAgICAgIHUzMiA9IChjMCA8PCAxNikgfCAoYzEgPDwgOCkgfCBjMjtcbiAgICAgICAgYXNjICs9IGI2NGNoc1t1MzIgPj4gMTggJiA2M11cbiAgICAgICAgICAgICsgYjY0Y2hzW3UzMiA+PiAxMiAmIDYzXVxuICAgICAgICAgICAgKyBiNjRjaHNbdTMyID4+IDYgJiA2M11cbiAgICAgICAgICAgICsgYjY0Y2hzW3UzMiAmIDYzXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhZCA/IGFzYy5zbGljZSgwLCBwYWQgLSAzKSArIFwiPT09XCIuc3Vic3RyaW5nKHBhZCkgOiBhc2M7XG59O1xuLyoqXG4gKiBkb2VzIHdoYXQgYHdpbmRvdy5idG9hYCBvZiB3ZWIgYnJvd3NlcnMgZG8uXG4gKiBAcGFyYW0ge1N0cmluZ30gYmluIGJpbmFyeSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NC1lbmNvZGVkIHN0cmluZ1xuICovXG5jb25zdCBfYnRvYSA9IF9oYXNidG9hID8gKGJpbikgPT4gYnRvYShiaW4pXG4gICAgOiBfaGFzQnVmZmVyID8gKGJpbikgPT4gQnVmZmVyLmZyb20oYmluLCAnYmluYXJ5JykudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgIDogYnRvYVBvbHlmaWxsO1xuY29uc3QgX2Zyb21VaW50OEFycmF5ID0gX2hhc0J1ZmZlclxuICAgID8gKHU4YSkgPT4gQnVmZmVyLmZyb20odThhKS50b1N0cmluZygnYmFzZTY0JylcbiAgICA6ICh1OGEpID0+IHtcbiAgICAgICAgLy8gY2YuIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNzEwMDAxL2hvdy10by1jb252ZXJ0LXVpbnQ4LWFycmF5LXRvLWJhc2U2NC1lbmNvZGVkLXN0cmluZy8xMjcxMzMyNiMxMjcxMzMyNlxuICAgICAgICBjb25zdCBtYXhhcmdzID0gMHgxMDAwO1xuICAgICAgICBsZXQgc3RycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHU4YS5sZW5ndGg7IGkgPCBsOyBpICs9IG1heGFyZ3MpIHtcbiAgICAgICAgICAgIHN0cnMucHVzaChfZnJvbUNDLmFwcGx5KG51bGwsIHU4YS5zdWJhcnJheShpLCBpICsgbWF4YXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2J0b2Eoc3Rycy5qb2luKCcnKSk7XG4gICAgfTtcbi8qKlxuICogY29udmVydHMgYSBVaW50OEFycmF5IHRvIGEgQmFzZTY0IHN0cmluZy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VybHNhZmVdIFVSTC1hbmQtZmlsZW5hbWUtc2FmZSBhIGxhIFJGQzQ2NDggwqc1XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgc3RyaW5nXG4gKi9cbmNvbnN0IGZyb21VaW50OEFycmF5ID0gKHU4YSwgdXJsc2FmZSA9IGZhbHNlKSA9PiB1cmxzYWZlID8gX21rVXJpU2FmZShfZnJvbVVpbnQ4QXJyYXkodThhKSkgOiBfZnJvbVVpbnQ4QXJyYXkodThhKTtcbi8vIFRoaXMgdHJpY2sgaXMgZm91bmQgYnJva2VuIGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5rb2dhaS9qcy1iYXNlNjQvaXNzdWVzLzEzMFxuLy8gY29uc3QgdXRvYiA9IChzcmM6IHN0cmluZykgPT4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHNyYykpO1xuLy8gcmV2ZXJ0aW5nIGdvb2Qgb2xkIGZhdGlvbmVkIHJlZ2V4cFxuY29uc3QgY2JfdXRvYiA9IChjKSA9PiB7XG4gICAgaWYgKGMubGVuZ3RoIDwgMikge1xuICAgICAgICB2YXIgY2MgPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIHJldHVybiBjYyA8IDB4ODAgPyBjXG4gICAgICAgICAgICA6IGNjIDwgMHg4MDAgPyAoX2Zyb21DQygweGMwIHwgKGNjID4+PiA2KSlcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8IChjYyAmIDB4M2YpKSlcbiAgICAgICAgICAgICAgICA6IChfZnJvbUNDKDB4ZTAgfCAoKGNjID4+PiAxMikgJiAweDBmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoKGNjID4+PiA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8IChjYyAmIDB4M2YpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgY2MgPSAweDEwMDAwXG4gICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMCkgLSAweEQ4MDApICogMHg0MDBcbiAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgxKSAtIDB4REMwMCk7XG4gICAgICAgIHJldHVybiAoX2Zyb21DQygweGYwIHwgKChjYyA+Pj4gMTgpICYgMHgwNykpXG4gICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8ICgoY2MgPj4+IDEyKSAmIDB4M2YpKVxuICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoKGNjID4+PiA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoY2MgJiAweDNmKSkpO1xuICAgIH1cbn07XG5jb25zdCByZV91dG9iID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRkZdfFteXFx4MDAtXFx4N0ZdL2c7XG4vKipcbiAqIEBkZXByZWNhdGVkIHNob3VsZCBoYXZlIGJlZW4gaW50ZXJuYWwgdXNlIG9ubHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjIFVURi04IHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gVVRGLTE2IHN0cmluZ1xuICovXG5jb25zdCB1dG9iID0gKHUpID0+IHUucmVwbGFjZShyZV91dG9iLCBjYl91dG9iKTtcbi8vXG5jb25zdCBfZW5jb2RlID0gX2hhc0J1ZmZlclxuICAgID8gKHMpID0+IEJ1ZmZlci5mcm9tKHMsICd1dGY4JykudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgOiBfVEVcbiAgICAgICAgPyAocykgPT4gX2Zyb21VaW50OEFycmF5KF9URS5lbmNvZGUocykpXG4gICAgICAgIDogKHMpID0+IF9idG9hKHV0b2IocykpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIFVURi04LWVuY29kZWQgc3RyaW5nIHRvIGEgQmFzZTY0IHN0cmluZy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VybHNhZmVdIGlmIGB0cnVlYCBtYWtlIHRoZSByZXN1bHQgVVJMLXNhZmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBzdHJpbmdcbiAqL1xuY29uc3QgZW5jb2RlID0gKHNyYywgdXJsc2FmZSA9IGZhbHNlKSA9PiB1cmxzYWZlXG4gICAgPyBfbWtVcmlTYWZlKF9lbmNvZGUoc3JjKSlcbiAgICA6IF9lbmNvZGUoc3JjKTtcbi8qKlxuICogY29udmVydHMgYSBVVEYtOC1lbmNvZGVkIHN0cmluZyB0byBVUkwtc2FmZSBCYXNlNjQgUkZDNDY0OCDCpzUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgc3RyaW5nXG4gKi9cbmNvbnN0IGVuY29kZVVSSSA9IChzcmMpID0+IGVuY29kZShzcmMsIHRydWUpO1xuLy8gVGhpcyB0cmljayBpcyBmb3VuZCBicm9rZW4gaHR0cHM6Ly9naXRodWIuY29tL2RhbmtvZ2FpL2pzLWJhc2U2NC9pc3N1ZXMvMTMwXG4vLyBjb25zdCBidG91ID0gKHNyYzogc3RyaW5nKSA9PiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHNyYykpO1xuLy8gcmV2ZXJ0aW5nIGdvb2Qgb2xkIGZhdGlvbmVkIHJlZ2V4cFxuY29uc3QgcmVfYnRvdSA9IC9bXFx4QzAtXFx4REZdW1xceDgwLVxceEJGXXxbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfXxbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfS9nO1xuY29uc3QgY2JfYnRvdSA9IChjY2NjKSA9PiB7XG4gICAgc3dpdGNoIChjY2NjLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB2YXIgY3AgPSAoKDB4MDcgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDE4KVxuICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCAxMilcbiAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSkgPDwgNilcbiAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDMpKSwgb2Zmc2V0ID0gY3AgLSAweDEwMDAwO1xuICAgICAgICAgICAgcmV0dXJuIChfZnJvbUNDKChvZmZzZXQgPj4+IDEwKSArIDB4RDgwMClcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoKG9mZnNldCAmIDB4M0ZGKSArIDB4REMwMCkpO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gX2Zyb21DQygoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCA2KVxuICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBfZnJvbUNDKCgoMHgxZiAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgNilcbiAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSk7XG4gICAgfVxufTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2hvdWxkIGhhdmUgYmVlbiBpbnRlcm5hbCB1c2Ugb25seS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVVRGLTE2IHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gVVRGLTggc3RyaW5nXG4gKi9cbmNvbnN0IGJ0b3UgPSAoYikgPT4gYi5yZXBsYWNlKHJlX2J0b3UsIGNiX2J0b3UpO1xuLyoqXG4gKiBwb2x5ZmlsbCB2ZXJzaW9uIG9mIGBhdG9iYFxuICovXG5jb25zdCBhdG9iUG9seWZpbGwgPSAoYXNjKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coJ3BvbHlmaWxsZWQnKTtcbiAgICBhc2MgPSBhc2MucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgaWYgKCFiNjRyZS50ZXN0KGFzYykpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21hbGZvcm1lZCBiYXNlNjQuJyk7XG4gICAgYXNjICs9ICc9PScuc2xpY2UoMiAtIChhc2MubGVuZ3RoICYgMykpO1xuICAgIGxldCB1MjQsIGJpbiA9ICcnLCByMSwgcjI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc2MubGVuZ3RoOykge1xuICAgICAgICB1MjQgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSA8PCAxOFxuICAgICAgICAgICAgfCBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSA8PCAxMlxuICAgICAgICAgICAgfCAocjEgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSkgPDwgNlxuICAgICAgICAgICAgfCAocjIgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSk7XG4gICAgICAgIGJpbiArPSByMSA9PT0gNjQgPyBfZnJvbUNDKHUyNCA+PiAxNiAmIDI1NSlcbiAgICAgICAgICAgIDogcjIgPT09IDY0ID8gX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUsIHUyNCA+PiA4ICYgMjU1KVxuICAgICAgICAgICAgICAgIDogX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUsIHUyNCA+PiA4ICYgMjU1LCB1MjQgJiAyNTUpO1xuICAgIH1cbiAgICByZXR1cm4gYmluO1xufTtcbi8qKlxuICogZG9lcyB3aGF0IGB3aW5kb3cuYXRvYmAgb2Ygd2ViIGJyb3dzZXJzIGRvLlxuICogQHBhcmFtIHtTdHJpbmd9IGFzYyBCYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGJpbmFyeSBzdHJpbmdcbiAqL1xuY29uc3QgX2F0b2IgPSBfaGFzYXRvYiA/IChhc2MpID0+IGF0b2IoX3RpZHlCNjQoYXNjKSlcbiAgICA6IF9oYXNCdWZmZXIgPyAoYXNjKSA9PiBCdWZmZXIuZnJvbShhc2MsICdiYXNlNjQnKS50b1N0cmluZygnYmluYXJ5JylcbiAgICAgICAgOiBhdG9iUG9seWZpbGw7XG4vL1xuY29uc3QgX3RvVWludDhBcnJheSA9IF9oYXNCdWZmZXJcbiAgICA/IChhKSA9PiBfVThBZnJvbShCdWZmZXIuZnJvbShhLCAnYmFzZTY0JykpXG4gICAgOiAoYSkgPT4gX1U4QWZyb20oX2F0b2IoYSksIGMgPT4gYy5jaGFyQ29kZUF0KDApKTtcbi8qKlxuICogY29udmVydHMgYSBCYXNlNjQgc3RyaW5nIHRvIGEgVWludDhBcnJheS5cbiAqL1xuY29uc3QgdG9VaW50OEFycmF5ID0gKGEpID0+IF90b1VpbnQ4QXJyYXkoX3VuVVJJKGEpKTtcbi8vXG5jb25zdCBfZGVjb2RlID0gX2hhc0J1ZmZlclxuICAgID8gKGEpID0+IEJ1ZmZlci5mcm9tKGEsICdiYXNlNjQnKS50b1N0cmluZygndXRmOCcpXG4gICAgOiBfVERcbiAgICAgICAgPyAoYSkgPT4gX1RELmRlY29kZShfdG9VaW50OEFycmF5KGEpKVxuICAgICAgICA6IChhKSA9PiBidG91KF9hdG9iKGEpKTtcbmNvbnN0IF91blVSSSA9IChhKSA9PiBfdGlkeUI2NChhLnJlcGxhY2UoL1stX10vZywgKG0wKSA9PiBtMCA9PSAnLScgPyAnKycgOiAnLycpKTtcbi8qKlxuICogY29udmVydHMgYSBCYXNlNjQgc3RyaW5nIHRvIGEgVVRGLTggc3RyaW5nLlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBCYXNlNjQgc3RyaW5nLiAgQm90aCBub3JtYWwgYW5kIFVSTC1zYWZlIGFyZSBzdXBwb3J0ZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVURi04IHN0cmluZ1xuICovXG5jb25zdCBkZWNvZGUgPSAoc3JjKSA9PiBfZGVjb2RlKF91blVSSShzcmMpKTtcbi8qKlxuICogY2hlY2sgaWYgYSB2YWx1ZSBpcyBhIHZhbGlkIEJhc2U2NCBzdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgYSB2YWx1ZSB0byBjaGVja1xuICAqL1xuY29uc3QgaXNWYWxpZCA9IChzcmMpID0+IHtcbiAgICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBzID0gc3JjLnJlcGxhY2UoL1xccysvZywgJycpLnJlcGxhY2UoLz17MCwyfSQvLCAnJyk7XG4gICAgcmV0dXJuICEvW15cXHMwLTlhLXpBLVpcXCsvXS8udGVzdChzKSB8fCAhL1teXFxzMC05YS16QS1aXFwtX10vLnRlc3Qocyk7XG59O1xuLy9cbmNvbnN0IF9ub0VudW0gPSAodikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2LCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH07XG59O1xuLyoqXG4gKiBleHRlbmQgU3RyaW5nLnByb3RvdHlwZSB3aXRoIHJlbGV2YW50IG1ldGhvZHNcbiAqL1xuY29uc3QgZXh0ZW5kU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IF9hZGQgPSAobmFtZSwgYm9keSkgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIG5hbWUsIF9ub0VudW0oYm9keSkpO1xuICAgIF9hZGQoJ2Zyb21CYXNlNjQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGUodGhpcyk7IH0pO1xuICAgIF9hZGQoJ3RvQmFzZTY0JywgZnVuY3Rpb24gKHVybHNhZmUpIHsgcmV0dXJuIGVuY29kZSh0aGlzLCB1cmxzYWZlKTsgfSk7XG4gICAgX2FkZCgndG9CYXNlNjRVUkknLCBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGUodGhpcywgdHJ1ZSk7IH0pO1xuICAgIF9hZGQoJ3RvQmFzZTY0VVJMJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlKHRoaXMsIHRydWUpOyB9KTtcbiAgICBfYWRkKCd0b1VpbnQ4QXJyYXknLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0b1VpbnQ4QXJyYXkodGhpcyk7IH0pO1xufTtcbi8qKlxuICogZXh0ZW5kIFVpbnQ4QXJyYXkucHJvdG90eXBlIHdpdGggcmVsZXZhbnQgbWV0aG9kc1xuICovXG5jb25zdCBleHRlbmRVaW50OEFycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IF9hZGQgPSAobmFtZSwgYm9keSkgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KFVpbnQ4QXJyYXkucHJvdG90eXBlLCBuYW1lLCBfbm9FbnVtKGJvZHkpKTtcbiAgICBfYWRkKCd0b0Jhc2U2NCcsIGZ1bmN0aW9uICh1cmxzYWZlKSB7IHJldHVybiBmcm9tVWludDhBcnJheSh0aGlzLCB1cmxzYWZlKTsgfSk7XG4gICAgX2FkZCgndG9CYXNlNjRVUkknLCBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm9tVWludDhBcnJheSh0aGlzLCB0cnVlKTsgfSk7XG4gICAgX2FkZCgndG9CYXNlNjRVUkwnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm9tVWludDhBcnJheSh0aGlzLCB0cnVlKTsgfSk7XG59O1xuLyoqXG4gKiBleHRlbmQgQnVpbHRpbiBwcm90b3R5cGVzIHdpdGggcmVsZXZhbnQgbWV0aG9kc1xuICovXG5jb25zdCBleHRlbmRCdWlsdGlucyA9ICgpID0+IHtcbiAgICBleHRlbmRTdHJpbmcoKTtcbiAgICBleHRlbmRVaW50OEFycmF5KCk7XG59O1xuY29uc3QgZ0Jhc2U2NCA9IHtcbiAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgIFZFUlNJT046IFZFUlNJT04sXG4gICAgYXRvYjogX2F0b2IsXG4gICAgYXRvYlBvbHlmaWxsOiBhdG9iUG9seWZpbGwsXG4gICAgYnRvYTogX2J0b2EsXG4gICAgYnRvYVBvbHlmaWxsOiBidG9hUG9seWZpbGwsXG4gICAgZnJvbUJhc2U2NDogZGVjb2RlLFxuICAgIHRvQmFzZTY0OiBlbmNvZGUsXG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgZW5jb2RlVVJJOiBlbmNvZGVVUkksXG4gICAgZW5jb2RlVVJMOiBlbmNvZGVVUkksXG4gICAgdXRvYjogdXRvYixcbiAgICBidG91OiBidG91LFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGlzVmFsaWQ6IGlzVmFsaWQsXG4gICAgZnJvbVVpbnQ4QXJyYXk6IGZyb21VaW50OEFycmF5LFxuICAgIHRvVWludDhBcnJheTogdG9VaW50OEFycmF5LFxuICAgIGV4dGVuZFN0cmluZzogZXh0ZW5kU3RyaW5nLFxuICAgIGV4dGVuZFVpbnQ4QXJyYXk6IGV4dGVuZFVpbnQ4QXJyYXksXG4gICAgZXh0ZW5kQnVpbHRpbnM6IGV4dGVuZEJ1aWx0aW5zLFxufTtcbi8vIG1ha2VjanM6Q1VUIC8vXG5leHBvcnQgeyB2ZXJzaW9uIH07XG5leHBvcnQgeyBWRVJTSU9OIH07XG5leHBvcnQgeyBfYXRvYiBhcyBhdG9iIH07XG5leHBvcnQgeyBhdG9iUG9seWZpbGwgfTtcbmV4cG9ydCB7IF9idG9hIGFzIGJ0b2EgfTtcbmV4cG9ydCB7IGJ0b2FQb2x5ZmlsbCB9O1xuZXhwb3J0IHsgZGVjb2RlIGFzIGZyb21CYXNlNjQgfTtcbmV4cG9ydCB7IGVuY29kZSBhcyB0b0Jhc2U2NCB9O1xuZXhwb3J0IHsgdXRvYiB9O1xuZXhwb3J0IHsgZW5jb2RlIH07XG5leHBvcnQgeyBlbmNvZGVVUkkgfTtcbmV4cG9ydCB7IGVuY29kZVVSSSBhcyBlbmNvZGVVUkwgfTtcbmV4cG9ydCB7IGJ0b3UgfTtcbmV4cG9ydCB7IGRlY29kZSB9O1xuZXhwb3J0IHsgaXNWYWxpZCB9O1xuZXhwb3J0IHsgZnJvbVVpbnQ4QXJyYXkgfTtcbmV4cG9ydCB7IHRvVWludDhBcnJheSB9O1xuZXhwb3J0IHsgZXh0ZW5kU3RyaW5nIH07XG5leHBvcnQgeyBleHRlbmRVaW50OEFycmF5IH07XG5leHBvcnQgeyBleHRlbmRCdWlsdGlucyB9O1xuLy8gYW5kIGZpbmFsbHksXG5leHBvcnQgeyBnQmFzZTY0IGFzIEJhc2U2NCB9O1xuIiwiaW1wb3J0IEZvcm1EYXRhIGZyb20gXCJmb3JtLWRhdGFcIjtcbmltcG9ydCBxcyBmcm9tIFwicXNcIjtcbmltcG9ydCB7IEJhc2U2NCB9IGZyb20gXCJqcy1iYXNlNjRcIjtcblxuaW1wb3J0IHtcbiAgUmVxdWVzdENvbmZpZ0J1aWxkZXIsXG4gIFJlcXVlc3RDb25maWcsXG4gIEh0dHBNZXRob2QsXG4gIFBhcmFtcyxcbiAgUHJveHlDb25maWcsXG59IGZyb20gXCIuL2h0dHAvSHR0cENsaWVudEludGVyZmFjZVwiO1xuaW1wb3J0IHsgQmFzaWNBdXRoLCBEaXNjcmltaW5hdGVkQXV0aCB9IGZyb20gXCIuL3R5cGVzL2F1dGhcIjtcbmltcG9ydCB7IHBsYXRmb3JtRGVwcyB9IGZyb20gXCIuL3BsYXRmb3JtL1wiO1xuXG50eXBlIERhdGEgPSBQYXJhbXMgfCBGb3JtRGF0YTtcblxudHlwZSBLaW50b25lQXV0aEhlYWRlciA9XG4gIHwge1xuICAgICAgXCJYLUN5Ym96dS1BdXRob3JpemF0aW9uXCI6IHN0cmluZztcbiAgICAgIEF1dGhvcml6YXRpb24/OiBzdHJpbmc7XG4gICAgfVxuICB8IHtcbiAgICAgIFwiWC1DeWJvenUtQVBJLVRva2VuXCI6IHN0cmluZztcbiAgICAgIEF1dGhvcml6YXRpb24/OiBzdHJpbmc7XG4gICAgfVxuICB8IHtcbiAgICAgIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiOiBcIlhNTEh0dHBSZXF1ZXN0XCI7XG4gICAgICBBdXRob3JpemF0aW9uPzogc3RyaW5nO1xuICAgIH1cbiAgfCB7XG4gICAgICBBdXRob3JpemF0aW9uOiBzdHJpbmc7XG4gICAgfTtcblxuY29uc3QgVEhSRVNIT0xEX0FWT0lEX1JFUVVFU1RfVVJMX1RPT19MQVJHRSA9IDQwOTY7XG5cbmV4cG9ydCBjbGFzcyBLaW50b25lUmVxdWVzdENvbmZpZ0J1aWxkZXIgaW1wbGVtZW50cyBSZXF1ZXN0Q29uZmlnQnVpbGRlciB7XG4gIHByaXZhdGUgYmFzZVVybDogc3RyaW5nO1xuICBwcml2YXRlIGhlYWRlcnM6IEtpbnRvbmVBdXRoSGVhZGVyO1xuICBwcml2YXRlIGF1dGg6IERpc2NyaW1pbmF0ZWRBdXRoO1xuICBwcml2YXRlIGNsaWVudENlcnRBdXRoPzpcbiAgICB8IHtcbiAgICAgICAgcGZ4OiBCdWZmZXI7XG4gICAgICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgIHBmeEZpbGVQYXRoOiBzdHJpbmc7XG4gICAgICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgICB9O1xuICBwcml2YXRlIHByb3h5PzogUHJveHlDb25maWc7XG4gIHByaXZhdGUgcmVxdWVzdFRva2VuOiBzdHJpbmcgfCBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBiYXNlVXJsLFxuICAgIGF1dGgsXG4gICAgYmFzaWNBdXRoLFxuICAgIGNsaWVudENlcnRBdXRoLFxuICAgIHByb3h5LFxuICAgIHVzZXJBZ2VudCxcbiAgfToge1xuICAgIGJhc2VVcmw6IHN0cmluZztcbiAgICBhdXRoOiBEaXNjcmltaW5hdGVkQXV0aDtcbiAgICBiYXNpY0F1dGg/OiBCYXNpY0F1dGg7XG4gICAgY2xpZW50Q2VydEF1dGg/OlxuICAgICAgfCB7XG4gICAgICAgICAgcGZ4OiBCdWZmZXI7XG4gICAgICAgICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfCB7XG4gICAgICAgICAgcGZ4RmlsZVBhdGg6IHN0cmluZztcbiAgICAgICAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIHByb3h5PzogUHJveHlDb25maWc7XG4gICAgdXNlckFnZW50Pzogc3RyaW5nO1xuICB9KSB7XG4gICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLmF1dGggPSBhdXRoO1xuICAgIHRoaXMuaGVhZGVycyA9IHRoaXMuYnVpbGRIZWFkZXJzKHsgYmFzaWNBdXRoLCB1c2VyQWdlbnQgfSk7XG4gICAgdGhpcy5jbGllbnRDZXJ0QXV0aCA9IGNsaWVudENlcnRBdXRoO1xuICAgIHRoaXMucHJveHkgPSBwcm94eTtcbiAgICB0aGlzLnJlcXVlc3RUb2tlbiA9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYnVpbGQoXG4gICAgbWV0aG9kOiBIdHRwTWV0aG9kLFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBwYXJhbXM6IERhdGEsXG4gICAgb3B0aW9ucz86IHsgcmVzcG9uc2VUeXBlOiBcImFycmF5YnVmZmVyXCIgfVxuICApIHtcbiAgICBjb25zdCByZXF1ZXN0Q29uZmlnOiBSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgbWV0aG9kLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgdXJsOiBgJHt0aGlzLmJhc2VVcmx9JHtwYXRofWAsXG4gICAgICAuLi4ob3B0aW9ucyA/IG9wdGlvbnMgOiB7fSksXG4gICAgICAuLi5wbGF0Zm9ybURlcHMuYnVpbGRQbGF0Zm9ybURlcGVuZGVudENvbmZpZyh7XG4gICAgICAgIGNsaWVudENlcnRBdXRoOiB0aGlzLmNsaWVudENlcnRBdXRoLFxuICAgICAgfSksXG4gICAgICBwcm94eTogdGhpcy5wcm94eSxcbiAgICB9O1xuXG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgXCJnZXRcIjoge1xuICAgICAgICBjb25zdCByZXF1ZXN0VXJsID0gdGhpcy5idWlsZFJlcXVlc3RVcmwocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgaWYgKHJlcXVlc3RVcmwubGVuZ3RoID4gVEhSRVNIT0xEX0FWT0lEX1JFUVVFU1RfVVJMX1RPT19MQVJHRSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5yZXF1ZXN0Q29uZmlnLFxuICAgICAgICAgICAgbWV0aG9kOiBcInBvc3RcIiBhcyBjb25zdCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4udGhpcy5oZWFkZXJzLCBcIlgtSFRUUC1NZXRob2QtT3ZlcnJpZGVcIjogXCJHRVRcIiB9LFxuICAgICAgICAgICAgZGF0YTogYXdhaXQgdGhpcy5idWlsZERhdGEocGFyYW1zKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4ucmVxdWVzdENvbmZpZyxcbiAgICAgICAgICB1cmw6IHJlcXVlc3RVcmwsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjYXNlIFwicG9zdFwiOiB7XG4gICAgICAgIGlmIChwYXJhbXMgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gYXdhaXQgdGhpcy5idWlsZERhdGEocGFyYW1zKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucmVxdWVzdENvbmZpZyxcbiAgICAgICAgICAgIGhlYWRlcnM6XG4gICAgICAgICAgICAgIC8vIE5PVEU6IGZvcm1EYXRhLmdldEhlYWRlcnMgZG9lcyBub3QgZXhpc3QgaW4gYSBicm93c2VyIGVudmlyb25tZW50LlxuICAgICAgICAgICAgICB0eXBlb2YgZm9ybURhdGEuZ2V0SGVhZGVycyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgPyB7IC4uLnRoaXMuaGVhZGVycywgLi4uZm9ybURhdGEuZ2V0SGVhZGVycygpIH1cbiAgICAgICAgICAgICAgICA6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5yZXF1ZXN0Q29uZmlnLFxuICAgICAgICAgIGRhdGE6IGF3YWl0IHRoaXMuYnVpbGREYXRhKHBhcmFtcyksXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjYXNlIFwicHV0XCI6IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5yZXF1ZXN0Q29uZmlnLFxuICAgICAgICAgIGRhdGE6IGF3YWl0IHRoaXMuYnVpbGREYXRhKHBhcmFtcyksXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjYXNlIFwiZGVsZXRlXCI6IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdFVybCA9IHRoaXMuYnVpbGRSZXF1ZXN0VXJsKFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgYXdhaXQgdGhpcy5idWlsZERhdGEocGFyYW1zKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnJlcXVlc3RDb25maWcsXG4gICAgICAgICAgdXJsOiByZXF1ZXN0VXJsLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bWV0aG9kfSBtZXRob2QgaXMgbm90IHN1cHBvcnRlZGApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRSZXF1ZXN0VXJsKHBhdGg6IHN0cmluZywgcGFyYW1zOiBEYXRhKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5iYXNlVXJsfSR7cGF0aH0/JHtxcy5zdHJpbmdpZnkocGFyYW1zKX1gO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBidWlsZERhdGE8VCBleHRlbmRzIERhdGE+KHBhcmFtczogVCk6IFByb21pc2U8VD4ge1xuICAgIGlmICh0aGlzLmF1dGgudHlwZSA9PT0gXCJzZXNzaW9uXCIpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3RUb2tlbiA9IGF3YWl0IHRoaXMuZ2V0UmVxdWVzdFRva2VuKCk7XG4gICAgICBpZiAocGFyYW1zIGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgcGFyYW1zLmFwcGVuZChcIl9fUkVRVUVTVF9UT0tFTl9fXCIsIHJlcXVlc3RUb2tlbik7XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfX1JFUVVFU1RfVE9LRU5fXzogcmVxdWVzdFRva2VuLFxuICAgICAgICAuLi5wYXJhbXMsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZEhlYWRlcnMocGFyYW1zOiB7XG4gICAgYmFzaWNBdXRoPzogQmFzaWNBdXRoO1xuICAgIHVzZXJBZ2VudD86IHN0cmluZztcbiAgfSk6IEtpbnRvbmVBdXRoSGVhZGVyIHtcbiAgICBjb25zdCB7IGJhc2ljQXV0aCwgdXNlckFnZW50IH0gPSBwYXJhbXM7XG4gICAgY29uc3QgYmFzaWNBdXRoSGVhZGVycyA9IGJhc2ljQXV0aFxuICAgICAgPyB7XG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJhc2ljICR7QmFzZTY0LmVuY29kZShcbiAgICAgICAgICAgIGAke2Jhc2ljQXV0aC51c2VybmFtZX06JHtiYXNpY0F1dGgucGFzc3dvcmR9YFxuICAgICAgICAgICl9YCxcbiAgICAgICAgfVxuICAgICAgOiB7fTtcbiAgICBjb25zdCBwbGF0Zm9ybURlcHNIZWFkZXJzID0gcGxhdGZvcm1EZXBzLmJ1aWxkSGVhZGVycyh7IHVzZXJBZ2VudCB9KTtcblxuICAgIGNvbnN0IGNvbW1vbkhlYWRlcnMgPSB7IC4uLnBsYXRmb3JtRGVwc0hlYWRlcnMsIC4uLmJhc2ljQXV0aEhlYWRlcnMgfTtcblxuICAgIHN3aXRjaCAodGhpcy5hdXRoLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJwYXNzd29yZFwiOiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uY29tbW9uSGVhZGVycyxcbiAgICAgICAgICBcIlgtQ3lib3p1LUF1dGhvcml6YXRpb25cIjogQmFzZTY0LmVuY29kZShcbiAgICAgICAgICAgIGAke3RoaXMuYXV0aC51c2VybmFtZX06JHt0aGlzLmF1dGgucGFzc3dvcmR9YFxuICAgICAgICAgICksXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjYXNlIFwiYXBpVG9rZW5cIjoge1xuICAgICAgICBjb25zdCBhcGlUb2tlbiA9IHRoaXMuYXV0aC5hcGlUb2tlbjtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXBpVG9rZW4pKSB7XG4gICAgICAgICAgcmV0dXJuIHsgLi4uY29tbW9uSGVhZGVycywgXCJYLUN5Ym96dS1BUEktVG9rZW5cIjogYXBpVG9rZW4uam9pbihcIixcIikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyAuLi5jb21tb25IZWFkZXJzLCBcIlgtQ3lib3p1LUFQSS1Ub2tlblwiOiBhcGlUb2tlbiB9O1xuICAgICAgfVxuICAgICAgY2FzZSBcIm9BdXRoVG9rZW5cIjoge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmNvbW1vbkhlYWRlcnMsXG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuYXV0aC5vQXV0aFRva2VufWAsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHJldHVybiB7IC4uLmNvbW1vbkhlYWRlcnMsIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiOiBcIlhNTEh0dHBSZXF1ZXN0XCIgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFJlcXVlc3RUb2tlbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICh0aGlzLnJlcXVlc3RUb2tlbiA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5yZXF1ZXN0VG9rZW4gPSBhd2FpdCBwbGF0Zm9ybURlcHMuZ2V0UmVxdWVzdFRva2VuKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlcXVlc3RUb2tlbjtcbiAgfVxufVxuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciB1biREYXRlVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlW1RPX1NUUklOR10pO1xudmFyIGdldFRpbWUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFRpbWUpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKFN0cmluZyhuZXcgRGF0ZShOYU4pKSAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVkZWZpbmUoRGF0ZVByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHVuJERhdGVUb1N0cmluZyh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG4kVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbiRUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBuJFRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSAkdG9TdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgUikgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBnZXRGbGFncyhSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiZXhwb3J0IGNsYXNzIEtpbnRvbmVBYm9ydFNlYXJjaEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIHRoaXMubmFtZSA9IFwiS2ludG9uZUFib3J0U2VhcmNoRXJyb3JcIjtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvQnJlYWtpbmctQ2hhbmdlcyNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5LlxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBLaW50b25lQWJvcnRTZWFyY2hFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFcnJvclJlc3BvbnNlIH0gZnJvbSBcIi4uL2h0dHAvSHR0cENsaWVudEludGVyZmFjZVwiO1xuXG50eXBlIFNpbmdsZUVycm9yUmVzcG9uc2VEYXRhID0ge1xuICBpZDogc3RyaW5nO1xuICBjb2RlOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgZXJyb3JzPzogYW55O1xufTtcblxudHlwZSBCdWxrUmVxdWVzdEVycm9yUmVzcG9uc2VEYXRhID0ge1xuICByZXN1bHRzOiBBcnJheTxTaW5nbGVFcnJvclJlc3BvbnNlRGF0YSB8IHt9Pjtcbn07XG5cbnR5cGUgS2ludG9uZUVycm9yUmVzcG9uc2VEYXRhID1cbiAgfCBTaW5nbGVFcnJvclJlc3BvbnNlRGF0YVxuICB8IEJ1bGtSZXF1ZXN0RXJyb3JSZXNwb25zZURhdGE7XG5cbmV4cG9ydCB0eXBlIEtpbnRvbmVFcnJvclJlc3BvbnNlID0gRXJyb3JSZXNwb25zZTxLaW50b25lRXJyb3JSZXNwb25zZURhdGE+O1xuXG5leHBvcnQgY2xhc3MgS2ludG9uZVJlc3RBUElFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgaWQ6IHN0cmluZztcbiAgY29kZTogc3RyaW5nO1xuICBzdGF0dXM6IG51bWJlcjtcbiAgYnVsa1JlcXVlc3RJbmRleD86IG51bWJlcjtcbiAgaGVhZGVyczogYW55O1xuICBlcnJvcnM/OiBhbnk7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZmluZEVycm9yUmVzcG9uc2VEYXRhV2l0aEluZGV4KFxuICAgIHJlc3VsdHM6IEJ1bGtSZXF1ZXN0RXJyb3JSZXNwb25zZURhdGFbXCJyZXN1bHRzXCJdXG4gICkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHJlc3VsdHNbaV0pLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zdCBkYXRhID0gcmVzdWx0c1tpXSBhcyBTaW5nbGVFcnJvclJlc3BvbnNlRGF0YTtcbiAgICAgICAgcmV0dXJuIHsgZGF0YSwgYnVsa1JlcXVlc3RJbmRleDogaSB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJNaXNzaW5nIHJlc3BvbnNlIGRhdGEgaW4gYHJlc3VsdHNgLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gS2ludG9uZSBSRVNUIEFQSSBDbGllbnQuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGJ1aWxkRXJyb3JSZXNwb25zZURhdGVXaXRoSW5kZXgoZXJyb3I6IEtpbnRvbmVFcnJvclJlc3BvbnNlKToge1xuICAgIGRhdGE6IFNpbmdsZUVycm9yUmVzcG9uc2VEYXRhO1xuICAgIGJ1bGtSZXF1ZXN0SW5kZXg/OiBudW1iZXI7XG4gIH0ge1xuICAgIGlmIChcInJlc3VsdHNcIiBpbiBlcnJvci5kYXRhKSB7XG4gICAgICByZXR1cm4gS2ludG9uZVJlc3RBUElFcnJvci5maW5kRXJyb3JSZXNwb25zZURhdGFXaXRoSW5kZXgoXG4gICAgICAgIGVycm9yLmRhdGEucmVzdWx0c1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgZGF0YTogZXJyb3IuZGF0YSB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoZXJyb3I6IEtpbnRvbmVFcnJvclJlc3BvbnNlKSB7XG4gICAgY29uc3QgeyBkYXRhLCBidWxrUmVxdWVzdEluZGV4IH0gPVxuICAgICAgS2ludG9uZVJlc3RBUElFcnJvci5idWlsZEVycm9yUmVzcG9uc2VEYXRlV2l0aEluZGV4KGVycm9yKTtcblxuICAgIHN1cGVyKGRhdGEubWVzc2FnZSk7XG5cbiAgICB0aGlzLm5hbWUgPSBcIktpbnRvbmVSZXN0QVBJRXJyb3JcIjtcbiAgICB0aGlzLmlkID0gZGF0YS5pZDtcbiAgICB0aGlzLmNvZGUgPSBkYXRhLmNvZGU7XG4gICAgdGhpcy5lcnJvcnMgPSBkYXRhLmVycm9ycztcbiAgICB0aGlzLnN0YXR1cyA9IGVycm9yLnN0YXR1cztcbiAgICB0aGlzLmJ1bGtSZXF1ZXN0SW5kZXggPSBidWxrUmVxdWVzdEluZGV4O1xuICAgIHRoaXMuaGVhZGVycyA9IGVycm9yLmhlYWRlcnM7XG4gICAgdGhpcy5tZXNzYWdlID0gYFske2Vycm9yLnN0YXR1c31dIFske3RoaXMuY29kZX1dICR7dGhpcy5tZXNzYWdlfSAoJHt0aGlzLmlkfSlgO1xuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjQ3VzdG9tX0Vycm9yX1R5cGVzXG4gICAgLy8gTWFpbnRhaW5zIHByb3BlciBzdGFjayB0cmFjZSBmb3Igd2hlcmUgb3VyIGVycm9yIHdhcyB0aHJvd24gKG9ubHkgYXZhaWxhYmxlIG9uIFY4KVxuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgS2ludG9uZVJlc3RBUElFcnJvcik7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvQnJlYWtpbmctQ2hhbmdlcyNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5LlxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBLaW50b25lUmVzdEFQSUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIEVycm9yUmVzcG9uc2UsXG4gIEh0dHBDbGllbnRFcnJvcixcbiAgUmVzcG9uc2UsXG4gIFJlc3BvbnNlSGFuZGxlcixcbn0gZnJvbSBcIi4vaHR0cC9IdHRwQ2xpZW50SW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBLaW50b25lQWJvcnRTZWFyY2hFcnJvciB9IGZyb20gXCIuL2Vycm9yL0tpbnRvbmVBYm9ydFNlYXJjaEVycm9yXCI7XG5pbXBvcnQge1xuICBLaW50b25lUmVzdEFQSUVycm9yLFxuICBLaW50b25lRXJyb3JSZXNwb25zZSxcbn0gZnJvbSBcIi4vZXJyb3IvS2ludG9uZVJlc3RBUElFcnJvclwiO1xuXG5leHBvcnQgY2xhc3MgS2ludG9uZVJlc3BvbnNlSGFuZGxlciBpbXBsZW1lbnRzIFJlc3BvbnNlSGFuZGxlciB7XG4gIHByaXZhdGUgZW5hYmxlQWJvcnRTZWFyY2hFcnJvcjogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IoeyBlbmFibGVBYm9ydFNlYXJjaEVycm9yIH06IHsgZW5hYmxlQWJvcnRTZWFyY2hFcnJvcjogYm9vbGVhbiB9KSB7XG4gICAgdGhpcy5lbmFibGVBYm9ydFNlYXJjaEVycm9yID0gZW5hYmxlQWJvcnRTZWFyY2hFcnJvcjtcbiAgfVxuICBoYW5kbGU8VD4ocmVzcG9uc2U6IFByb21pc2U8UmVzcG9uc2U8VD4+KTogUHJvbWlzZTxUPiB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnRoZW4oXG4gICAgICAocmVzKSA9PiB0aGlzLmhhbmRsZVN1Y2Nlc3NSZXNwb25zZTxUPihyZXMpLFxuICAgICAgKGVycm9yKSA9PiB0aGlzLmhhbmRsZUVycm9yUmVzcG9uc2UoZXJyb3IpXG4gICAgKTtcbiAgfVxuICBwcml2YXRlIGhhbmRsZVN1Y2Nlc3NSZXNwb25zZTxUPihyZXNwb25zZTogUmVzcG9uc2U8VD4pOiBUIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmVuYWJsZUFib3J0U2VhcmNoRXJyb3IgJiZcbiAgICAgIC9GaWx0ZXIgYWJvcnRlZCBiZWNhdXNlIG9mIHRvbyBtYW55IHNlYXJjaCByZXN1bHRzLy50ZXN0KFxuICAgICAgICByZXNwb25zZS5oZWFkZXJzW1wieC1jeWJvenUtd2FybmluZ1wiXVxuICAgICAgKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEtpbnRvbmVBYm9ydFNlYXJjaEVycm9yKHJlc3BvbnNlLmhlYWRlcnNbXCJ4LWN5Ym96dS13YXJuaW5nXCJdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH1cbiAgcHJpdmF0ZSBoYW5kbGVFcnJvclJlc3BvbnNlKFxuICAgIGVycm9yOiBIdHRwQ2xpZW50RXJyb3I8RXJyb3JSZXNwb25zZTxzdHJpbmc+IHwgS2ludG9uZUVycm9yUmVzcG9uc2U+XG4gICk6IG5ldmVyIHtcbiAgICBpZiAoIWVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAvLyBGSVhNRTogZmluZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMgZXJyb3JcbiAgICAgIGlmICgvbWFjIHZlcmlmeSBmYWlsdXJlLy50ZXN0KGVycm9yLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2xpZW50Q2VydEF1dGggc2V0dGluZ1wiKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gZXJyb3IucmVzcG9uc2U7XG5cbiAgICBjb25zdCB7IGRhdGEsIC4uLnJlc3QgfSA9IGVycm9yUmVzcG9uc2U7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVzdC5zdGF0dXN9OiAke3Jlc3Quc3RhdHVzVGV4dH1gKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEtpbnRvbmVSZXN0QVBJRXJyb3IoeyBkYXRhLCAuLi5yZXN0IH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCdWxrUmVxdWVzdENsaWVudCwgRW5kcG9pbnROYW1lIH0gZnJvbSBcIi4vY2xpZW50L0J1bGtSZXF1ZXN0Q2xpZW50XCI7XG5pbXBvcnQgeyBBcHBDbGllbnQgfSBmcm9tIFwiLi9jbGllbnQvQXBwQ2xpZW50XCI7XG5pbXBvcnQgeyBSZWNvcmRDbGllbnQgfSBmcm9tIFwiLi9jbGllbnQvUmVjb3JkQ2xpZW50XCI7XG5pbXBvcnQgeyBGaWxlQ2xpZW50IH0gZnJvbSBcIi4vY2xpZW50L0ZpbGVDbGllbnRcIjtcbmltcG9ydCB7IERlZmF1bHRIdHRwQ2xpZW50IH0gZnJvbSBcIi4vaHR0cC9cIjtcbmltcG9ydCB7IFByb3h5Q29uZmlnIH0gZnJvbSBcIi4vaHR0cC9IdHRwQ2xpZW50SW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBCYXNpY0F1dGgsIERpc2NyaW1pbmF0ZWRBdXRoIH0gZnJvbSBcIi4vdHlwZXMvYXV0aFwiO1xuaW1wb3J0IHsgS2ludG9uZVJlcXVlc3RDb25maWdCdWlsZGVyIH0gZnJvbSBcIi4vS2ludG9uZVJlcXVlc3RDb25maWdCdWlsZGVyXCI7XG5pbXBvcnQgeyBLaW50b25lUmVzcG9uc2VIYW5kbGVyIH0gZnJvbSBcIi4vS2ludG9uZVJlc3BvbnNlSGFuZGxlclwiO1xuaW1wb3J0IHsgcGxhdGZvcm1EZXBzIH0gZnJvbSBcIi4vcGxhdGZvcm0vaW5kZXhcIjtcbmltcG9ydCB7IFVuc3VwcG9ydGVkUGxhdGZvcm1FcnJvciB9IGZyb20gXCIuL3BsYXRmb3JtL1Vuc3VwcG9ydGVkUGxhdGZvcm1FcnJvclwiO1xuXG50eXBlIE9taXRUeXBlUHJvcGVydHlGcm9tVW5pb248VD4gPSBUIGV4dGVuZHMgdW5rbm93biA/IE9taXQ8VCwgXCJ0eXBlXCI+IDogbmV2ZXI7XG50eXBlIEF1dGggPSBPbWl0VHlwZVByb3BlcnR5RnJvbVVuaW9uPERpc2NyaW1pbmF0ZWRBdXRoPjtcblxudHlwZSBPcHRpb25zID0ge1xuICBiYXNlVXJsPzogc3RyaW5nO1xuICBhdXRoPzogQXV0aDtcbiAgZ3Vlc3RTcGFjZUlkPzogbnVtYmVyIHwgc3RyaW5nO1xuICBiYXNpY0F1dGg/OiBCYXNpY0F1dGg7XG4gIGNsaWVudENlcnRBdXRoPzpcbiAgICB8IHtcbiAgICAgICAgcGZ4OiBCdWZmZXI7XG4gICAgICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgIHBmeEZpbGVQYXRoOiBzdHJpbmc7XG4gICAgICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgICB9O1xuICBwcm94eT86IFByb3h5Q29uZmlnO1xuICBmZWF0dXJlRmxhZ3M/OiB7XG4gICAgZW5hYmxlQWJvcnRTZWFyY2hFcnJvcjogYm9vbGVhbjtcbiAgfTtcbiAgdXNlckFnZW50Pzogc3RyaW5nO1xufTtcblxuY29uc3QgYnVpbGREaXNjcmltaW5hdGVkQXV0aCA9IChhdXRoOiBBdXRoKTogRGlzY3JpbWluYXRlZEF1dGggPT4ge1xuICBpZiAoXCJ1c2VybmFtZVwiIGluIGF1dGgpIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInBhc3N3b3JkXCIsIC4uLmF1dGggfTtcbiAgfVxuICBpZiAoXCJhcGlUb2tlblwiIGluIGF1dGgpIHtcbiAgICByZXR1cm4geyB0eXBlOiBcImFwaVRva2VuXCIsIC4uLmF1dGggfTtcbiAgfVxuICBpZiAoXCJvQXV0aFRva2VuXCIgaW4gYXV0aCkge1xuICAgIHJldHVybiB7IHR5cGU6IFwib0F1dGhUb2tlblwiLCAuLi5hdXRoIH07XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gcGxhdGZvcm1EZXBzLmdldERlZmF1bHRBdXRoKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVuc3VwcG9ydGVkUGxhdGZvcm1FcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgc2Vzc2lvbiBhdXRoZW50aWNhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluICR7ZS5wbGF0Zm9ybX0gZW52aXJvbm1lbnQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIEtpbnRvbmVSZXN0QVBJQ2xpZW50IHtcbiAgcmVjb3JkOiBSZWNvcmRDbGllbnQ7XG4gIGFwcDogQXBwQ2xpZW50O1xuICBmaWxlOiBGaWxlQ2xpZW50O1xuICBwcml2YXRlIGJ1bGtSZXF1ZXN0XzogQnVsa1JlcXVlc3RDbGllbnQ7XG4gIHByaXZhdGUgYmFzZVVybD86IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBPcHRpb25zID0ge30pIHtcbiAgICB2YWxpZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICB0aGlzLmJhc2VVcmwgPSBwbGF0Zm9ybURlcHMuYnVpbGRCYXNlVXJsKG9wdGlvbnMuYmFzZVVybCk7XG5cbiAgICBjb25zdCBhdXRoID0gYnVpbGREaXNjcmltaW5hdGVkQXV0aChvcHRpb25zLmF1dGggPz8ge30pO1xuICAgIGNvbnN0IHJlcXVlc3RDb25maWdCdWlsZGVyID0gbmV3IEtpbnRvbmVSZXF1ZXN0Q29uZmlnQnVpbGRlcih7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgYmFzZVVybDogdGhpcy5iYXNlVXJsLFxuICAgICAgYXV0aCxcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZUhhbmRsZXIgPSBuZXcgS2ludG9uZVJlc3BvbnNlSGFuZGxlcih7XG4gICAgICBlbmFibGVBYm9ydFNlYXJjaEVycm9yOlxuICAgICAgICBvcHRpb25zLmZlYXR1cmVGbGFncz8uZW5hYmxlQWJvcnRTZWFyY2hFcnJvciA/PyBmYWxzZSxcbiAgICB9KTtcbiAgICBjb25zdCBodHRwQ2xpZW50ID0gbmV3IERlZmF1bHRIdHRwQ2xpZW50KHtcbiAgICAgIHJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHJlcXVlc3RDb25maWdCdWlsZGVyLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgZ3Vlc3RTcGFjZUlkIH0gPSBvcHRpb25zO1xuXG4gICAgdGhpcy5idWxrUmVxdWVzdF8gPSBuZXcgQnVsa1JlcXVlc3RDbGllbnQoaHR0cENsaWVudCwgZ3Vlc3RTcGFjZUlkKTtcbiAgICB0aGlzLnJlY29yZCA9IG5ldyBSZWNvcmRDbGllbnQoaHR0cENsaWVudCwgdGhpcy5idWxrUmVxdWVzdF8sIGd1ZXN0U3BhY2VJZCk7XG4gICAgdGhpcy5hcHAgPSBuZXcgQXBwQ2xpZW50KGh0dHBDbGllbnQsIGd1ZXN0U3BhY2VJZCk7XG4gICAgdGhpcy5maWxlID0gbmV3IEZpbGVDbGllbnQoaHR0cENsaWVudCwgZ3Vlc3RTcGFjZUlkKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHZlcnNpb24oKSB7XG4gICAgcmV0dXJuIHBsYXRmb3JtRGVwcy5nZXRWZXJzaW9uKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QmFzZVVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5iYXNlVXJsO1xuICB9XG5cbiAgcHVibGljIGJ1bGtSZXF1ZXN0KHBhcmFtczoge1xuICAgIHJlcXVlc3RzOiBBcnJheTxcbiAgICAgIHwge1xuICAgICAgICAgIG1ldGhvZDogc3RyaW5nO1xuICAgICAgICAgIGFwaTogc3RyaW5nO1xuICAgICAgICAgIHBheWxvYWQ6IG9iamVjdDtcbiAgICAgICAgfVxuICAgICAgfCB7XG4gICAgICAgICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgICAgICAgZW5kcG9pbnROYW1lOiBFbmRwb2ludE5hbWU7XG4gICAgICAgICAgcGF5bG9hZDogb2JqZWN0O1xuICAgICAgICB9XG4gICAgPjtcbiAgfSk6IFByb21pc2U8eyByZXN1bHRzOiBBcnJheTx7IFtLOiBzdHJpbmddOiBhbnkgfT4gfT4ge1xuICAgIHJldHVybiB0aGlzLmJ1bGtSZXF1ZXN0Xy5zZW5kKHBhcmFtcyk7XG4gIH1cbn1cblxuY29uc3QgdmFsaWRhdGVPcHRpb25zID0gKG9wdGlvbnM6IE9wdGlvbnMpID0+IHtcbiAgdmFsaWRhdGVHdWVzdFNwYWNlSWQob3B0aW9ucy5ndWVzdFNwYWNlSWQpO1xufTtcblxuY29uc3QgdmFsaWRhdGVHdWVzdFNwYWNlSWQgPSAoZ3Vlc3RTcGFjZUlkOiBPcHRpb25zW1wiZ3Vlc3RTcGFjZUlkXCJdKSA9PiB7XG4gIGlmIChndWVzdFNwYWNlSWQgPT09IFwiXCIgfHwgZ3Vlc3RTcGFjZUlkID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGd1ZXN0U3BhY2VJZDogZ290IFske2d1ZXN0U3BhY2VJZH1dYCk7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBpbmplY3RQbGF0Zm9ybURlcHMgfSBmcm9tIFwiLi9wbGF0Zm9ybS9cIjtcbmltcG9ydCAqIGFzIGJyb3dzZXJEZXBzIGZyb20gXCIuL3BsYXRmb3JtL2Jyb3dzZXJcIjtcblxuaW5qZWN0UGxhdGZvcm1EZXBzKGJyb3dzZXJEZXBzKTtcblxuZXhwb3J0IHsgS2ludG9uZVJlc3RBUElDbGllbnQgfSBmcm9tIFwiLi9LaW50b25lUmVzdEFQSUNsaWVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZXJyb3JcIjtcbiJdLCJuYW1lcyI6WyJwbGF0Zm9ybURlcHMiLCJyZWFkRmlsZUZyb21QYXRoIiwiRXJyb3IiLCJnZXRSZXF1ZXN0VG9rZW4iLCJnZXREZWZhdWx0QXV0aCIsImJ1aWxkUGxhdGZvcm1EZXBlbmRlbnRDb25maWciLCJidWlsZEhlYWRlcnMiLCJidWlsZEZvcm1EYXRhVmFsdWUiLCJidWlsZEJhc2VVcmwiLCJnZXRWZXJzaW9uIiwiaW5qZWN0UGxhdGZvcm1EZXBzIiwiZGVwcyIsImNoZWNrIiwiaXQiLCJNYXRoIiwiZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJGdW5jdGlvbiIsImZhaWxzIiwiZXhlYyIsImVycm9yIiwicmVxdWlyZSQkMCIsImRlc2NyaXB0b3JzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJmdW5jdGlvbkJpbmROYXRpdmUiLCJ0ZXN0IiwiYmluZCIsImhhc093blByb3BlcnR5IiwiTkFUSVZFX0JJTkQiLCJjYWxsIiwicHJvdG90eXBlIiwiZnVuY3Rpb25DYWxsIiwiYXBwbHkiLCJhcmd1bWVudHMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk5BU0hPUk5fQlVHIiwib2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUiLCJmIiwiViIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiYml0bWFwIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkZ1bmN0aW9uUHJvdG90eXBlIiwidW5jdXJyeVRoaXMiLCJmdW5jdGlvblVuY3VycnlUaGlzIiwiZm4iLCJ0b1N0cmluZyIsInN0cmluZ1NsaWNlIiwic2xpY2UiLCJjbGFzc29mUmF3IiwicmVxdWlyZSQkMSIsInJlcXVpcmUkJDIiLCJjbGFzc29mIiwicmVxdWlyZSQkMyIsInNwbGl0IiwiaW5kZXhlZE9iamVjdCIsIlR5cGVFcnJvciIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJ1bmRlZmluZWQiLCJJbmRleGVkT2JqZWN0IiwidG9JbmRleGVkT2JqZWN0IiwiaXNDYWxsYWJsZSIsImFyZ3VtZW50IiwiaXNPYmplY3QiLCJhRnVuY3Rpb24iLCJnZXRCdWlsdEluIiwibmFtZXNwYWNlIiwibWV0aG9kIiwibGVuZ3RoIiwib2JqZWN0SXNQcm90b3R5cGVPZiIsImlzUHJvdG90eXBlT2YiLCJlbmdpbmVVc2VyQWdlbnQiLCJ1c2VyQWdlbnQiLCJwcm9jZXNzIiwiRGVubyIsInZlcnNpb25zIiwidmVyc2lvbiIsInY4IiwibWF0Y2giLCJlbmdpbmVWOFZlcnNpb24iLCJWOF9WRVJTSU9OIiwibmF0aXZlU3ltYm9sIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwiU3ltYm9sIiwiU3RyaW5nIiwic2hhbSIsIk5BVElWRV9TWU1CT0wiLCJ1c2VTeW1ib2xBc1VpZCIsIml0ZXJhdG9yIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJyZXF1aXJlJCQ0IiwiaXNTeW1ib2wiLCIkU3ltYm9sIiwidHJ5VG9TdHJpbmciLCJhQ2FsbGFibGUiLCJnZXRNZXRob2QiLCJQIiwiZnVuYyIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwic2V0R2xvYmFsIiwia2V5IiwiU0hBUkVEIiwic3RvcmUiLCJzaGFyZWRTdG9yZSIsInNoYXJlZE1vZHVsZSIsInB1c2giLCJtb2RlIiwiY29weXJpZ2h0IiwibGljZW5zZSIsInNvdXJjZSIsInRvT2JqZWN0IiwiaGFzT3duUHJvcGVydHlfMSIsImhhc093biIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsInVpZCIsInNoYXJlZCIsInJlcXVpcmUkJDUiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJzeW1ib2xGb3IiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwid2VsbEtub3duU3ltYm9sIiwibmFtZSIsImRlc2NyaXB0aW9uIiwicmVxdWlyZSQkNiIsIlRPX1BSSU1JVElWRSIsInRvUHJpbWl0aXZlIiwiZXhvdGljVG9QcmltIiwicmVzdWx0IiwidG9Qcm9wZXJ0eUtleSIsImRvY3VtZW50IiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIkRFU0NSSVBUT1JTIiwiaWU4RG9tRGVmaW5lIiwiYSIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiSUU4X0RPTV9ERUZJTkUiLCJyZXF1aXJlJCQ3IiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk8iLCJ2OFByb3RvdHlwZURlZmluZUJ1ZyIsImFuT2JqZWN0IiwiVjhfUFJPVE9UWVBFX0RFRklORV9CVUciLCIkZGVmaW5lUHJvcGVydHkiLCJFTlVNRVJBQkxFIiwiQ09ORklHVVJBQkxFIiwiV1JJVEFCTEUiLCJvYmplY3REZWZpbmVQcm9wZXJ0eSIsIkF0dHJpYnV0ZXMiLCJjdXJyZW50IiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJvYmplY3QiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsIldlYWtNYXAiLCJuYXRpdmVXZWFrTWFwIiwia2V5cyIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJOQVRJVkVfV0VBS19NQVAiLCJyZXF1aXJlJCQ4IiwiT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQiLCJzZXQiLCJoYXMiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwiVFlQRSIsInN0YXRlIiwidHlwZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJpbnRlcm5hbFN0YXRlIiwiZ2V0RGVzY3JpcHRvciIsIlBST1BFUiIsInNvbWV0aGluZyIsImZ1bmN0aW9uTmFtZSIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwicmVkZWZpbmVNb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsInVuc2FmZSIsInNpbXBsZSIsIm5vVGFyZ2V0R2V0IiwicmVwbGFjZSIsImpvaW4iLCJjZWlsIiwiZmxvb3IiLCJ0b0ludGVnZXJPckluZmluaXR5IiwibnVtYmVyIiwibWF4IiwibWluIiwidG9BYnNvbHV0ZUluZGV4IiwiaW5kZXgiLCJpbnRlZ2VyIiwidG9MZW5ndGgiLCJsZW5ndGhPZkFycmF5TGlrZSIsIm9iaiIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImFycmF5SW5jbHVkZXMiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJvYmplY3RLZXlzSW50ZXJuYWwiLCJuYW1lcyIsImkiLCJlbnVtQnVnS2V5cyIsImludGVybmFsT2JqZWN0S2V5cyIsImNvbmNhdCIsIm9iamVjdEdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0IiwiZXhjZXB0aW9ucyIsInJlcGxhY2VtZW50IiwiaXNGb3JjZWQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiZGF0YSIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJpc0ZvcmNlZF8xIiwicmVkZWZpbmUiLCJfZXhwb3J0IiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIkZPUkNFRCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJmb3JjZWQiLCJpc0FycmF5IiwiQXJyYXkiLCJjcmVhdGVQcm9wZXJ0eSIsInByb3BlcnR5S2V5IiwiVE9fU1RSSU5HX1RBRyIsInRvU3RyaW5nVGFnU3VwcG9ydCIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidHJ5R2V0IiwidGFnIiwiY2FsbGVlIiwibm9vcCIsImVtcHR5IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3JSZWdFeHAiLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3IiLCJpc0NvbnN0cnVjdG9yTGVnYWN5IiwiY2FsbGVkIiwiU1BFQ0lFUyIsImFycmF5U3BlY2llc0NvbnN0cnVjdG9yIiwib3JpZ2luYWxBcnJheSIsIkMiLCJjb25zdHJ1Y3RvciIsImFycmF5U3BlY2llc0NyZWF0ZSIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiZm9vIiwiQm9vbGVhbiIsIiQiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwicHJvdG8iLCJhcmciLCJBIiwibiIsImsiLCJsZW4iLCJFIiwicnVudGltZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGlzcGxheU5hbWUiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsIl9fYXdhaXQiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwidGhlbiIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImVucXVldWUiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJuZXh0IiwiZG9uZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsInJldmVyc2UiLCJwb3AiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInN0b3AiLCJyb290RW50cnkiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsIm1vZHVsZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiRlVOQ1RJT05fTkFNRV9FWElTVFMiLCJuYW1lUkUiLCJyZWdFeHBFeGVjIiwiTkFNRSIsImFQb3NzaWJsZVByb3RvdHlwZSIsIm9iamVjdFNldFByb3RvdHlwZU9mIiwiQ09SUkVDVF9TRVRURVIiLCJzZXR0ZXIiLCJVbnN1cHBvcnRlZFBsYXRmb3JtRXJyb3IiLCJwbGF0Zm9ybSIsIm1lc3NhZ2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImZpbGVQYXRoIiwia2ludG9uZSIsImdhcm9vbiIsImNvbm5lY3QiLCJCbG9iIiwiYmFzZVVybCIsImxvY2F0aW9uIiwiaG9zdCIsInByb3RvY29sIiwiUEFDS0FHRV9WRVJTSU9OIiwiZnVuY3Rpb25CaW5kQ29udGV4dCIsInRoYXQiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwiY2FsbGJhY2tmbiIsInNwZWNpZmljQ3JlYXRlIiwiYm91bmRGdW5jdGlvbiIsImFycmF5SXRlcmF0aW9uIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlclJlamVjdCIsIiRtYXAiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiYnVpbGRQYXRoIiwicGFyYW1zIiwiZW5kcG9pbnROYW1lIiwiZ3Vlc3RTcGFjZUlkIiwicHJldmlldyIsImd1ZXN0UGF0aCIsInByZXZpZXdQYXRoIiwiQnVsa1JlcXVlc3RDbGllbnQiLCJjbGllbnQiLCJSRVFVRVNUU19MRU5HVEhfTElNSVQiLCJyZXF1ZXN0c1BhcmFtIiwicmVxdWVzdHMiLCJyZXF1ZXN0IiwicmVzdCIsIl9leGNsdWRlZCIsIl9vYmplY3RTcHJlYWQiLCJhcGkiLCJidWlsZFBhdGhXaXRoR3Vlc3RTcGFjZUlkIiwicGF0aCIsInBvc3QiLCJBcHBDbGllbnQiLCJwdXQiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsInNwYWNlIiwic3BhY2VQYXRoIiwiZGVmYXVsdFRocmVhZCIsInRocmVhZCIsIl9leGNsdWRlZDQiLCJvYmplY3RLZXlzIiwiJGFzc2lnbiIsImFzc2lnbiIsIm9iamVjdEFzc2lnbiIsImIiLCJCIiwiYWxwaGFiZXQiLCJjaHIiLCJUIiwiYXJndW1lbnRzTGVuZ3RoIiwiUyIsImoiLCJyZWdleHBGbGFncyIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJkb3RBbGwiLCJ1bmljb2RlIiwic3RpY2t5IiwiJFJlZ0V4cCIsIlJlZ0V4cCIsIlVOU1VQUE9SVEVEX1kiLCJyZSIsImxhc3RJbmRleCIsIk1JU1NFRF9TVElDS1kiLCJCUk9LRU5fQ0FSRVQiLCJyZWdleHBTdGlja3lIZWxwZXJzIiwib2JqZWN0RGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnRpZXMiLCJQcm9wZXJ0aWVzIiwicHJvcHMiLCJodG1sIiwiZGVmaW5lUHJvcGVydGllc01vZHVsZSIsIkdUIiwiTFQiLCJQUk9UT1RZUEUiLCJTQ1JJUFQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsImFjdGl2ZVhEb2N1bWVudCIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lIiwiaWZyYW1lIiwiSlMiLCJpZnJhbWVEb2N1bWVudCIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJGIiwiTnVsbFByb3RvT2JqZWN0IiwiQWN0aXZlWE9iamVjdCIsImRvbWFpbiIsIm9iamVjdENyZWF0ZSIsInJlZ2V4cFVuc3VwcG9ydGVkRG90QWxsIiwiZmxhZ3MiLCJyZWdleHBVbnN1cHBvcnRlZE5jZyIsImdyb3VwcyIsInN0aWNreUhlbHBlcnMiLCJVTlNVUFBPUlRFRF9ET1RfQUxMIiwiVU5TVVBQT1JURURfTkNHIiwibmF0aXZlUmVwbGFjZSIsIm5hdGl2ZUV4ZWMiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsInJlMSIsInJlMiIsIk5QQ0dfSU5DTFVERUQiLCJQQVRDSCIsInN0ciIsInJhdyIsInJlQ29weSIsImdyb3VwIiwiY2hhcnNBZGRlZCIsInN0ckNvcHkiLCJyZWdleHBFeGVjIiwiUmVnRXhwUHJvdG90eXBlIiwiZml4UmVnZXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJLRVkiLCJTSEFNIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsInVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZCIsIm1ldGhvZHMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJ1bmN1cnJpZWROYXRpdmVNZXRob2QiLCIkZXhlYyIsImNoYXJDb2RlQXQiLCJDT05WRVJUX1RPX1NUUklORyIsInBvcyIsInBvc2l0aW9uIiwic2l6ZSIsImZpcnN0Iiwic2Vjb25kIiwic3RyaW5nTXVsdGlieXRlIiwiY29kZUF0IiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnZXhwRXhlY0Fic3RyYWN0IiwiUiIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwiTUFUQ0giLCJuYXRpdmVNYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsIm1hdGNoZXIiLCJyeCIsInJlcyIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJpbmhlcml0SWZSZXF1aXJlZCIsImR1bW15IiwiV3JhcHBlciIsIk5ld1RhcmdldCIsIk5ld1RhcmdldFByb3RvdHlwZSIsInRoaXNOdW1iZXJWYWx1ZSIsIndoaXRlc3BhY2VzIiwid2hpdGVzcGFjZSIsImx0cmltIiwicnRyaW0iLCJzdHJpbmdUcmltIiwic3RhcnQiLCJlbmQiLCJ0cmltIiwicmVxdWlyZSQkMTIiLCJyZXF1aXJlJCQxMyIsInJlcXVpcmUkJDE0IiwicmVxdWlyZSQkMTUiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJOdW1iZXJQcm90b3R5cGUiLCJhcnJheVNsaWNlIiwidG9OdW1lcmljIiwicHJpbVZhbHVlIiwidG9OdW1iZXIiLCJ0aGlyZCIsInJhZGl4IiwibWF4Q29kZSIsImRpZ2l0cyIsImNvZGUiLCJOYU4iLCJwYXJzZUludCIsIk51bWJlcldyYXBwZXIiLCJOdW1iZXIiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiJEluZGV4T2YiLCJ1biRJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIlNUUklDVF9NRVRIT0QiLCJzZWFyY2hFbGVtZW50IiwiJGV2ZXJ5Iiwib2JqZWN0VG9TdHJpbmciLCJ1biRTbGljZSIsImZpbiIsIkNvbnN0cnVjdG9yIiwiSVNfUklHSFQiLCJtZW1vIiwiYXJyYXlSZWR1Y2UiLCJsZWZ0IiwicmlnaHQiLCJlbmdpbmVJc05vZGUiLCIkcmVkdWNlIiwiQ0hST01FX1ZFUlNJT04iLCJJU19OT0RFIiwiQ0hST01FX0JVRyIsInJlZHVjZSIsIm5hdGl2ZUtleXMiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwiS2ludG9uZUFsbFJlY29yZHNFcnJvciIsInByb2Nlc3NlZFJlY29yZHNSZXN1bHQiLCJ1bnByb2Nlc3NlZFJlY29yZHMiLCJudW1PZkFsbFJlY29yZHMiLCJjaHVua0xlbmd0aCIsIm51bU9mUHJvY2Vzc2VkUmVjb3JkcyIsImVycm9ySW5kZXgiLCJleHRyYWN0RXJyb3JJbmRleCIsImJ1aWxkRXJyb3JNZXNzYWdlIiwiZXJyb3JzIiwiZmlyc3RFcnJvcktleSIsImJ1bGtSZXF1ZXN0SW5kZXgiLCJlcnJvclBhcnNlUmVzdWx0IiwicGFyc2VFcnJvckluZGV4IiwiQUREX1JFQ09SRFNfTElNSVQiLCJVUERBVEVfUkVDT1JEU19MSU1JVCIsIkRFTEVURV9SRUNPUkRTX0xJTUlUIiwiUmVjb3JkQ2xpZW50IiwiYnVsa1JlcXVlc3RDbGllbnQiLCJkaWRXYXJuTWF4aW11bU9mZnNldFZhbHVlIiwiYXBwIiwidXBkYXRlS2V5IiwiZ2V0UmVjb3JkcyIsInF1ZXJ5IiwiZmllbGQiLCJyZWNvcmRzIiwiJGlkIiwidXBkYXRlUmVjb3JkIiwicmV2aXNpb24iLCJhZGRSZWNvcmQiLCJyZXNwb25zZSIsIndhcm5NYXhpbXVtT2Zmc2V0VmFsdWVJZk5lZWRlZCIsImNvbnNvbGUiLCJ3YXJuIiwiaWRzIiwicmV2aXNpb25zIiwiY29uZGl0aW9uIiwib3JkZXJCeSIsIndpdGhDdXJzb3IiLCJnZXRBbGxSZWNvcmRzV2l0aElkIiwiY29uZGl0aW9uUXVlcnkiLCJnZXRBbGxSZWNvcmRzV2l0aEN1cnNvciIsImdldEFsbFJlY29yZHNXaXRoT2Zmc2V0Iiwib3JpZ2luYWxGaWVsZHMiLCJmaWVsZHMiLCJnZXRBbGxSZWNvcmRzUmVjdXJzaXZlV2l0aElkIiwiR0VUX1JFQ09SRFNfTElNSVQiLCJhbGxSZWNvcmRzIiwibGFzdFJlY29yZCIsImxhc3RJZCIsImdldEFsbFJlY29yZHNSZWN1cnNpdmVXaXRoT2Zmc2V0Iiwib2Zmc2V0IiwiY3JlYXRlQ3Vyc29yIiwiZ2V0QWxsUmVjb3Jkc1JlY3Vyc2l2ZUJ5Q3Vyc29yIiwiZGVsZXRlQ3Vyc29yIiwiZ2V0UmVjb3Jkc0J5Q3Vyc29yIiwiYWRkQWxsUmVjb3Jkc1JlY3Vyc2l2ZSIsInJlc3VsdHMiLCJDSFVOS19MRU5HVEgiLCJyZWNvcmRzQ2h1bmsiLCJhZGRBbGxSZWNvcmRzV2l0aEJ1bGtSZXF1ZXN0IiwibmV3UmVzdWx0cyIsInNlcGFyYXRlZFJlY29yZHMiLCJzZXBhcmF0ZUFycmF5UmVjdXJzaXZlIiwicGF5bG9hZCIsInNlbmQiLCJhY2MiLCJ1cGRhdGVBbGxSZWNvcmRzUmVjdXJzaXZlIiwidXBkYXRlQWxsUmVjb3Jkc1dpdGhCdWxrUmVxdWVzdCIsImRlbGV0ZUFsbFJlY29yZHNSZWN1cnNpdmUiLCJkZWxldGVBbGxSZWNvcmRzV2l0aEJ1bGtSZXF1ZXN0Iiwic2VwYXJhdGVkIiwiY2h1bmsiLCJicm93c2VyIiwiRm9ybURhdGEiLCJGaWxlQ2xpZW50IiwiZm9ybURhdGEiLCJmaWxlIiwiYXBwZW5kIiwicG9zdERhdGEiLCJnZXREYXRhIiwidGhpc0FyZyIsImFyZ3MiLCJpc1VuZGVmaW5lZCIsImlzQnVmZmVyIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzUGxhaW5PYmplY3QiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0Z1bmN0aW9uIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJsIiwibWVyZ2UiLCJhc3NpZ25WYWx1ZSIsImV4dGVuZCIsInN0cmlwQk9NIiwidXRpbHMiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJidWlsZFVSTCIsInVybCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJzZXJpYWxpemUiLCJwYXJzZVZhbHVlIiwidiIsInRvSVNPU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImhhc2htYXJrSW5kZXgiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJoYW5kbGVycyIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic3luY2hyb25vdXMiLCJydW5XaGVuIiwiZWplY3QiLCJmb3JFYWNoSGFuZGxlciIsImgiLCJJbnRlcmNlcHRvck1hbmFnZXJfMSIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiZSIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsInF1ZXVlIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJuZXh0VGljayIsIkl0ZW0iLCJ0aXRsZSIsImVudiIsImFyZ3YiLCJyZWxlYXNlIiwiY29uZmlnIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsInBlcmZvcm1hbmNlIiwicGVyZm9ybWFuY2VOb3ciLCJub3ciLCJtb3pOb3ciLCJtc05vdyIsIm9Ob3ciLCJ3ZWJraXROb3ciLCJEYXRlIiwiZ2V0VGltZSIsImhydGltZSIsInByZXZpb3VzVGltZXN0YW1wIiwiY2xvY2t0aW1lIiwic2Vjb25kcyIsIm5hbm9zZWNvbmRzIiwic3RhcnRUaW1lIiwidXB0aW1lIiwiY3VycmVudFRpbWUiLCJkaWYiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiaGVhZGVycyIsIm5vcm1hbGl6ZWROYW1lIiwicHJvY2Vzc0hlYWRlciIsInRvVXBwZXJDYXNlIiwiZW5oYW5jZUVycm9yIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJzdGF0dXMiLCJ0cmFuc2l0aW9uYWwiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsImNyZWF0ZUVycm9yIiwic2V0dGxlIiwidmFsaWRhdGVTdGF0dXMiLCJjb29raWVzIiwic3RhbmRhcmRCcm93c2VyRW52IiwiZXhwaXJlcyIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwicmVhZCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vblN0YW5kYXJkQnJvd3NlckVudiIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsImJ1aWxkRnVsbFBhdGgiLCJyZXF1ZXN0ZWRVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlSGVhZGVycyIsInBhcnNlZCIsInBhcnNlciIsImxpbmUiLCJzdWJzdHIiLCJpc1VSTFNhbWVPcmlnaW4iLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJvcmlnaW5VUkwiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJDYW5jZWwiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsXzEiLCJ0cmFuc2l0aW9uYWxEZWZhdWx0cyIsInhociIsInhockFkYXB0ZXIiLCJkaXNwYXRjaFhoclJlcXVlc3QiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwib25DYW5jZWxlZCIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlRGF0YSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJfcmVzb2x2ZSIsIl9yZWplY3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJoYW5kbGVMb2FkIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwib25hYm9ydCIsImhhbmRsZUFib3J0Iiwib25lcnJvciIsImhhbmRsZUVycm9yIiwib250aW1lb3V0IiwiaGFuZGxlVGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsIiwiYWJvcnQiLCJzdWJzY3JpYmUiLCJhYm9ydGVkIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJnZXREZWZhdWx0QWRhcHRlciIsImFkYXB0ZXIiLCJzdHJpbmdpZnlTYWZlbHkiLCJyYXdWYWx1ZSIsImVuY29kZXIiLCJwYXJzZSIsImRlZmF1bHRzIiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwic3RyaWN0SlNPTlBhcnNpbmciLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsImNvbW1vbiIsImZvckVhY2hNZXRob2ROb0RhdGEiLCJmb3JFYWNoTWV0aG9kV2l0aERhdGEiLCJkZWZhdWx0c18xIiwidHJhbnNmb3JtRGF0YSIsImZucyIsInRyYW5zZm9ybSIsImlzQ2FuY2VsIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJkaXNwYXRjaFJlcXVlc3QiLCJjbGVhbkhlYWRlckNvbmZpZyIsIm9uQWRhcHRlclJlc29sdXRpb24iLCJvbkFkYXB0ZXJSZWplY3Rpb24iLCJyZWFzb24iLCJtZXJnZUNvbmZpZyIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJjb21wdXRlQ29uZmlnVmFsdWUiLCJjb25maWdWYWx1ZSIsIlZFUlNJT04iLCJ2YWxpZGF0b3JzIiwidmFsaWRhdG9yIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJhc3NlcnRPcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsImNvbmZpZ09yVXJsIiwiYm9vbGVhbiIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwidW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMiLCJwcm9taXNlIiwiY2hhaW4iLCJzaGlmdCIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdldFVyaSIsIkF4aW9zXzEiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlRXhlY3V0b3IiLCJ0b2tlbiIsIl9saXN0ZW5lcnMiLCJvbmZ1bGZpbGxlZCIsImxpc3RlbmVyIiwic3BsaWNlIiwiYyIsIkNhbmNlbFRva2VuXzEiLCJzcHJlYWQiLCJjYWxsYmFjayIsImFyciIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlIiwiYXhpb3MiLCJhbGwiLCJwcm9taXNlcyIsImF4aW9zTW9kdWxlIiwiYXhpb3NfMSIsImRlZmF1bHQiLCJBeGlvc0NsaWVudCIsInJlc3BvbnNlSGFuZGxlciIsInJlcXVlc3RDb25maWdCdWlsZGVyIiwiYnVpbGQiLCJyZXF1ZXN0Q29uZmlnIiwic2VuZFJlcXVlc3QiLCJJbmZpbml0eSIsInVuJEpvaW4iLCJFUzNfU1RSSU5HUyIsInNlcGFyYXRvciIsInNoYW1zIiwiaGFzU3ltYm9scyIsInN5bSIsInN5bU9iaiIsInN5bVZhbCIsInN5bXMiLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsImhhc05hdGl2ZVN5bWJvbHMiLCJFUlJPUl9NRVNTQUdFIiwidG9TdHIiLCJmdW5jVHlwZSIsImltcGxlbWVudGF0aW9uIiwiYm91bmQiLCJiaW5kZXIiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsIkVtcHR5IiwiZnVuY3Rpb25CaW5kIiwiJFN5bnRheEVycm9yIiwiU3ludGF4RXJyb3IiLCIkRnVuY3Rpb24iLCIkVHlwZUVycm9yIiwiZ2V0RXZhbGxlZENvbnN0cnVjdG9yIiwiZXhwcmVzc2lvblN5bnRheCIsIiRnT1BEIiwidGhyb3dUeXBlRXJyb3IiLCJUaHJvd1R5cGVFcnJvciIsImNhbGxlZVRocm93cyIsImdPUER0aHJvd3MiLCJ4IiwibmVlZHNFdmFsIiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJJTlRSSU5TSUNTIiwiQWdncmVnYXRlRXJyb3IiLCJBdG9taWNzIiwiQmlnSW50IiwiRGF0YVZpZXciLCJkZWNvZGVVUkkiLCJlbmNvZGVVUkkiLCJldmFsIiwiRXZhbEVycm9yIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsImlzRmluaXRlIiwiTWFwIiwicGFyc2VGbG9hdCIsIlByb3h5IiwiUmFuZ2VFcnJvciIsIlJlZmVyZW5jZUVycm9yIiwiUmVmbGVjdCIsIlNldCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiVVJJRXJyb3IiLCJXZWFrUmVmIiwiV2Vha1NldCIsImRvRXZhbCIsImdlbiIsIkxFR0FDWV9BTElBU0VTIiwiJGNvbmNhdCIsIiRzcGxpY2VBcHBseSIsIiRyZXBsYWNlIiwiJHN0clNsaWNlIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsImxhc3QiLCJxdW90ZSIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJhbGxvd01pc3NpbmciLCJpbnRyaW5zaWNOYW1lIiwiYWxpYXMiLCJnZXRJbnRyaW5zaWMiLCJHZXRJbnRyaW5zaWMiLCJpbnRyaW5zaWNCYXNlTmFtZSIsImludHJpbnNpYyIsImludHJpbnNpY1JlYWxOYW1lIiwic2tpcEZ1cnRoZXJDYWNoaW5nIiwiaXNPd24iLCJwYXJ0IiwiYXN5bmNHZW5GdW5jdGlvbiIsImFzeW5jR2VuRnVuY3Rpb25Qcm90b3R5cGUiLCJhc3luY0dlblByb3RvdHlwZSIsIiRhcHBseSIsIiRjYWxsIiwiJHJlZmxlY3RBcHBseSIsImNhbGxCaW5kIiwiYXBwbHlCaW5kIiwiJGluZGV4T2YiLCJjYWxsQm91bmQiLCJjYWxsQm91bmRJbnRyaW5zaWMiLCJoYXNNYXAiLCJtYXBTaXplRGVzY3JpcHRvciIsIm1hcFNpemUiLCJtYXBGb3JFYWNoIiwiaGFzU2V0Iiwic2V0U2l6ZURlc2NyaXB0b3IiLCJzZXRTaXplIiwic2V0Rm9yRWFjaCIsImhhc1dlYWtNYXAiLCJ3ZWFrTWFwSGFzIiwiaGFzV2Vha1NldCIsIndlYWtTZXRIYXMiLCJib29sZWFuVmFsdWVPZiIsImJpZ0ludFZhbHVlT2YiLCJnT1BTIiwic3ltVG9TdHJpbmciLCJpc0VudW1lcmFibGUiLCJpbnNwZWN0Q3VzdG9tIiwiY3VzdG9tIiwiaW5zcGVjdFN5bWJvbCIsIm9iamVjdEluc3BlY3QiLCJpbnNwZWN0XyIsImRlcHRoIiwic2VlbiIsInF1b3RlU3R5bGUiLCJtYXhTdHJpbmdMZW5ndGgiLCJjdXN0b21JbnNwZWN0IiwiaW5kZW50IiwiaW5zcGVjdFN0cmluZyIsIm1heERlcHRoIiwiZ2V0SW5kZW50IiwiaW5zcGVjdCIsImZyb20iLCJub0luZGVudCIsIm5ld09wdHMiLCJuYW1lT2YiLCJhcnJPYmpLZXlzIiwic3ltU3RyaW5nIiwibWFya0JveGVkIiwiaXNFbGVtZW50IiwicyIsIm5vZGVOYW1lIiwiYXR0cnMiLCJhdHRyaWJ1dGVzIiwid3JhcFF1b3RlcyIsImNoaWxkTm9kZXMiLCJ4cyIsInNpbmdsZUxpbmVWYWx1ZXMiLCJpbmRlbnRlZEpvaW4iLCJpc0Vycm9yIiwiaXNNYXAiLCJtYXBQYXJ0cyIsImNvbGxlY3Rpb25PZiIsImlzU2V0Iiwic2V0UGFydHMiLCJpc1dlYWtNYXAiLCJ3ZWFrQ29sbGVjdGlvbk9mIiwiaXNXZWFrU2V0IiwiaXNCaWdJbnQiLCJpc0Jvb2xlYW4iLCJpc1JlZ0V4cCIsInlzIiwiZGVmYXVsdFN0eWxlIiwicXVvdGVDaGFyIiwibSIsIkhUTUxFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwicmVtYWluaW5nIiwidHJhaWxlciIsImxvd2J5dGUiLCJlbnRyaWVzIiwiam9pbmVkRW50cmllcyIsImJhc2VJbmRlbnQiLCJiYXNlIiwibGluZUpvaW5lciIsImlzQXJyIiwiJFdlYWtNYXAiLCIkTWFwIiwiJHdlYWtNYXBHZXQiLCIkd2Vha01hcFNldCIsIiR3ZWFrTWFwSGFzIiwiJG1hcEdldCIsIiRtYXBTZXQiLCIkbWFwSGFzIiwibGlzdEdldE5vZGUiLCJsaXN0IiwiY3VyciIsImxpc3RHZXQiLCJvYmplY3RzIiwibm9kZSIsImxpc3RTZXQiLCJsaXN0SGFzIiwic2lkZUNoYW5uZWwiLCJnZXRTaWRlQ2hhbm5lbCIsIiR3bSIsIiRtIiwiJG8iLCJjaGFubmVsIiwiYXNzZXJ0IiwicGVyY2VudFR3ZW50aWVzIiwiRm9ybWF0IiwiUkZDMTczOCIsIlJGQzM5ODYiLCJmb3JtYXRzIiwiZm9ybWF0dGVycyIsImhleFRhYmxlIiwiY29tcGFjdFF1ZXVlIiwiaXRlbSIsImNvbXBhY3RlZCIsImFycmF5VG9PYmplY3QiLCJwbGFpbk9iamVjdHMiLCJhbGxvd1Byb3RvdHlwZXMiLCJtZXJnZVRhcmdldCIsInRhcmdldEl0ZW0iLCJhc3NpZ25TaW5nbGVTb3VyY2UiLCJkZWNvZGUiLCJkZWNvZGVyIiwiY2hhcnNldCIsInN0cldpdGhvdXRQbHVzIiwiZGVmYXVsdEVuY29kZXIiLCJraW5kIiwiZm9ybWF0IiwiZXNjYXBlIiwiJDAiLCJvdXQiLCJjb21wYWN0IiwibyIsInJlZnMiLCJjb21iaW5lIiwibWF5YmVNYXAiLCJtYXBwZWQiLCJhcnJheVByZWZpeEdlbmVyYXRvcnMiLCJicmFja2V0cyIsInByZWZpeCIsImNvbW1hIiwiaW5kaWNlcyIsInJlcGVhdCIsInB1c2hUb0FycmF5IiwidmFsdWVPckFycmF5IiwidG9JU08iLCJkZWZhdWx0Rm9ybWF0IiwiYWRkUXVlcnlQcmVmaXgiLCJhbGxvd0RvdHMiLCJjaGFyc2V0U2VudGluZWwiLCJkZWxpbWl0ZXIiLCJlbmNvZGVWYWx1ZXNPbmx5IiwiZm9ybWF0dGVyIiwic2VyaWFsaXplRGF0ZSIsImRhdGUiLCJza2lwTnVsbHMiLCJzdHJpY3ROdWxsSGFuZGxpbmciLCJpc05vbk51bGxpc2hQcmltaXRpdmUiLCJzZW50aW5lbCIsImdlbmVyYXRlQXJyYXlQcmVmaXgiLCJzb3J0IiwidG1wU2MiLCJzdGVwIiwiZmluZEZsYWciLCJrZXlWYWx1ZSIsInZhbHVlc0FycmF5IiwidmFsdWVzSm9pbmVkIiwib2JqS2V5cyIsImtleVByZWZpeCIsInZhbHVlU2lkZUNoYW5uZWwiLCJub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zIiwic3RyaW5naWZ5XzEiLCJhcnJheUZvcm1hdCIsImpvaW5lZCIsImFsbG93U3BhcnNlIiwiYXJyYXlMaW1pdCIsImlnbm9yZVF1ZXJ5UHJlZml4IiwiaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIiwicGFyYW1ldGVyTGltaXQiLCJwYXJzZUFycmF5cyIsIm51bWJlclN0ciIsImZyb21DaGFyQ29kZSIsInBhcnNlQXJyYXlWYWx1ZSIsImlzb1NlbnRpbmVsIiwicGFyc2VWYWx1ZXMiLCJwYXJzZVF1ZXJ5U3RyaW5nVmFsdWVzIiwiY2xlYW5TdHIiLCJsaW1pdCIsInNraXBJbmRleCIsImJyYWNrZXRFcXVhbHNQb3MiLCJlbmNvZGVkVmFsIiwicGFyc2VPYmplY3QiLCJ2YWx1ZXNQYXJzZWQiLCJsZWFmIiwicm9vdCIsImNsZWFuUm9vdCIsInBhcnNlS2V5cyIsInBhcnNlUXVlcnlTdHJpbmdLZXlzIiwiZ2l2ZW5LZXkiLCJjaGlsZCIsInNlZ21lbnQiLCJwYXJlbnQiLCJub3JtYWxpemVQYXJzZU9wdGlvbnMiLCJ0ZW1wT2JqIiwibmV3T2JqIiwibGliIiwiX2hhc2F0b2IiLCJhdG9iIiwiX2hhc2J0b2EiLCJfaGFzQnVmZmVyIiwiQnVmZmVyIiwiX1REIiwiVGV4dERlY29kZXIiLCJfVEUiLCJUZXh0RW5jb2RlciIsImI2NGNoIiwiYjY0Y2hzIiwiYjY0dGFiIiwidGFiIiwiYjY0cmUiLCJfZnJvbUNDIiwiX1U4QWZyb20iLCJfbWtVcmlTYWZlIiwibTAiLCJfdGlkeUI2NCIsImJ0b2FQb2x5ZmlsbCIsImJpbiIsInUzMiIsImMwIiwiYzEiLCJjMiIsImFzYyIsInBhZCIsInN1YnN0cmluZyIsIl9idG9hIiwiX2Zyb21VaW50OEFycmF5IiwidThhIiwibWF4YXJncyIsInN0cnMiLCJzdWJhcnJheSIsImZyb21VaW50OEFycmF5IiwidXJsc2FmZSIsImNiX3V0b2IiLCJjYyIsInJlX3V0b2IiLCJ1dG9iIiwidSIsIl9lbmNvZGUiLCJyZV9idG91IiwiY2JfYnRvdSIsImNjY2MiLCJjcCIsImJ0b3UiLCJhdG9iUG9seWZpbGwiLCJ1MjQiLCJyMSIsInIyIiwiX2F0b2IiLCJfdG9VaW50OEFycmF5IiwidG9VaW50OEFycmF5IiwiX3VuVVJJIiwiX2RlY29kZSIsImlzVmFsaWQiLCJfbm9FbnVtIiwiZXh0ZW5kU3RyaW5nIiwiX2FkZCIsImJvZHkiLCJleHRlbmRVaW50OEFycmF5IiwiZXh0ZW5kQnVpbHRpbnMiLCJnQmFzZTY0IiwiZnJvbUJhc2U2NCIsInRvQmFzZTY0IiwiZW5jb2RlVVJMIiwiVEhSRVNIT0xEX0FWT0lEX1JFUVVFU1RfVVJMX1RPT19MQVJHRSIsIktpbnRvbmVSZXF1ZXN0Q29uZmlnQnVpbGRlciIsImJhc2ljQXV0aCIsImNsaWVudENlcnRBdXRoIiwicHJveHkiLCJyZXF1ZXN0VG9rZW4iLCJyZXF1ZXN0VXJsIiwiYnVpbGRSZXF1ZXN0VXJsIiwiYnVpbGREYXRhIiwiZ2V0SGVhZGVycyIsInFzIiwiX19SRVFVRVNUX1RPS0VOX18iLCJiYXNpY0F1dGhIZWFkZXJzIiwiQmFzZTY0IiwicGxhdGZvcm1EZXBzSGVhZGVycyIsImNvbW1vbkhlYWRlcnMiLCJhcGlUb2tlbiIsIm9BdXRoVG9rZW4iLCJEYXRlUHJvdG90eXBlIiwiSU5WQUxJRF9EQVRFIiwiVE9fU1RSSU5HIiwidW4kRGF0ZVRvU3RyaW5nIiwiUFJPUEVSX0ZVTkNUSU9OX05BTUUiLCIkdG9TdHJpbmciLCJyZWdFeHBGbGFncyIsIm4kVG9TdHJpbmciLCJnZXRGbGFncyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJwIiwicmYiLCJLaW50b25lQWJvcnRTZWFyY2hFcnJvciIsIktpbnRvbmVSZXN0QVBJRXJyb3IiLCJidWlsZEVycm9yUmVzcG9uc2VEYXRlV2l0aEluZGV4IiwiZmluZEVycm9yUmVzcG9uc2VEYXRhV2l0aEluZGV4IiwiS2ludG9uZVJlc3BvbnNlSGFuZGxlciIsImVuYWJsZUFib3J0U2VhcmNoRXJyb3IiLCJoYW5kbGVTdWNjZXNzUmVzcG9uc2UiLCJoYW5kbGVFcnJvclJlc3BvbnNlIiwiZXJyb3JSZXNwb25zZSIsImJ1aWxkRGlzY3JpbWluYXRlZEF1dGgiLCJLaW50b25lUmVzdEFQSUNsaWVudCIsInZhbGlkYXRlT3B0aW9ucyIsImZlYXR1cmVGbGFncyIsImh0dHBDbGllbnQiLCJEZWZhdWx0SHR0cENsaWVudCIsImJ1bGtSZXF1ZXN0XyIsInZhbGlkYXRlR3Vlc3RTcGFjZUlkIiwiYnJvd3NlckRlcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztFQWNPLElBQU1BLFlBQTBCLEdBQUc7RUFDeENDLEVBQUFBLGdCQUFnQixFQUFFLFNBQU0sZ0JBQUEsR0FBQTtFQUN0QixJQUFBLE1BQU0sSUFBSUMsS0FBSixDQUFVLGlCQUFWLENBQU4sQ0FBQTtFQUNELEdBSHVDO0VBSXhDQyxFQUFBQSxlQUFlLEVBQUUsU0FBTSxlQUFBLEdBQUE7RUFDckIsSUFBQSxNQUFNLElBQUlELEtBQUosQ0FBVSxpQkFBVixDQUFOLENBQUE7RUFDRCxHQU51QztFQU94Q0UsRUFBQUEsY0FBYyxFQUFFLFNBQU0sY0FBQSxHQUFBO0VBQ3BCLElBQUEsTUFBTSxJQUFJRixLQUFKLENBQVUsaUJBQVYsQ0FBTixDQUFBO0VBQ0QsR0FU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
