#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const forms_client_impl_1 = require("./kintone/clients/forms-client-impl");
const demo_client_1 = require("./kintone/clients/demo-client");
const fileldtype_converter_1 = require("./converters/fileldtype-converter");
const template_1 = require("./templates/template");
const objectvalues_1 = require("./utils//objectvalues");
const cli_parser_1 = require("./cli-parser");
process.on("uncaughtException", (e) => {
    console.error(e.message);
    // eslint-disable-next-line no-process-exit
    process.exit(1);
});
const args = (0, cli_parser_1.parse)(process.argv);
const client = args.demo ? new demo_client_1.DemoClient() : new forms_client_impl_1.FormsClientImpl(args);
const fetchFormPropertiesInput = {
    appId: args.appId,
    guestSpaceId: args.guestSpaceId,
    preview: args.preview,
};
client
    .fetchFormProperties(fetchFormPropertiesInput)
    .then((properties) => fileldtype_converter_1.FieldTypeConverter.convertFieldTypesToFieldTypeGroups((0, objectvalues_1.objectValues)(properties)))
    .then((fieldTypeGroups) => {
    const typeName = args.typeName;
    const namespace = args.namespace;
    const input = {
        typeName,
        namespace,
        fieldTypeGroups,
    };
    template_1.TypeDefinitionTemplate.renderAsFile(args.output, input);
})
    // eslint-disable-next-line no-console
    .catch((err) => console.error(err));
//# sourceMappingURL=index.js.map